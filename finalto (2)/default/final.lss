
final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007c  00800100  000064ba  0000654e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000064ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005a  0080017c  0080017c  000065ca  2**0
                  ALLOC
  3 .debug_aranges 00000200  00000000  00000000  000065ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000336  00000000  00000000  000067ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003abf  00000000  00000000  00006b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001664  00000000  00000000  0000a5bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003198  00000000  00000000  0000bc23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000310  00000000  00000000  0000edbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000505  00000000  00000000  0000f0cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000088e  00000000  00000000  0000f5d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0000fe5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea eb       	ldi	r30, 0xBA	; 186
      a0:	f4 e6       	ldi	r31, 0x64	; 100
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 37       	cpi	r26, 0x7C	; 124
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	11 e0       	ldi	r17, 0x01	; 1
      b4:	ac e7       	ldi	r26, 0x7C	; 124
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a6 3d       	cpi	r26, 0xD6	; 214
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 67 00 	call	0xce	; 0xce <main>
      c6:	0c 94 5b 32 	jmp	0x64b6	; 0x64b6 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:

// 장애물 회피 정면 오른쪽
#define TRIGFR 4   // Trigger 신호 (출력 = PD4)
#define ECHOFR 5    // Echo 신호 (입력 = PD5)

int main(){
      ce:	0f 93       	push	r16
      d0:	1f 93       	push	r17
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	c2 5c       	subi	r28, 0xC2	; 194
      dc:	d1 40       	sbci	r29, 0x01	; 1
      de:	0f b6       	in	r0, 0x3f	; 63
      e0:	f8 94       	cli
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	0f be       	out	0x3f, r0	; 63
      e6:	cd bf       	out	0x3d, r28	; 61
uart_init();
      e8:	0e 94 02 28 	call	0x5004	; 0x5004 <uart_init>
unsigned int k=0; // 얼마나 내려갔는지 측정 
      ec:	fe 01       	movw	r30, r28
      ee:	ef 53       	subi	r30, 0x3F	; 63
      f0:	fe 4f       	sbci	r31, 0xFE	; 254
      f2:	11 82       	std	Z+1, r1	; 0x01
      f4:	10 82       	st	Z, r1
unsigned int i=0; // 내려간 만큼 올라오게하기
      f6:	fe 01       	movw	r30, r28
      f8:	e1 54       	subi	r30, 0x41	; 65
      fa:	fe 4f       	sbci	r31, 0xFE	; 254
      fc:	11 82       	std	Z+1, r1	; 0x01
      fe:	10 82       	st	Z, r1
unsigned int s=0; // 짐을 들고 있는지 확인 1이면 짐들고 있고 0이면 짐 안들고 있음
     100:	fe 01       	movw	r30, r28
     102:	e3 54       	subi	r30, 0x43	; 67
     104:	fe 4f       	sbci	r31, 0xFE	; 254
     106:	11 82       	std	Z+1, r1	; 0x01
     108:	10 82       	st	Z, r1
unsigned int r=0; // 짐다시 내리기
     10a:	fe 01       	movw	r30, r28
     10c:	e5 54       	subi	r30, 0x45	; 69
     10e:	fe 4f       	sbci	r31, 0xFE	; 254
     110:	11 82       	std	Z+1, r1	; 0x01
     112:	10 82       	st	Z, r1
unsigned int f=0; // 마지막으로 올리기
     114:	fe 01       	movw	r30, r28
     116:	e7 54       	subi	r30, 0x47	; 71
     118:	fe 4f       	sbci	r31, 0xFE	; 254
     11a:	11 82       	std	Z+1, r1	; 0x01
     11c:	10 82       	st	Z, r1
unsigned int a=0; // if 문 안가게 
     11e:	fe 01       	movw	r30, r28
     120:	e9 54       	subi	r30, 0x49	; 73
     122:	fe 4f       	sbci	r31, 0xFE	; 254
     124:	11 82       	std	Z+1, r1	; 0x01
     126:	10 82       	st	Z, r1
    unsigned int FRONT; // 장애물 회피 정면
    unsigned int LEFT; // 장애물 회피 정면 왼쪽
    unsigned int RIGHT; // 장애물 회피 정면 오른쪽
  //  unsigned int AFTERRIGHT; // 차 뒷면 오른쪽
  //  unsigned int AFTERLEFT; // 차 뒷면 왼쪽
	unsigned int prevSINKF= 100;
     128:	fe 01       	movw	r30, r28
     12a:	e1 55       	subi	r30, 0x51	; 81
     12c:	fe 4f       	sbci	r31, 0xFE	; 254
     12e:	84 e6       	ldi	r24, 0x64	; 100
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	91 83       	std	Z+1, r25	; 0x01
     134:	80 83       	st	Z, r24
unsigned int speed = 40;  // 기본 속도
     136:	fe 01       	movw	r30, r28
     138:	e3 55       	subi	r30, 0x53	; 83
     13a:	fe 4f       	sbci	r31, 0xFE	; 254
     13c:	88 e2       	ldi	r24, 0x28	; 40
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	91 83       	std	Z+1, r25	; 0x01
     142:	80 83       	st	Z, r24
    unsigned int turnspeed = 27;  // 회전시 속도
     144:	fe 01       	movw	r30, r28
     146:	e5 55       	subi	r30, 0x55	; 85
     148:	fe 4f       	sbci	r31, 0xFE	; 254
     14a:	8b e1       	ldi	r24, 0x1B	; 27
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	91 83       	std	Z+1, r25	; 0x01
     150:	80 83       	st	Z, r24

while(1){

dcmoter_port(); // dc 모터 설정
     152:	0e 94 2c 1c 	call	0x3858	; 0x3858 <dcmoter_port>
slowsubport(); // 서브모터 설정
     156:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <slowsubport>
PORTB = 0b00110000; // 01 전진 기본 설정
     15a:	e8 e3       	ldi	r30, 0x38	; 56
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 e3       	ldi	r24, 0x30	; 48
     160:	80 83       	st	Z, r24
PORTC = 0b10000000;  //PC7사용 
     162:	e5 e3       	ldi	r30, 0x35	; 53
     164:	f0 e0       	ldi	r31, 0x00	; 0
     166:	80 e8       	ldi	r24, 0x80	; 128
     168:	80 83       	st	Z, r24
DDRA = 0b00000001; // A포트는 입력을 받게 pa0는 전자석
     16a:	ea e3       	ldi	r30, 0x3A	; 58
     16c:	f0 e0       	ldi	r31, 0x00	; 0
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	80 83       	st	Z, r24
DDRD = 0b01010101; // TRIGL = 출력 , ECHOL = 입력 setting //
     172:	e1 e3       	ldi	r30, 0x31	; 49
     174:	f0 e0       	ldi	r31, 0x00	; 0
     176:	85 e5       	ldi	r24, 0x55	; 85
     178:	80 83       	st	Z, r24
 DDRF = 0b01010101; // TRIGL = 출력 , ECHOL = 입력 setting //
     17a:	e1 e6       	ldi	r30, 0x61	; 97
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	85 e5       	ldi	r24, 0x55	; 85
     180:	80 83       	st	Z, r24
//PORTA = 0b10000000; // 적외선 센서 인식용 흰색 선 인식하면 PA7=0;
OCR0=50; // 차량 모터 속도 설정
     182:	e1 e5       	ldi	r30, 0x51	; 81
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	82 e3       	ldi	r24, 0x32	; 50
     188:	80 83       	st	Z, r24
 //    SINKF = distanceAFTER(TRIGSF, ECHOSF); // 씽크홀 전면 변수
    //    _delay_ms(10);
        FRONT = distanceFRONT(TRIGFF, ECHOFF);
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	61 e0       	ldi	r22, 0x01	; 1
     190:	70 e0       	ldi	r23, 0x00	; 0
     192:	0e 94 0e 18 	call	0x301c	; 0x301c <distanceFRONT>
     196:	fe 01       	movw	r30, r28
     198:	eb 54       	subi	r30, 0x4B	; 75
     19a:	fe 4f       	sbci	r31, 0xFE	; 254
     19c:	91 83       	std	Z+1, r25	; 0x01
     19e:	80 83       	st	Z, r24
     1a0:	fe 01       	movw	r30, r28
     1a2:	ef 55       	subi	r30, 0x5F	; 95
     1a4:	fe 4f       	sbci	r31, 0xFE	; 254
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	a0 e2       	ldi	r26, 0x20	; 32
     1ac:	b1 e4       	ldi	r27, 0x41	; 65
     1ae:	80 83       	st	Z, r24
     1b0:	91 83       	std	Z+1, r25	; 0x01
     1b2:	a2 83       	std	Z+2, r26	; 0x02
     1b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     1b6:	8e 01       	movw	r16, r28
     1b8:	03 56       	subi	r16, 0x63	; 99
     1ba:	1e 4f       	sbci	r17, 0xFE	; 254
     1bc:	fe 01       	movw	r30, r28
     1be:	ef 55       	subi	r30, 0x5F	; 95
     1c0:	fe 4f       	sbci	r31, 0xFE	; 254
     1c2:	60 81       	ld	r22, Z
     1c4:	71 81       	ldd	r23, Z+1	; 0x01
     1c6:	82 81       	ldd	r24, Z+2	; 0x02
     1c8:	93 81       	ldd	r25, Z+3	; 0x03
     1ca:	20 e0       	ldi	r18, 0x00	; 0
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	4a e7       	ldi	r20, 0x7A	; 122
     1d0:	55 e4       	ldi	r21, 0x45	; 69
     1d2:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
     1d6:	dc 01       	movw	r26, r24
     1d8:	cb 01       	movw	r24, r22
     1da:	f8 01       	movw	r30, r16
     1dc:	80 83       	st	Z, r24
     1de:	91 83       	std	Z+1, r25	; 0x01
     1e0:	a2 83       	std	Z+2, r26	; 0x02
     1e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     1e4:	fe 01       	movw	r30, r28
     1e6:	e3 56       	subi	r30, 0x63	; 99
     1e8:	fe 4f       	sbci	r31, 0xFE	; 254
     1ea:	60 81       	ld	r22, Z
     1ec:	71 81       	ldd	r23, Z+1	; 0x01
     1ee:	82 81       	ldd	r24, Z+2	; 0x02
     1f0:	93 81       	ldd	r25, Z+3	; 0x03
     1f2:	20 e0       	ldi	r18, 0x00	; 0
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	40 e8       	ldi	r20, 0x80	; 128
     1f8:	5f e3       	ldi	r21, 0x3F	; 63
     1fa:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
     1fe:	88 23       	and	r24, r24
     200:	44 f4       	brge	.+16     	; 0x212 <main+0x144>
		__ticks = 1;
     202:	fe 01       	movw	r30, r28
     204:	e5 56       	subi	r30, 0x65	; 101
     206:	fe 4f       	sbci	r31, 0xFE	; 254
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	91 83       	std	Z+1, r25	; 0x01
     20e:	80 83       	st	Z, r24
     210:	64 c0       	rjmp	.+200    	; 0x2da <main+0x20c>
	else if (__tmp > 65535)
     212:	fe 01       	movw	r30, r28
     214:	e3 56       	subi	r30, 0x63	; 99
     216:	fe 4f       	sbci	r31, 0xFE	; 254
     218:	60 81       	ld	r22, Z
     21a:	71 81       	ldd	r23, Z+1	; 0x01
     21c:	82 81       	ldd	r24, Z+2	; 0x02
     21e:	93 81       	ldd	r25, Z+3	; 0x03
     220:	20 e0       	ldi	r18, 0x00	; 0
     222:	3f ef       	ldi	r19, 0xFF	; 255
     224:	4f e7       	ldi	r20, 0x7F	; 127
     226:	57 e4       	ldi	r21, 0x47	; 71
     228:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
     22c:	18 16       	cp	r1, r24
     22e:	0c f0       	brlt	.+2      	; 0x232 <main+0x164>
     230:	43 c0       	rjmp	.+134    	; 0x2b8 <main+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     232:	fe 01       	movw	r30, r28
     234:	ef 55       	subi	r30, 0x5F	; 95
     236:	fe 4f       	sbci	r31, 0xFE	; 254
     238:	60 81       	ld	r22, Z
     23a:	71 81       	ldd	r23, Z+1	; 0x01
     23c:	82 81       	ldd	r24, Z+2	; 0x02
     23e:	93 81       	ldd	r25, Z+3	; 0x03
     240:	20 e0       	ldi	r18, 0x00	; 0
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e2       	ldi	r20, 0x20	; 32
     246:	51 e4       	ldi	r21, 0x41	; 65
     248:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
     24c:	dc 01       	movw	r26, r24
     24e:	cb 01       	movw	r24, r22
     250:	8e 01       	movw	r16, r28
     252:	05 56       	subi	r16, 0x65	; 101
     254:	1e 4f       	sbci	r17, 0xFE	; 254
     256:	bc 01       	movw	r22, r24
     258:	cd 01       	movw	r24, r26
     25a:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
     25e:	dc 01       	movw	r26, r24
     260:	cb 01       	movw	r24, r22
     262:	f8 01       	movw	r30, r16
     264:	91 83       	std	Z+1, r25	; 0x01
     266:	80 83       	st	Z, r24
     268:	1f c0       	rjmp	.+62     	; 0x2a8 <main+0x1da>
     26a:	fe 01       	movw	r30, r28
     26c:	e7 56       	subi	r30, 0x67	; 103
     26e:	fe 4f       	sbci	r31, 0xFE	; 254
     270:	80 e9       	ldi	r24, 0x90	; 144
     272:	91 e0       	ldi	r25, 0x01	; 1
     274:	91 83       	std	Z+1, r25	; 0x01
     276:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     278:	fe 01       	movw	r30, r28
     27a:	e7 56       	subi	r30, 0x67	; 103
     27c:	fe 4f       	sbci	r31, 0xFE	; 254
     27e:	80 81       	ld	r24, Z
     280:	91 81       	ldd	r25, Z+1	; 0x01
     282:	01 97       	sbiw	r24, 0x01	; 1
     284:	f1 f7       	brne	.-4      	; 0x282 <main+0x1b4>
     286:	fe 01       	movw	r30, r28
     288:	e7 56       	subi	r30, 0x67	; 103
     28a:	fe 4f       	sbci	r31, 0xFE	; 254
     28c:	91 83       	std	Z+1, r25	; 0x01
     28e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     290:	de 01       	movw	r26, r28
     292:	a5 56       	subi	r26, 0x65	; 101
     294:	be 4f       	sbci	r27, 0xFE	; 254
     296:	fe 01       	movw	r30, r28
     298:	e5 56       	subi	r30, 0x65	; 101
     29a:	fe 4f       	sbci	r31, 0xFE	; 254
     29c:	80 81       	ld	r24, Z
     29e:	91 81       	ldd	r25, Z+1	; 0x01
     2a0:	01 97       	sbiw	r24, 0x01	; 1
     2a2:	11 96       	adiw	r26, 0x01	; 1
     2a4:	9c 93       	st	X, r25
     2a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2a8:	fe 01       	movw	r30, r28
     2aa:	e5 56       	subi	r30, 0x65	; 101
     2ac:	fe 4f       	sbci	r31, 0xFE	; 254
     2ae:	80 81       	ld	r24, Z
     2b0:	91 81       	ldd	r25, Z+1	; 0x01
     2b2:	00 97       	sbiw	r24, 0x00	; 0
     2b4:	d1 f6       	brne	.-76     	; 0x26a <main+0x19c>
     2b6:	27 c0       	rjmp	.+78     	; 0x306 <main+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2b8:	8e 01       	movw	r16, r28
     2ba:	05 56       	subi	r16, 0x65	; 101
     2bc:	1e 4f       	sbci	r17, 0xFE	; 254
     2be:	fe 01       	movw	r30, r28
     2c0:	e3 56       	subi	r30, 0x63	; 99
     2c2:	fe 4f       	sbci	r31, 0xFE	; 254
     2c4:	60 81       	ld	r22, Z
     2c6:	71 81       	ldd	r23, Z+1	; 0x01
     2c8:	82 81       	ldd	r24, Z+2	; 0x02
     2ca:	93 81       	ldd	r25, Z+3	; 0x03
     2cc:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
     2d0:	dc 01       	movw	r26, r24
     2d2:	cb 01       	movw	r24, r22
     2d4:	f8 01       	movw	r30, r16
     2d6:	91 83       	std	Z+1, r25	; 0x01
     2d8:	80 83       	st	Z, r24
     2da:	de 01       	movw	r26, r28
     2dc:	a9 56       	subi	r26, 0x69	; 105
     2de:	be 4f       	sbci	r27, 0xFE	; 254
     2e0:	fe 01       	movw	r30, r28
     2e2:	e5 56       	subi	r30, 0x65	; 101
     2e4:	fe 4f       	sbci	r31, 0xFE	; 254
     2e6:	80 81       	ld	r24, Z
     2e8:	91 81       	ldd	r25, Z+1	; 0x01
     2ea:	8d 93       	st	X+, r24
     2ec:	9c 93       	st	X, r25
     2ee:	fe 01       	movw	r30, r28
     2f0:	e9 56       	subi	r30, 0x69	; 105
     2f2:	fe 4f       	sbci	r31, 0xFE	; 254
     2f4:	80 81       	ld	r24, Z
     2f6:	91 81       	ldd	r25, Z+1	; 0x01
     2f8:	01 97       	sbiw	r24, 0x01	; 1
     2fa:	f1 f7       	brne	.-4      	; 0x2f8 <main+0x22a>
     2fc:	fe 01       	movw	r30, r28
     2fe:	e9 56       	subi	r30, 0x69	; 105
     300:	fe 4f       	sbci	r31, 0xFE	; 254
     302:	91 83       	std	Z+1, r25	; 0x01
     304:	80 83       	st	Z, r24
        _delay_ms(10);
        LEFT = distanceFRONT(TRIGFL, ECHOFL);
     306:	82 e0       	ldi	r24, 0x02	; 2
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	63 e0       	ldi	r22, 0x03	; 3
     30c:	70 e0       	ldi	r23, 0x00	; 0
     30e:	0e 94 0e 18 	call	0x301c	; 0x301c <distanceFRONT>
     312:	fe 01       	movw	r30, r28
     314:	ed 54       	subi	r30, 0x4D	; 77
     316:	fe 4f       	sbci	r31, 0xFE	; 254
     318:	91 83       	std	Z+1, r25	; 0x01
     31a:	80 83       	st	Z, r24
     31c:	fe 01       	movw	r30, r28
     31e:	ed 56       	subi	r30, 0x6D	; 109
     320:	fe 4f       	sbci	r31, 0xFE	; 254
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	a0 e2       	ldi	r26, 0x20	; 32
     328:	b1 e4       	ldi	r27, 0x41	; 65
     32a:	80 83       	st	Z, r24
     32c:	91 83       	std	Z+1, r25	; 0x01
     32e:	a2 83       	std	Z+2, r26	; 0x02
     330:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     332:	8e 01       	movw	r16, r28
     334:	01 57       	subi	r16, 0x71	; 113
     336:	1e 4f       	sbci	r17, 0xFE	; 254
     338:	fe 01       	movw	r30, r28
     33a:	ed 56       	subi	r30, 0x6D	; 109
     33c:	fe 4f       	sbci	r31, 0xFE	; 254
     33e:	60 81       	ld	r22, Z
     340:	71 81       	ldd	r23, Z+1	; 0x01
     342:	82 81       	ldd	r24, Z+2	; 0x02
     344:	93 81       	ldd	r25, Z+3	; 0x03
     346:	20 e0       	ldi	r18, 0x00	; 0
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	4a e7       	ldi	r20, 0x7A	; 122
     34c:	55 e4       	ldi	r21, 0x45	; 69
     34e:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
     352:	dc 01       	movw	r26, r24
     354:	cb 01       	movw	r24, r22
     356:	f8 01       	movw	r30, r16
     358:	80 83       	st	Z, r24
     35a:	91 83       	std	Z+1, r25	; 0x01
     35c:	a2 83       	std	Z+2, r26	; 0x02
     35e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     360:	fe 01       	movw	r30, r28
     362:	e1 57       	subi	r30, 0x71	; 113
     364:	fe 4f       	sbci	r31, 0xFE	; 254
     366:	60 81       	ld	r22, Z
     368:	71 81       	ldd	r23, Z+1	; 0x01
     36a:	82 81       	ldd	r24, Z+2	; 0x02
     36c:	93 81       	ldd	r25, Z+3	; 0x03
     36e:	20 e0       	ldi	r18, 0x00	; 0
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	40 e8       	ldi	r20, 0x80	; 128
     374:	5f e3       	ldi	r21, 0x3F	; 63
     376:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
     37a:	88 23       	and	r24, r24
     37c:	44 f4       	brge	.+16     	; 0x38e <main+0x2c0>
		__ticks = 1;
     37e:	fe 01       	movw	r30, r28
     380:	e3 57       	subi	r30, 0x73	; 115
     382:	fe 4f       	sbci	r31, 0xFE	; 254
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	91 83       	std	Z+1, r25	; 0x01
     38a:	80 83       	st	Z, r24
     38c:	64 c0       	rjmp	.+200    	; 0x456 <main+0x388>
	else if (__tmp > 65535)
     38e:	fe 01       	movw	r30, r28
     390:	e1 57       	subi	r30, 0x71	; 113
     392:	fe 4f       	sbci	r31, 0xFE	; 254
     394:	60 81       	ld	r22, Z
     396:	71 81       	ldd	r23, Z+1	; 0x01
     398:	82 81       	ldd	r24, Z+2	; 0x02
     39a:	93 81       	ldd	r25, Z+3	; 0x03
     39c:	20 e0       	ldi	r18, 0x00	; 0
     39e:	3f ef       	ldi	r19, 0xFF	; 255
     3a0:	4f e7       	ldi	r20, 0x7F	; 127
     3a2:	57 e4       	ldi	r21, 0x47	; 71
     3a4:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
     3a8:	18 16       	cp	r1, r24
     3aa:	0c f0       	brlt	.+2      	; 0x3ae <main+0x2e0>
     3ac:	43 c0       	rjmp	.+134    	; 0x434 <main+0x366>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3ae:	fe 01       	movw	r30, r28
     3b0:	ed 56       	subi	r30, 0x6D	; 109
     3b2:	fe 4f       	sbci	r31, 0xFE	; 254
     3b4:	60 81       	ld	r22, Z
     3b6:	71 81       	ldd	r23, Z+1	; 0x01
     3b8:	82 81       	ldd	r24, Z+2	; 0x02
     3ba:	93 81       	ldd	r25, Z+3	; 0x03
     3bc:	20 e0       	ldi	r18, 0x00	; 0
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	40 e2       	ldi	r20, 0x20	; 32
     3c2:	51 e4       	ldi	r21, 0x41	; 65
     3c4:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
     3c8:	dc 01       	movw	r26, r24
     3ca:	cb 01       	movw	r24, r22
     3cc:	8e 01       	movw	r16, r28
     3ce:	03 57       	subi	r16, 0x73	; 115
     3d0:	1e 4f       	sbci	r17, 0xFE	; 254
     3d2:	bc 01       	movw	r22, r24
     3d4:	cd 01       	movw	r24, r26
     3d6:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
     3da:	dc 01       	movw	r26, r24
     3dc:	cb 01       	movw	r24, r22
     3de:	f8 01       	movw	r30, r16
     3e0:	91 83       	std	Z+1, r25	; 0x01
     3e2:	80 83       	st	Z, r24
     3e4:	1f c0       	rjmp	.+62     	; 0x424 <main+0x356>
     3e6:	fe 01       	movw	r30, r28
     3e8:	e5 57       	subi	r30, 0x75	; 117
     3ea:	fe 4f       	sbci	r31, 0xFE	; 254
     3ec:	80 e9       	ldi	r24, 0x90	; 144
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	91 83       	std	Z+1, r25	; 0x01
     3f2:	80 83       	st	Z, r24
     3f4:	fe 01       	movw	r30, r28
     3f6:	e5 57       	subi	r30, 0x75	; 117
     3f8:	fe 4f       	sbci	r31, 0xFE	; 254
     3fa:	80 81       	ld	r24, Z
     3fc:	91 81       	ldd	r25, Z+1	; 0x01
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	f1 f7       	brne	.-4      	; 0x3fe <main+0x330>
     402:	fe 01       	movw	r30, r28
     404:	e5 57       	subi	r30, 0x75	; 117
     406:	fe 4f       	sbci	r31, 0xFE	; 254
     408:	91 83       	std	Z+1, r25	; 0x01
     40a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     40c:	de 01       	movw	r26, r28
     40e:	a3 57       	subi	r26, 0x73	; 115
     410:	be 4f       	sbci	r27, 0xFE	; 254
     412:	fe 01       	movw	r30, r28
     414:	e3 57       	subi	r30, 0x73	; 115
     416:	fe 4f       	sbci	r31, 0xFE	; 254
     418:	80 81       	ld	r24, Z
     41a:	91 81       	ldd	r25, Z+1	; 0x01
     41c:	01 97       	sbiw	r24, 0x01	; 1
     41e:	11 96       	adiw	r26, 0x01	; 1
     420:	9c 93       	st	X, r25
     422:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     424:	fe 01       	movw	r30, r28
     426:	e3 57       	subi	r30, 0x73	; 115
     428:	fe 4f       	sbci	r31, 0xFE	; 254
     42a:	80 81       	ld	r24, Z
     42c:	91 81       	ldd	r25, Z+1	; 0x01
     42e:	00 97       	sbiw	r24, 0x00	; 0
     430:	d1 f6       	brne	.-76     	; 0x3e6 <main+0x318>
     432:	27 c0       	rjmp	.+78     	; 0x482 <main+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     434:	8e 01       	movw	r16, r28
     436:	03 57       	subi	r16, 0x73	; 115
     438:	1e 4f       	sbci	r17, 0xFE	; 254
     43a:	fe 01       	movw	r30, r28
     43c:	e1 57       	subi	r30, 0x71	; 113
     43e:	fe 4f       	sbci	r31, 0xFE	; 254
     440:	60 81       	ld	r22, Z
     442:	71 81       	ldd	r23, Z+1	; 0x01
     444:	82 81       	ldd	r24, Z+2	; 0x02
     446:	93 81       	ldd	r25, Z+3	; 0x03
     448:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
     44c:	dc 01       	movw	r26, r24
     44e:	cb 01       	movw	r24, r22
     450:	f8 01       	movw	r30, r16
     452:	91 83       	std	Z+1, r25	; 0x01
     454:	80 83       	st	Z, r24
     456:	de 01       	movw	r26, r28
     458:	a7 57       	subi	r26, 0x77	; 119
     45a:	be 4f       	sbci	r27, 0xFE	; 254
     45c:	fe 01       	movw	r30, r28
     45e:	e3 57       	subi	r30, 0x73	; 115
     460:	fe 4f       	sbci	r31, 0xFE	; 254
     462:	80 81       	ld	r24, Z
     464:	91 81       	ldd	r25, Z+1	; 0x01
     466:	8d 93       	st	X+, r24
     468:	9c 93       	st	X, r25
     46a:	fe 01       	movw	r30, r28
     46c:	e7 57       	subi	r30, 0x77	; 119
     46e:	fe 4f       	sbci	r31, 0xFE	; 254
     470:	80 81       	ld	r24, Z
     472:	91 81       	ldd	r25, Z+1	; 0x01
     474:	01 97       	sbiw	r24, 0x01	; 1
     476:	f1 f7       	brne	.-4      	; 0x474 <main+0x3a6>
     478:	fe 01       	movw	r30, r28
     47a:	e7 57       	subi	r30, 0x77	; 119
     47c:	fe 4f       	sbci	r31, 0xFE	; 254
     47e:	91 83       	std	Z+1, r25	; 0x01
     480:	80 83       	st	Z, r24
        _delay_ms(10);
        RIGHT = distanceFRONT(TRIGFR, ECHOFR);
     482:	84 e0       	ldi	r24, 0x04	; 4
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	65 e0       	ldi	r22, 0x05	; 5
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	0e 94 0e 18 	call	0x301c	; 0x301c <distanceFRONT>
     48e:	fe 01       	movw	r30, r28
     490:	ef 54       	subi	r30, 0x4F	; 79
     492:	fe 4f       	sbci	r31, 0xFE	; 254
     494:	91 83       	std	Z+1, r25	; 0x01
     496:	80 83       	st	Z, r24
     498:	fe 01       	movw	r30, r28
     49a:	eb 57       	subi	r30, 0x7B	; 123
     49c:	fe 4f       	sbci	r31, 0xFE	; 254
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	a0 e2       	ldi	r26, 0x20	; 32
     4a4:	b1 e4       	ldi	r27, 0x41	; 65
     4a6:	80 83       	st	Z, r24
     4a8:	91 83       	std	Z+1, r25	; 0x01
     4aa:	a2 83       	std	Z+2, r26	; 0x02
     4ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     4ae:	8e 01       	movw	r16, r28
     4b0:	0f 57       	subi	r16, 0x7F	; 127
     4b2:	1e 4f       	sbci	r17, 0xFE	; 254
     4b4:	fe 01       	movw	r30, r28
     4b6:	eb 57       	subi	r30, 0x7B	; 123
     4b8:	fe 4f       	sbci	r31, 0xFE	; 254
     4ba:	60 81       	ld	r22, Z
     4bc:	71 81       	ldd	r23, Z+1	; 0x01
     4be:	82 81       	ldd	r24, Z+2	; 0x02
     4c0:	93 81       	ldd	r25, Z+3	; 0x03
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	4a e7       	ldi	r20, 0x7A	; 122
     4c8:	55 e4       	ldi	r21, 0x45	; 69
     4ca:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
     4ce:	dc 01       	movw	r26, r24
     4d0:	cb 01       	movw	r24, r22
     4d2:	f8 01       	movw	r30, r16
     4d4:	80 83       	st	Z, r24
     4d6:	91 83       	std	Z+1, r25	; 0x01
     4d8:	a2 83       	std	Z+2, r26	; 0x02
     4da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     4dc:	fe 01       	movw	r30, r28
     4de:	ef 57       	subi	r30, 0x7F	; 127
     4e0:	fe 4f       	sbci	r31, 0xFE	; 254
     4e2:	60 81       	ld	r22, Z
     4e4:	71 81       	ldd	r23, Z+1	; 0x01
     4e6:	82 81       	ldd	r24, Z+2	; 0x02
     4e8:	93 81       	ldd	r25, Z+3	; 0x03
     4ea:	20 e0       	ldi	r18, 0x00	; 0
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	40 e8       	ldi	r20, 0x80	; 128
     4f0:	5f e3       	ldi	r21, 0x3F	; 63
     4f2:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
     4f6:	88 23       	and	r24, r24
     4f8:	44 f4       	brge	.+16     	; 0x50a <main+0x43c>
		__ticks = 1;
     4fa:	fe 01       	movw	r30, r28
     4fc:	e1 58       	subi	r30, 0x81	; 129
     4fe:	fe 4f       	sbci	r31, 0xFE	; 254
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	91 83       	std	Z+1, r25	; 0x01
     506:	80 83       	st	Z, r24
     508:	64 c0       	rjmp	.+200    	; 0x5d2 <main+0x504>
	else if (__tmp > 65535)
     50a:	fe 01       	movw	r30, r28
     50c:	ef 57       	subi	r30, 0x7F	; 127
     50e:	fe 4f       	sbci	r31, 0xFE	; 254
     510:	60 81       	ld	r22, Z
     512:	71 81       	ldd	r23, Z+1	; 0x01
     514:	82 81       	ldd	r24, Z+2	; 0x02
     516:	93 81       	ldd	r25, Z+3	; 0x03
     518:	20 e0       	ldi	r18, 0x00	; 0
     51a:	3f ef       	ldi	r19, 0xFF	; 255
     51c:	4f e7       	ldi	r20, 0x7F	; 127
     51e:	57 e4       	ldi	r21, 0x47	; 71
     520:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
     524:	18 16       	cp	r1, r24
     526:	0c f0       	brlt	.+2      	; 0x52a <main+0x45c>
     528:	43 c0       	rjmp	.+134    	; 0x5b0 <main+0x4e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     52a:	fe 01       	movw	r30, r28
     52c:	eb 57       	subi	r30, 0x7B	; 123
     52e:	fe 4f       	sbci	r31, 0xFE	; 254
     530:	60 81       	ld	r22, Z
     532:	71 81       	ldd	r23, Z+1	; 0x01
     534:	82 81       	ldd	r24, Z+2	; 0x02
     536:	93 81       	ldd	r25, Z+3	; 0x03
     538:	20 e0       	ldi	r18, 0x00	; 0
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	40 e2       	ldi	r20, 0x20	; 32
     53e:	51 e4       	ldi	r21, 0x41	; 65
     540:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
     544:	dc 01       	movw	r26, r24
     546:	cb 01       	movw	r24, r22
     548:	8e 01       	movw	r16, r28
     54a:	01 58       	subi	r16, 0x81	; 129
     54c:	1e 4f       	sbci	r17, 0xFE	; 254
     54e:	bc 01       	movw	r22, r24
     550:	cd 01       	movw	r24, r26
     552:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
     556:	dc 01       	movw	r26, r24
     558:	cb 01       	movw	r24, r22
     55a:	f8 01       	movw	r30, r16
     55c:	91 83       	std	Z+1, r25	; 0x01
     55e:	80 83       	st	Z, r24
     560:	1f c0       	rjmp	.+62     	; 0x5a0 <main+0x4d2>
     562:	fe 01       	movw	r30, r28
     564:	e3 58       	subi	r30, 0x83	; 131
     566:	fe 4f       	sbci	r31, 0xFE	; 254
     568:	80 e9       	ldi	r24, 0x90	; 144
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	91 83       	std	Z+1, r25	; 0x01
     56e:	80 83       	st	Z, r24
     570:	fe 01       	movw	r30, r28
     572:	e3 58       	subi	r30, 0x83	; 131
     574:	fe 4f       	sbci	r31, 0xFE	; 254
     576:	80 81       	ld	r24, Z
     578:	91 81       	ldd	r25, Z+1	; 0x01
     57a:	01 97       	sbiw	r24, 0x01	; 1
     57c:	f1 f7       	brne	.-4      	; 0x57a <main+0x4ac>
     57e:	fe 01       	movw	r30, r28
     580:	e3 58       	subi	r30, 0x83	; 131
     582:	fe 4f       	sbci	r31, 0xFE	; 254
     584:	91 83       	std	Z+1, r25	; 0x01
     586:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     588:	de 01       	movw	r26, r28
     58a:	a1 58       	subi	r26, 0x81	; 129
     58c:	be 4f       	sbci	r27, 0xFE	; 254
     58e:	fe 01       	movw	r30, r28
     590:	e1 58       	subi	r30, 0x81	; 129
     592:	fe 4f       	sbci	r31, 0xFE	; 254
     594:	80 81       	ld	r24, Z
     596:	91 81       	ldd	r25, Z+1	; 0x01
     598:	01 97       	sbiw	r24, 0x01	; 1
     59a:	11 96       	adiw	r26, 0x01	; 1
     59c:	9c 93       	st	X, r25
     59e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5a0:	fe 01       	movw	r30, r28
     5a2:	e1 58       	subi	r30, 0x81	; 129
     5a4:	fe 4f       	sbci	r31, 0xFE	; 254
     5a6:	80 81       	ld	r24, Z
     5a8:	91 81       	ldd	r25, Z+1	; 0x01
     5aa:	00 97       	sbiw	r24, 0x00	; 0
     5ac:	d1 f6       	brne	.-76     	; 0x562 <main+0x494>
     5ae:	28 c0       	rjmp	.+80     	; 0x600 <main+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5b0:	8e 01       	movw	r16, r28
     5b2:	01 58       	subi	r16, 0x81	; 129
     5b4:	1e 4f       	sbci	r17, 0xFE	; 254
     5b6:	fe 01       	movw	r30, r28
     5b8:	ef 57       	subi	r30, 0x7F	; 127
     5ba:	fe 4f       	sbci	r31, 0xFE	; 254
     5bc:	60 81       	ld	r22, Z
     5be:	71 81       	ldd	r23, Z+1	; 0x01
     5c0:	82 81       	ldd	r24, Z+2	; 0x02
     5c2:	93 81       	ldd	r25, Z+3	; 0x03
     5c4:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
     5c8:	dc 01       	movw	r26, r24
     5ca:	cb 01       	movw	r24, r22
     5cc:	f8 01       	movw	r30, r16
     5ce:	91 83       	std	Z+1, r25	; 0x01
     5d0:	80 83       	st	Z, r24
     5d2:	de 01       	movw	r26, r28
     5d4:	a5 58       	subi	r26, 0x85	; 133
     5d6:	be 4f       	sbci	r27, 0xFE	; 254
     5d8:	fe 01       	movw	r30, r28
     5da:	e1 58       	subi	r30, 0x81	; 129
     5dc:	fe 4f       	sbci	r31, 0xFE	; 254
     5de:	80 81       	ld	r24, Z
     5e0:	91 81       	ldd	r25, Z+1	; 0x01
     5e2:	11 96       	adiw	r26, 0x01	; 1
     5e4:	9c 93       	st	X, r25
     5e6:	8e 93       	st	-X, r24
     5e8:	fe 01       	movw	r30, r28
     5ea:	e5 58       	subi	r30, 0x85	; 133
     5ec:	fe 4f       	sbci	r31, 0xFE	; 254
     5ee:	80 81       	ld	r24, Z
     5f0:	91 81       	ldd	r25, Z+1	; 0x01
     5f2:	01 97       	sbiw	r24, 0x01	; 1
     5f4:	f1 f7       	brne	.-4      	; 0x5f2 <main+0x524>
     5f6:	fe 01       	movw	r30, r28
     5f8:	e5 58       	subi	r30, 0x85	; 133
     5fa:	fe 4f       	sbci	r31, 0xFE	; 254
     5fc:	91 83       	std	Z+1, r25	; 0x01
     5fe:	80 83       	st	Z, r24
        _delay_ms(10);

if (s == 0)
     600:	fe 01       	movw	r30, r28
     602:	e3 54       	subi	r30, 0x43	; 67
     604:	fe 4f       	sbci	r31, 0xFE	; 254
     606:	80 81       	ld	r24, Z
     608:	91 81       	ldd	r25, Z+1	; 0x01
     60a:	00 97       	sbiw	r24, 0x00	; 0
     60c:	21 f4       	brne	.+8      	; 0x616 <main+0x548>
{
PORTA = 0b10000000; // 적외선 센서 인식용 흰색 선 인식하면 PA7=0; 필요없는데 혹시나해서 넣은 코드 짐없으면 전자석 자동 off
     60e:	eb e3       	ldi	r30, 0x3B	; 59
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	80 e8       	ldi	r24, 0x80	; 128
     614:	80 83       	st	Z, r24
}




if ( (!(PINA & (1 << PINA7)))  && s == 0)// 짐 없을때 흰색 인식하면 실행 0으로 바뀌면 여기에 and로 s=0이라는것 추가 and로 초음파 구문 추가하기 
     616:	e9 e3       	ldi	r30, 0x39	; 57
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	80 81       	ld	r24, Z
     61c:	88 23       	and	r24, r24
     61e:	14 f4       	brge	.+4      	; 0x624 <main+0x556>
     620:	0c 94 ca 0c 	jmp	0x1994	; 0x1994 <__stack+0x895>
     624:	fe 01       	movw	r30, r28
     626:	e3 54       	subi	r30, 0x43	; 67
     628:	fe 4f       	sbci	r31, 0xFE	; 254
     62a:	80 81       	ld	r24, Z
     62c:	91 81       	ldd	r25, Z+1	; 0x01
     62e:	00 97       	sbiw	r24, 0x00	; 0
     630:	11 f0       	breq	.+4      	; 0x636 <main+0x568>
     632:	0c 94 ca 0c 	jmp	0x1994	; 0x1994 <__stack+0x895>
{

DDRE=0b00000001;
     636:	e2 e2       	ldi	r30, 0x22	; 34
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	80 83       	st	Z, r24
PORTE=0b00000000;
     63e:	e3 e2       	ldi	r30, 0x23	; 35
     640:	f0 e0       	ldi	r31, 0x00	; 0
     642:	10 82       	st	Z, r1
OCR0=0; // 주행모터 정지
     644:	e1 e5       	ldi	r30, 0x51	; 81
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	10 82       	st	Z, r1
PORTB=0b11011111; // 주행모터 및 모든 모터 정지
     64a:	e8 e3       	ldi	r30, 0x38	; 56
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	8f ed       	ldi	r24, 0xDF	; 223
     650:	80 83       	st	Z, r24
// 인식하면서 회전 
unsigned int A_P=385;
     652:	fe 01       	movw	r30, r28
     654:	e7 55       	subi	r30, 0x57	; 87
     656:	fe 4f       	sbci	r31, 0xFE	; 254
     658:	81 e8       	ldi	r24, 0x81	; 129
     65a:	91 e0       	ldi	r25, 0x01	; 1
     65c:	91 83       	std	Z+1, r25	; 0x01
     65e:	80 83       	st	Z, r24
while(1)

{ 
unsigned short find = sonic1();
     660:	0e 94 6f 21 	call	0x42de	; 0x42de <sonic1>
     664:	fe 01       	movw	r30, r28
     666:	e9 55       	subi	r30, 0x59	; 89
     668:	fe 4f       	sbci	r31, 0xFE	; 254
     66a:	91 83       	std	Z+1, r25	; 0x01
     66c:	80 83       	st	Z, r24
     66e:	fe 01       	movw	r30, r28
     670:	e9 58       	subi	r30, 0x89	; 137
     672:	fe 4f       	sbci	r31, 0xFE	; 254
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	a0 e8       	ldi	r26, 0x80	; 128
     67a:	bf e3       	ldi	r27, 0x3F	; 63
     67c:	80 83       	st	Z, r24
     67e:	91 83       	std	Z+1, r25	; 0x01
     680:	a2 83       	std	Z+2, r26	; 0x02
     682:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     684:	8e 01       	movw	r16, r28
     686:	0d 58       	subi	r16, 0x8D	; 141
     688:	1e 4f       	sbci	r17, 0xFE	; 254
     68a:	fe 01       	movw	r30, r28
     68c:	e9 58       	subi	r30, 0x89	; 137
     68e:	fe 4f       	sbci	r31, 0xFE	; 254
     690:	60 81       	ld	r22, Z
     692:	71 81       	ldd	r23, Z+1	; 0x01
     694:	82 81       	ldd	r24, Z+2	; 0x02
     696:	93 81       	ldd	r25, Z+3	; 0x03
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	4a e7       	ldi	r20, 0x7A	; 122
     69e:	55 e4       	ldi	r21, 0x45	; 69
     6a0:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
     6a4:	dc 01       	movw	r26, r24
     6a6:	cb 01       	movw	r24, r22
     6a8:	f8 01       	movw	r30, r16
     6aa:	80 83       	st	Z, r24
     6ac:	91 83       	std	Z+1, r25	; 0x01
     6ae:	a2 83       	std	Z+2, r26	; 0x02
     6b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     6b2:	fe 01       	movw	r30, r28
     6b4:	ed 58       	subi	r30, 0x8D	; 141
     6b6:	fe 4f       	sbci	r31, 0xFE	; 254
     6b8:	60 81       	ld	r22, Z
     6ba:	71 81       	ldd	r23, Z+1	; 0x01
     6bc:	82 81       	ldd	r24, Z+2	; 0x02
     6be:	93 81       	ldd	r25, Z+3	; 0x03
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	40 e8       	ldi	r20, 0x80	; 128
     6c6:	5f e3       	ldi	r21, 0x3F	; 63
     6c8:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
     6cc:	88 23       	and	r24, r24
     6ce:	44 f4       	brge	.+16     	; 0x6e0 <main+0x612>
		__ticks = 1;
     6d0:	fe 01       	movw	r30, r28
     6d2:	ef 58       	subi	r30, 0x8F	; 143
     6d4:	fe 4f       	sbci	r31, 0xFE	; 254
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	91 83       	std	Z+1, r25	; 0x01
     6dc:	80 83       	st	Z, r24
     6de:	64 c0       	rjmp	.+200    	; 0x7a8 <main+0x6da>
	else if (__tmp > 65535)
     6e0:	fe 01       	movw	r30, r28
     6e2:	ed 58       	subi	r30, 0x8D	; 141
     6e4:	fe 4f       	sbci	r31, 0xFE	; 254
     6e6:	60 81       	ld	r22, Z
     6e8:	71 81       	ldd	r23, Z+1	; 0x01
     6ea:	82 81       	ldd	r24, Z+2	; 0x02
     6ec:	93 81       	ldd	r25, Z+3	; 0x03
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	3f ef       	ldi	r19, 0xFF	; 255
     6f2:	4f e7       	ldi	r20, 0x7F	; 127
     6f4:	57 e4       	ldi	r21, 0x47	; 71
     6f6:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
     6fa:	18 16       	cp	r1, r24
     6fc:	0c f0       	brlt	.+2      	; 0x700 <main+0x632>
     6fe:	43 c0       	rjmp	.+134    	; 0x786 <main+0x6b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     700:	fe 01       	movw	r30, r28
     702:	e9 58       	subi	r30, 0x89	; 137
     704:	fe 4f       	sbci	r31, 0xFE	; 254
     706:	60 81       	ld	r22, Z
     708:	71 81       	ldd	r23, Z+1	; 0x01
     70a:	82 81       	ldd	r24, Z+2	; 0x02
     70c:	93 81       	ldd	r25, Z+3	; 0x03
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	40 e2       	ldi	r20, 0x20	; 32
     714:	51 e4       	ldi	r21, 0x41	; 65
     716:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
     71a:	dc 01       	movw	r26, r24
     71c:	cb 01       	movw	r24, r22
     71e:	8e 01       	movw	r16, r28
     720:	0f 58       	subi	r16, 0x8F	; 143
     722:	1e 4f       	sbci	r17, 0xFE	; 254
     724:	bc 01       	movw	r22, r24
     726:	cd 01       	movw	r24, r26
     728:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
     72c:	dc 01       	movw	r26, r24
     72e:	cb 01       	movw	r24, r22
     730:	f8 01       	movw	r30, r16
     732:	91 83       	std	Z+1, r25	; 0x01
     734:	80 83       	st	Z, r24
     736:	1f c0       	rjmp	.+62     	; 0x776 <main+0x6a8>
     738:	fe 01       	movw	r30, r28
     73a:	e1 59       	subi	r30, 0x91	; 145
     73c:	fe 4f       	sbci	r31, 0xFE	; 254
     73e:	80 e9       	ldi	r24, 0x90	; 144
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	91 83       	std	Z+1, r25	; 0x01
     744:	80 83       	st	Z, r24
     746:	fe 01       	movw	r30, r28
     748:	e1 59       	subi	r30, 0x91	; 145
     74a:	fe 4f       	sbci	r31, 0xFE	; 254
     74c:	80 81       	ld	r24, Z
     74e:	91 81       	ldd	r25, Z+1	; 0x01
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	f1 f7       	brne	.-4      	; 0x750 <main+0x682>
     754:	fe 01       	movw	r30, r28
     756:	e1 59       	subi	r30, 0x91	; 145
     758:	fe 4f       	sbci	r31, 0xFE	; 254
     75a:	91 83       	std	Z+1, r25	; 0x01
     75c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     75e:	de 01       	movw	r26, r28
     760:	af 58       	subi	r26, 0x8F	; 143
     762:	be 4f       	sbci	r27, 0xFE	; 254
     764:	fe 01       	movw	r30, r28
     766:	ef 58       	subi	r30, 0x8F	; 143
     768:	fe 4f       	sbci	r31, 0xFE	; 254
     76a:	80 81       	ld	r24, Z
     76c:	91 81       	ldd	r25, Z+1	; 0x01
     76e:	01 97       	sbiw	r24, 0x01	; 1
     770:	11 96       	adiw	r26, 0x01	; 1
     772:	9c 93       	st	X, r25
     774:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     776:	fe 01       	movw	r30, r28
     778:	ef 58       	subi	r30, 0x8F	; 143
     77a:	fe 4f       	sbci	r31, 0xFE	; 254
     77c:	80 81       	ld	r24, Z
     77e:	91 81       	ldd	r25, Z+1	; 0x01
     780:	00 97       	sbiw	r24, 0x00	; 0
     782:	d1 f6       	brne	.-76     	; 0x738 <main+0x66a>
     784:	27 c0       	rjmp	.+78     	; 0x7d4 <main+0x706>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     786:	8e 01       	movw	r16, r28
     788:	0f 58       	subi	r16, 0x8F	; 143
     78a:	1e 4f       	sbci	r17, 0xFE	; 254
     78c:	fe 01       	movw	r30, r28
     78e:	ed 58       	subi	r30, 0x8D	; 141
     790:	fe 4f       	sbci	r31, 0xFE	; 254
     792:	60 81       	ld	r22, Z
     794:	71 81       	ldd	r23, Z+1	; 0x01
     796:	82 81       	ldd	r24, Z+2	; 0x02
     798:	93 81       	ldd	r25, Z+3	; 0x03
     79a:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
     79e:	dc 01       	movw	r26, r24
     7a0:	cb 01       	movw	r24, r22
     7a2:	f8 01       	movw	r30, r16
     7a4:	91 83       	std	Z+1, r25	; 0x01
     7a6:	80 83       	st	Z, r24
     7a8:	de 01       	movw	r26, r28
     7aa:	a3 59       	subi	r26, 0x93	; 147
     7ac:	be 4f       	sbci	r27, 0xFE	; 254
     7ae:	fe 01       	movw	r30, r28
     7b0:	ef 58       	subi	r30, 0x8F	; 143
     7b2:	fe 4f       	sbci	r31, 0xFE	; 254
     7b4:	80 81       	ld	r24, Z
     7b6:	91 81       	ldd	r25, Z+1	; 0x01
     7b8:	8d 93       	st	X+, r24
     7ba:	9c 93       	st	X, r25
     7bc:	fe 01       	movw	r30, r28
     7be:	e3 59       	subi	r30, 0x93	; 147
     7c0:	fe 4f       	sbci	r31, 0xFE	; 254
     7c2:	80 81       	ld	r24, Z
     7c4:	91 81       	ldd	r25, Z+1	; 0x01
     7c6:	01 97       	sbiw	r24, 0x01	; 1
     7c8:	f1 f7       	brne	.-4      	; 0x7c6 <main+0x6f8>
     7ca:	fe 01       	movw	r30, r28
     7cc:	e3 59       	subi	r30, 0x93	; 147
     7ce:	fe 4f       	sbci	r31, 0xFE	; 254
     7d0:	91 83       	std	Z+1, r25	; 0x01
     7d2:	80 83       	st	Z, r24
_delay_ms(1);
printf("find is = %d \r\n" );
     7d4:	00 d0       	rcall	.+0      	; 0x7d6 <main+0x708>
     7d6:	ed b7       	in	r30, 0x3d	; 61
     7d8:	fe b7       	in	r31, 0x3e	; 62
     7da:	31 96       	adiw	r30, 0x01	; 1
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	91 e0       	ldi	r25, 0x01	; 1
     7e0:	91 83       	std	Z+1, r25	; 0x01
     7e2:	80 83       	st	Z, r24
     7e4:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <printf>
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
          OCR1B=A_P;
     7ec:	a8 e4       	ldi	r26, 0x48	; 72
     7ee:	b0 e0       	ldi	r27, 0x00	; 0
     7f0:	fe 01       	movw	r30, r28
     7f2:	e7 55       	subi	r30, 0x57	; 87
     7f4:	fe 4f       	sbci	r31, 0xFE	; 254
     7f6:	80 81       	ld	r24, Z
     7f8:	91 81       	ldd	r25, Z+1	; 0x01
     7fa:	11 96       	adiw	r26, 0x01	; 1
     7fc:	9c 93       	st	X, r25
     7fe:	8e 93       	st	-X, r24
     800:	fe 01       	movw	r30, r28
     802:	e7 59       	subi	r30, 0x97	; 151
     804:	fe 4f       	sbci	r31, 0xFE	; 254
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	aa ef       	ldi	r26, 0xFA	; 250
     80c:	b3 e4       	ldi	r27, 0x43	; 67
     80e:	80 83       	st	Z, r24
     810:	91 83       	std	Z+1, r25	; 0x01
     812:	a2 83       	std	Z+2, r26	; 0x02
     814:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     816:	8e 01       	movw	r16, r28
     818:	0b 59       	subi	r16, 0x9B	; 155
     81a:	1e 4f       	sbci	r17, 0xFE	; 254
     81c:	fe 01       	movw	r30, r28
     81e:	e7 59       	subi	r30, 0x97	; 151
     820:	fe 4f       	sbci	r31, 0xFE	; 254
     822:	60 81       	ld	r22, Z
     824:	71 81       	ldd	r23, Z+1	; 0x01
     826:	82 81       	ldd	r24, Z+2	; 0x02
     828:	93 81       	ldd	r25, Z+3	; 0x03
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	4a e7       	ldi	r20, 0x7A	; 122
     830:	55 e4       	ldi	r21, 0x45	; 69
     832:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
     836:	dc 01       	movw	r26, r24
     838:	cb 01       	movw	r24, r22
     83a:	f8 01       	movw	r30, r16
     83c:	80 83       	st	Z, r24
     83e:	91 83       	std	Z+1, r25	; 0x01
     840:	a2 83       	std	Z+2, r26	; 0x02
     842:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     844:	fe 01       	movw	r30, r28
     846:	eb 59       	subi	r30, 0x9B	; 155
     848:	fe 4f       	sbci	r31, 0xFE	; 254
     84a:	60 81       	ld	r22, Z
     84c:	71 81       	ldd	r23, Z+1	; 0x01
     84e:	82 81       	ldd	r24, Z+2	; 0x02
     850:	93 81       	ldd	r25, Z+3	; 0x03
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	40 e8       	ldi	r20, 0x80	; 128
     858:	5f e3       	ldi	r21, 0x3F	; 63
     85a:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
     85e:	88 23       	and	r24, r24
     860:	44 f4       	brge	.+16     	; 0x872 <main+0x7a4>
		__ticks = 1;
     862:	fe 01       	movw	r30, r28
     864:	ed 59       	subi	r30, 0x9D	; 157
     866:	fe 4f       	sbci	r31, 0xFE	; 254
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	91 83       	std	Z+1, r25	; 0x01
     86e:	80 83       	st	Z, r24
     870:	64 c0       	rjmp	.+200    	; 0x93a <main+0x86c>
	else if (__tmp > 65535)
     872:	fe 01       	movw	r30, r28
     874:	eb 59       	subi	r30, 0x9B	; 155
     876:	fe 4f       	sbci	r31, 0xFE	; 254
     878:	60 81       	ld	r22, Z
     87a:	71 81       	ldd	r23, Z+1	; 0x01
     87c:	82 81       	ldd	r24, Z+2	; 0x02
     87e:	93 81       	ldd	r25, Z+3	; 0x03
     880:	20 e0       	ldi	r18, 0x00	; 0
     882:	3f ef       	ldi	r19, 0xFF	; 255
     884:	4f e7       	ldi	r20, 0x7F	; 127
     886:	57 e4       	ldi	r21, 0x47	; 71
     888:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
     88c:	18 16       	cp	r1, r24
     88e:	0c f0       	brlt	.+2      	; 0x892 <main+0x7c4>
     890:	43 c0       	rjmp	.+134    	; 0x918 <main+0x84a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     892:	fe 01       	movw	r30, r28
     894:	e7 59       	subi	r30, 0x97	; 151
     896:	fe 4f       	sbci	r31, 0xFE	; 254
     898:	60 81       	ld	r22, Z
     89a:	71 81       	ldd	r23, Z+1	; 0x01
     89c:	82 81       	ldd	r24, Z+2	; 0x02
     89e:	93 81       	ldd	r25, Z+3	; 0x03
     8a0:	20 e0       	ldi	r18, 0x00	; 0
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	40 e2       	ldi	r20, 0x20	; 32
     8a6:	51 e4       	ldi	r21, 0x41	; 65
     8a8:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
     8ac:	dc 01       	movw	r26, r24
     8ae:	cb 01       	movw	r24, r22
     8b0:	8e 01       	movw	r16, r28
     8b2:	0d 59       	subi	r16, 0x9D	; 157
     8b4:	1e 4f       	sbci	r17, 0xFE	; 254
     8b6:	bc 01       	movw	r22, r24
     8b8:	cd 01       	movw	r24, r26
     8ba:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
     8be:	dc 01       	movw	r26, r24
     8c0:	cb 01       	movw	r24, r22
     8c2:	f8 01       	movw	r30, r16
     8c4:	91 83       	std	Z+1, r25	; 0x01
     8c6:	80 83       	st	Z, r24
     8c8:	1f c0       	rjmp	.+62     	; 0x908 <main+0x83a>
     8ca:	fe 01       	movw	r30, r28
     8cc:	ef 59       	subi	r30, 0x9F	; 159
     8ce:	fe 4f       	sbci	r31, 0xFE	; 254
     8d0:	80 e9       	ldi	r24, 0x90	; 144
     8d2:	91 e0       	ldi	r25, 0x01	; 1
     8d4:	91 83       	std	Z+1, r25	; 0x01
     8d6:	80 83       	st	Z, r24
     8d8:	fe 01       	movw	r30, r28
     8da:	ef 59       	subi	r30, 0x9F	; 159
     8dc:	fe 4f       	sbci	r31, 0xFE	; 254
     8de:	80 81       	ld	r24, Z
     8e0:	91 81       	ldd	r25, Z+1	; 0x01
     8e2:	01 97       	sbiw	r24, 0x01	; 1
     8e4:	f1 f7       	brne	.-4      	; 0x8e2 <main+0x814>
     8e6:	fe 01       	movw	r30, r28
     8e8:	ef 59       	subi	r30, 0x9F	; 159
     8ea:	fe 4f       	sbci	r31, 0xFE	; 254
     8ec:	91 83       	std	Z+1, r25	; 0x01
     8ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8f0:	de 01       	movw	r26, r28
     8f2:	ad 59       	subi	r26, 0x9D	; 157
     8f4:	be 4f       	sbci	r27, 0xFE	; 254
     8f6:	fe 01       	movw	r30, r28
     8f8:	ed 59       	subi	r30, 0x9D	; 157
     8fa:	fe 4f       	sbci	r31, 0xFE	; 254
     8fc:	80 81       	ld	r24, Z
     8fe:	91 81       	ldd	r25, Z+1	; 0x01
     900:	01 97       	sbiw	r24, 0x01	; 1
     902:	11 96       	adiw	r26, 0x01	; 1
     904:	9c 93       	st	X, r25
     906:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     908:	fe 01       	movw	r30, r28
     90a:	ed 59       	subi	r30, 0x9D	; 157
     90c:	fe 4f       	sbci	r31, 0xFE	; 254
     90e:	80 81       	ld	r24, Z
     910:	91 81       	ldd	r25, Z+1	; 0x01
     912:	00 97       	sbiw	r24, 0x00	; 0
     914:	d1 f6       	brne	.-76     	; 0x8ca <main+0x7fc>
     916:	28 c0       	rjmp	.+80     	; 0x968 <main+0x89a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     918:	8e 01       	movw	r16, r28
     91a:	0d 59       	subi	r16, 0x9D	; 157
     91c:	1e 4f       	sbci	r17, 0xFE	; 254
     91e:	fe 01       	movw	r30, r28
     920:	eb 59       	subi	r30, 0x9B	; 155
     922:	fe 4f       	sbci	r31, 0xFE	; 254
     924:	60 81       	ld	r22, Z
     926:	71 81       	ldd	r23, Z+1	; 0x01
     928:	82 81       	ldd	r24, Z+2	; 0x02
     92a:	93 81       	ldd	r25, Z+3	; 0x03
     92c:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
     930:	dc 01       	movw	r26, r24
     932:	cb 01       	movw	r24, r22
     934:	f8 01       	movw	r30, r16
     936:	91 83       	std	Z+1, r25	; 0x01
     938:	80 83       	st	Z, r24
     93a:	de 01       	movw	r26, r28
     93c:	a1 5a       	subi	r26, 0xA1	; 161
     93e:	be 4f       	sbci	r27, 0xFE	; 254
     940:	fe 01       	movw	r30, r28
     942:	ed 59       	subi	r30, 0x9D	; 157
     944:	fe 4f       	sbci	r31, 0xFE	; 254
     946:	80 81       	ld	r24, Z
     948:	91 81       	ldd	r25, Z+1	; 0x01
     94a:	11 96       	adiw	r26, 0x01	; 1
     94c:	9c 93       	st	X, r25
     94e:	8e 93       	st	-X, r24
     950:	fe 01       	movw	r30, r28
     952:	e1 5a       	subi	r30, 0xA1	; 161
     954:	fe 4f       	sbci	r31, 0xFE	; 254
     956:	80 81       	ld	r24, Z
     958:	91 81       	ldd	r25, Z+1	; 0x01
     95a:	01 97       	sbiw	r24, 0x01	; 1
     95c:	f1 f7       	brne	.-4      	; 0x95a <main+0x88c>
     95e:	fe 01       	movw	r30, r28
     960:	e1 5a       	subi	r30, 0xA1	; 161
     962:	fe 4f       	sbci	r31, 0xFE	; 254
     964:	91 83       	std	Z+1, r25	; 0x01
     966:	80 83       	st	Z, r24
_delay_ms(500);
    if (find< 120)
     968:	fe 01       	movw	r30, r28
     96a:	e9 55       	subi	r30, 0x59	; 89
     96c:	fe 4f       	sbci	r31, 0xFE	; 254
     96e:	80 81       	ld	r24, Z
     970:	91 81       	ldd	r25, Z+1	; 0x01
     972:	88 37       	cpi	r24, 0x78	; 120
     974:	91 05       	cpc	r25, r1
     976:	b8 f4       	brcc	.+46     	; 0x9a6 <main+0x8d8>
	{
          A_P=A_P-65;
     978:	de 01       	movw	r26, r28
     97a:	a7 55       	subi	r26, 0x57	; 87
     97c:	be 4f       	sbci	r27, 0xFE	; 254
     97e:	fe 01       	movw	r30, r28
     980:	e7 55       	subi	r30, 0x57	; 87
     982:	fe 4f       	sbci	r31, 0xFE	; 254
     984:	80 81       	ld	r24, Z
     986:	91 81       	ldd	r25, Z+1	; 0x01
     988:	81 54       	subi	r24, 0x41	; 65
     98a:	90 40       	sbci	r25, 0x00	; 0
     98c:	8d 93       	st	X+, r24
     98e:	9c 93       	st	X, r25
          OCR1B=A_P;
     990:	a8 e4       	ldi	r26, 0x48	; 72
     992:	b0 e0       	ldi	r27, 0x00	; 0
     994:	fe 01       	movw	r30, r28
     996:	e7 55       	subi	r30, 0x57	; 87
     998:	fe 4f       	sbci	r31, 0xFE	; 254
     99a:	80 81       	ld	r24, Z
     99c:	91 81       	ldd	r25, Z+1	; 0x01
     99e:	11 96       	adiw	r26, 0x01	; 1
     9a0:	9c 93       	st	X, r25
     9a2:	8e 93       	st	-X, r24
     9a4:	15 c0       	rjmp	.+42     	; 0x9d0 <main+0x902>
		   _delay_ms(500);

	}


 	if (A_P<150)
     9a6:	fe 01       	movw	r30, r28
     9a8:	e7 55       	subi	r30, 0x57	; 87
     9aa:	fe 4f       	sbci	r31, 0xFE	; 254
     9ac:	80 81       	ld	r24, Z
     9ae:	91 81       	ldd	r25, Z+1	; 0x01
     9b0:	86 39       	cpi	r24, 0x96	; 150
     9b2:	91 05       	cpc	r25, r1
     9b4:	68 f0       	brcs	.+26     	; 0x9d0 <main+0x902>

	  break;


 	}	
		A_P=A_P-5;
     9b6:	de 01       	movw	r26, r28
     9b8:	a7 55       	subi	r26, 0x57	; 87
     9ba:	be 4f       	sbci	r27, 0xFE	; 254
     9bc:	fe 01       	movw	r30, r28
     9be:	e7 55       	subi	r30, 0x57	; 87
     9c0:	fe 4f       	sbci	r31, 0xFE	; 254
     9c2:	80 81       	ld	r24, Z
     9c4:	91 81       	ldd	r25, Z+1	; 0x01
     9c6:	05 97       	sbiw	r24, 0x05	; 5
     9c8:	11 96       	adiw	r26, 0x01	; 1
     9ca:	9c 93       	st	X, r25
     9cc:	8e 93       	st	-X, r24
     9ce:	48 ce       	rjmp	.-880    	; 0x660 <main+0x592>
		  

}
     9d0:	fe 01       	movw	r30, r28
     9d2:	e5 5a       	subi	r30, 0xA5	; 165
     9d4:	fe 4f       	sbci	r31, 0xFE	; 254
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	aa ef       	ldi	r26, 0xFA	; 250
     9dc:	b4 e4       	ldi	r27, 0x44	; 68
     9de:	80 83       	st	Z, r24
     9e0:	91 83       	std	Z+1, r25	; 0x01
     9e2:	a2 83       	std	Z+2, r26	; 0x02
     9e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9e6:	8e 01       	movw	r16, r28
     9e8:	09 5a       	subi	r16, 0xA9	; 169
     9ea:	1e 4f       	sbci	r17, 0xFE	; 254
     9ec:	fe 01       	movw	r30, r28
     9ee:	e5 5a       	subi	r30, 0xA5	; 165
     9f0:	fe 4f       	sbci	r31, 0xFE	; 254
     9f2:	60 81       	ld	r22, Z
     9f4:	71 81       	ldd	r23, Z+1	; 0x01
     9f6:	82 81       	ldd	r24, Z+2	; 0x02
     9f8:	93 81       	ldd	r25, Z+3	; 0x03
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	4a e7       	ldi	r20, 0x7A	; 122
     a00:	55 e4       	ldi	r21, 0x45	; 69
     a02:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
     a06:	dc 01       	movw	r26, r24
     a08:	cb 01       	movw	r24, r22
     a0a:	f8 01       	movw	r30, r16
     a0c:	80 83       	st	Z, r24
     a0e:	91 83       	std	Z+1, r25	; 0x01
     a10:	a2 83       	std	Z+2, r26	; 0x02
     a12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     a14:	fe 01       	movw	r30, r28
     a16:	e9 5a       	subi	r30, 0xA9	; 169
     a18:	fe 4f       	sbci	r31, 0xFE	; 254
     a1a:	60 81       	ld	r22, Z
     a1c:	71 81       	ldd	r23, Z+1	; 0x01
     a1e:	82 81       	ldd	r24, Z+2	; 0x02
     a20:	93 81       	ldd	r25, Z+3	; 0x03
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	40 e8       	ldi	r20, 0x80	; 128
     a28:	5f e3       	ldi	r21, 0x3F	; 63
     a2a:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
     a2e:	88 23       	and	r24, r24
     a30:	44 f4       	brge	.+16     	; 0xa42 <main+0x974>
		__ticks = 1;
     a32:	fe 01       	movw	r30, r28
     a34:	eb 5a       	subi	r30, 0xAB	; 171
     a36:	fe 4f       	sbci	r31, 0xFE	; 254
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	91 83       	std	Z+1, r25	; 0x01
     a3e:	80 83       	st	Z, r24
     a40:	64 c0       	rjmp	.+200    	; 0xb0a <main+0xa3c>
	else if (__tmp > 65535)
     a42:	fe 01       	movw	r30, r28
     a44:	e9 5a       	subi	r30, 0xA9	; 169
     a46:	fe 4f       	sbci	r31, 0xFE	; 254
     a48:	60 81       	ld	r22, Z
     a4a:	71 81       	ldd	r23, Z+1	; 0x01
     a4c:	82 81       	ldd	r24, Z+2	; 0x02
     a4e:	93 81       	ldd	r25, Z+3	; 0x03
     a50:	20 e0       	ldi	r18, 0x00	; 0
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f e7       	ldi	r20, 0x7F	; 127
     a56:	57 e4       	ldi	r21, 0x47	; 71
     a58:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
     a5c:	18 16       	cp	r1, r24
     a5e:	0c f0       	brlt	.+2      	; 0xa62 <main+0x994>
     a60:	43 c0       	rjmp	.+134    	; 0xae8 <main+0xa1a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a62:	fe 01       	movw	r30, r28
     a64:	e5 5a       	subi	r30, 0xA5	; 165
     a66:	fe 4f       	sbci	r31, 0xFE	; 254
     a68:	60 81       	ld	r22, Z
     a6a:	71 81       	ldd	r23, Z+1	; 0x01
     a6c:	82 81       	ldd	r24, Z+2	; 0x02
     a6e:	93 81       	ldd	r25, Z+3	; 0x03
     a70:	20 e0       	ldi	r18, 0x00	; 0
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	40 e2       	ldi	r20, 0x20	; 32
     a76:	51 e4       	ldi	r21, 0x41	; 65
     a78:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
     a7c:	dc 01       	movw	r26, r24
     a7e:	cb 01       	movw	r24, r22
     a80:	8e 01       	movw	r16, r28
     a82:	0b 5a       	subi	r16, 0xAB	; 171
     a84:	1e 4f       	sbci	r17, 0xFE	; 254
     a86:	bc 01       	movw	r22, r24
     a88:	cd 01       	movw	r24, r26
     a8a:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
     a8e:	dc 01       	movw	r26, r24
     a90:	cb 01       	movw	r24, r22
     a92:	f8 01       	movw	r30, r16
     a94:	91 83       	std	Z+1, r25	; 0x01
     a96:	80 83       	st	Z, r24
     a98:	1f c0       	rjmp	.+62     	; 0xad8 <main+0xa0a>
     a9a:	fe 01       	movw	r30, r28
     a9c:	ed 5a       	subi	r30, 0xAD	; 173
     a9e:	fe 4f       	sbci	r31, 0xFE	; 254
     aa0:	80 e9       	ldi	r24, 0x90	; 144
     aa2:	91 e0       	ldi	r25, 0x01	; 1
     aa4:	91 83       	std	Z+1, r25	; 0x01
     aa6:	80 83       	st	Z, r24
     aa8:	fe 01       	movw	r30, r28
     aaa:	ed 5a       	subi	r30, 0xAD	; 173
     aac:	fe 4f       	sbci	r31, 0xFE	; 254
     aae:	80 81       	ld	r24, Z
     ab0:	91 81       	ldd	r25, Z+1	; 0x01
     ab2:	01 97       	sbiw	r24, 0x01	; 1
     ab4:	f1 f7       	brne	.-4      	; 0xab2 <main+0x9e4>
     ab6:	fe 01       	movw	r30, r28
     ab8:	ed 5a       	subi	r30, 0xAD	; 173
     aba:	fe 4f       	sbci	r31, 0xFE	; 254
     abc:	91 83       	std	Z+1, r25	; 0x01
     abe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ac0:	de 01       	movw	r26, r28
     ac2:	ab 5a       	subi	r26, 0xAB	; 171
     ac4:	be 4f       	sbci	r27, 0xFE	; 254
     ac6:	fe 01       	movw	r30, r28
     ac8:	eb 5a       	subi	r30, 0xAB	; 171
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	91 81       	ldd	r25, Z+1	; 0x01
     ad0:	01 97       	sbiw	r24, 0x01	; 1
     ad2:	11 96       	adiw	r26, 0x01	; 1
     ad4:	9c 93       	st	X, r25
     ad6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ad8:	fe 01       	movw	r30, r28
     ada:	eb 5a       	subi	r30, 0xAB	; 171
     adc:	fe 4f       	sbci	r31, 0xFE	; 254
     ade:	80 81       	ld	r24, Z
     ae0:	91 81       	ldd	r25, Z+1	; 0x01
     ae2:	00 97       	sbiw	r24, 0x00	; 0
     ae4:	d1 f6       	brne	.-76     	; 0xa9a <main+0x9cc>
     ae6:	27 c0       	rjmp	.+78     	; 0xb36 <main+0xa68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ae8:	8e 01       	movw	r16, r28
     aea:	0b 5a       	subi	r16, 0xAB	; 171
     aec:	1e 4f       	sbci	r17, 0xFE	; 254
     aee:	fe 01       	movw	r30, r28
     af0:	e9 5a       	subi	r30, 0xA9	; 169
     af2:	fe 4f       	sbci	r31, 0xFE	; 254
     af4:	60 81       	ld	r22, Z
     af6:	71 81       	ldd	r23, Z+1	; 0x01
     af8:	82 81       	ldd	r24, Z+2	; 0x02
     afa:	93 81       	ldd	r25, Z+3	; 0x03
     afc:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
     b00:	dc 01       	movw	r26, r24
     b02:	cb 01       	movw	r24, r22
     b04:	f8 01       	movw	r30, r16
     b06:	91 83       	std	Z+1, r25	; 0x01
     b08:	80 83       	st	Z, r24
     b0a:	de 01       	movw	r26, r28
     b0c:	af 5a       	subi	r26, 0xAF	; 175
     b0e:	be 4f       	sbci	r27, 0xFE	; 254
     b10:	fe 01       	movw	r30, r28
     b12:	eb 5a       	subi	r30, 0xAB	; 171
     b14:	fe 4f       	sbci	r31, 0xFE	; 254
     b16:	80 81       	ld	r24, Z
     b18:	91 81       	ldd	r25, Z+1	; 0x01
     b1a:	8d 93       	st	X+, r24
     b1c:	9c 93       	st	X, r25
     b1e:	fe 01       	movw	r30, r28
     b20:	ef 5a       	subi	r30, 0xAF	; 175
     b22:	fe 4f       	sbci	r31, 0xFE	; 254
     b24:	80 81       	ld	r24, Z
     b26:	91 81       	ldd	r25, Z+1	; 0x01
     b28:	01 97       	sbiw	r24, 0x01	; 1
     b2a:	f1 f7       	brne	.-4      	; 0xb28 <main+0xa5a>
     b2c:	fe 01       	movw	r30, r28
     b2e:	ef 5a       	subi	r30, 0xAF	; 175
     b30:	fe 4f       	sbci	r31, 0xFE	; 254
     b32:	91 83       	std	Z+1, r25	; 0x01
     b34:	80 83       	st	Z, r24

//moveslow1(); // 크레인 -90도로 천천히 돌리기 (인식해서 찾기 위해서 제외)
_delay_ms(2000);
//크레인 내리기 
while(1){
unsigned short object = sonic1();
     b36:	0e 94 6f 21 	call	0x42de	; 0x42de <sonic1>
     b3a:	fe 01       	movw	r30, r28
     b3c:	eb 55       	subi	r30, 0x5B	; 91
     b3e:	fe 4f       	sbci	r31, 0xFE	; 254
     b40:	91 83       	std	Z+1, r25	; 0x01
     b42:	80 83       	st	Z, r24
OCR2=200;
     b44:	e3 e4       	ldi	r30, 0x43	; 67
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	88 ec       	ldi	r24, 0xC8	; 200
     b4a:	80 83       	st	Z, r24
PORTB= 0b10000001;//내려가기 
     b4c:	e8 e3       	ldi	r30, 0x38	; 56
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	81 e8       	ldi	r24, 0x81	; 129
     b52:	80 83       	st	Z, r24

printf("sonic is = %d \r\n" , object);
     b54:	00 d0       	rcall	.+0      	; 0xb56 <main+0xa88>
     b56:	00 d0       	rcall	.+0      	; 0xb58 <main+0xa8a>
     b58:	ad b7       	in	r26, 0x3d	; 61
     b5a:	be b7       	in	r27, 0x3e	; 62
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	80 e1       	ldi	r24, 0x10	; 16
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	11 96       	adiw	r26, 0x01	; 1
     b64:	9c 93       	st	X, r25
     b66:	8e 93       	st	-X, r24
     b68:	fe 01       	movw	r30, r28
     b6a:	eb 55       	subi	r30, 0x5B	; 91
     b6c:	fe 4f       	sbci	r31, 0xFE	; 254
     b6e:	80 81       	ld	r24, Z
     b70:	91 81       	ldd	r25, Z+1	; 0x01
     b72:	13 96       	adiw	r26, 0x03	; 3
     b74:	9c 93       	st	X, r25
     b76:	8e 93       	st	-X, r24
     b78:	12 97       	sbiw	r26, 0x02	; 2
     b7a:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <printf>
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	0f 90       	pop	r0

k=k+1;
     b86:	de 01       	movw	r26, r28
     b88:	af 53       	subi	r26, 0x3F	; 63
     b8a:	be 4f       	sbci	r27, 0xFE	; 254
     b8c:	fe 01       	movw	r30, r28
     b8e:	ef 53       	subi	r30, 0x3F	; 63
     b90:	fe 4f       	sbci	r31, 0xFE	; 254
     b92:	80 81       	ld	r24, Z
     b94:	91 81       	ldd	r25, Z+1	; 0x01
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	8d 93       	st	X+, r24
     b9a:	9c 93       	st	X, r25
i=k;
     b9c:	de 01       	movw	r26, r28
     b9e:	a1 54       	subi	r26, 0x41	; 65
     ba0:	be 4f       	sbci	r27, 0xFE	; 254
     ba2:	fe 01       	movw	r30, r28
     ba4:	ef 53       	subi	r30, 0x3F	; 63
     ba6:	fe 4f       	sbci	r31, 0xFE	; 254
     ba8:	80 81       	ld	r24, Z
     baa:	91 81       	ldd	r25, Z+1	; 0x01
     bac:	11 96       	adiw	r26, 0x01	; 1
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
if (object<45)
     bb2:	fe 01       	movw	r30, r28
     bb4:	eb 55       	subi	r30, 0x5B	; 91
     bb6:	fe 4f       	sbci	r31, 0xFE	; 254
     bb8:	80 81       	ld	r24, Z
     bba:	91 81       	ldd	r25, Z+1	; 0x01
     bbc:	8d 32       	cpi	r24, 0x2D	; 45
     bbe:	91 05       	cpc	r25, r1
     bc0:	08 f0       	brcs	.+2      	; 0xbc4 <main+0xaf6>
     bc2:	70 c1       	rjmp	.+736    	; 0xea4 <main+0xdd6>
     bc4:	fe 01       	movw	r30, r28
     bc6:	e3 5b       	subi	r30, 0xB3	; 179
     bc8:	fe 4f       	sbci	r31, 0xFE	; 254
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	90 e8       	ldi	r25, 0x80	; 128
     bce:	ab e3       	ldi	r26, 0x3B	; 59
     bd0:	b5 e4       	ldi	r27, 0x45	; 69
     bd2:	80 83       	st	Z, r24
     bd4:	91 83       	std	Z+1, r25	; 0x01
     bd6:	a2 83       	std	Z+2, r26	; 0x02
     bd8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bda:	8e 01       	movw	r16, r28
     bdc:	07 5b       	subi	r16, 0xB7	; 183
     bde:	1e 4f       	sbci	r17, 0xFE	; 254
     be0:	fe 01       	movw	r30, r28
     be2:	e3 5b       	subi	r30, 0xB3	; 179
     be4:	fe 4f       	sbci	r31, 0xFE	; 254
     be6:	60 81       	ld	r22, Z
     be8:	71 81       	ldd	r23, Z+1	; 0x01
     bea:	82 81       	ldd	r24, Z+2	; 0x02
     bec:	93 81       	ldd	r25, Z+3	; 0x03
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	4a e7       	ldi	r20, 0x7A	; 122
     bf4:	55 e4       	ldi	r21, 0x45	; 69
     bf6:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
     bfa:	dc 01       	movw	r26, r24
     bfc:	cb 01       	movw	r24, r22
     bfe:	f8 01       	movw	r30, r16
     c00:	80 83       	st	Z, r24
     c02:	91 83       	std	Z+1, r25	; 0x01
     c04:	a2 83       	std	Z+2, r26	; 0x02
     c06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c08:	fe 01       	movw	r30, r28
     c0a:	e7 5b       	subi	r30, 0xB7	; 183
     c0c:	fe 4f       	sbci	r31, 0xFE	; 254
     c0e:	60 81       	ld	r22, Z
     c10:	71 81       	ldd	r23, Z+1	; 0x01
     c12:	82 81       	ldd	r24, Z+2	; 0x02
     c14:	93 81       	ldd	r25, Z+3	; 0x03
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	40 e8       	ldi	r20, 0x80	; 128
     c1c:	5f e3       	ldi	r21, 0x3F	; 63
     c1e:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
     c22:	88 23       	and	r24, r24
     c24:	44 f4       	brge	.+16     	; 0xc36 <main+0xb68>
		__ticks = 1;
     c26:	fe 01       	movw	r30, r28
     c28:	e9 5b       	subi	r30, 0xB9	; 185
     c2a:	fe 4f       	sbci	r31, 0xFE	; 254
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	91 83       	std	Z+1, r25	; 0x01
     c32:	80 83       	st	Z, r24
     c34:	64 c0       	rjmp	.+200    	; 0xcfe <main+0xc30>
	else if (__tmp > 65535)
     c36:	fe 01       	movw	r30, r28
     c38:	e7 5b       	subi	r30, 0xB7	; 183
     c3a:	fe 4f       	sbci	r31, 0xFE	; 254
     c3c:	60 81       	ld	r22, Z
     c3e:	71 81       	ldd	r23, Z+1	; 0x01
     c40:	82 81       	ldd	r24, Z+2	; 0x02
     c42:	93 81       	ldd	r25, Z+3	; 0x03
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	3f ef       	ldi	r19, 0xFF	; 255
     c48:	4f e7       	ldi	r20, 0x7F	; 127
     c4a:	57 e4       	ldi	r21, 0x47	; 71
     c4c:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
     c50:	18 16       	cp	r1, r24
     c52:	0c f0       	brlt	.+2      	; 0xc56 <main+0xb88>
     c54:	43 c0       	rjmp	.+134    	; 0xcdc <main+0xc0e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c56:	fe 01       	movw	r30, r28
     c58:	e3 5b       	subi	r30, 0xB3	; 179
     c5a:	fe 4f       	sbci	r31, 0xFE	; 254
     c5c:	60 81       	ld	r22, Z
     c5e:	71 81       	ldd	r23, Z+1	; 0x01
     c60:	82 81       	ldd	r24, Z+2	; 0x02
     c62:	93 81       	ldd	r25, Z+3	; 0x03
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	40 e2       	ldi	r20, 0x20	; 32
     c6a:	51 e4       	ldi	r21, 0x41	; 65
     c6c:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
     c70:	dc 01       	movw	r26, r24
     c72:	cb 01       	movw	r24, r22
     c74:	8e 01       	movw	r16, r28
     c76:	09 5b       	subi	r16, 0xB9	; 185
     c78:	1e 4f       	sbci	r17, 0xFE	; 254
     c7a:	bc 01       	movw	r22, r24
     c7c:	cd 01       	movw	r24, r26
     c7e:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
     c82:	dc 01       	movw	r26, r24
     c84:	cb 01       	movw	r24, r22
     c86:	f8 01       	movw	r30, r16
     c88:	91 83       	std	Z+1, r25	; 0x01
     c8a:	80 83       	st	Z, r24
     c8c:	1f c0       	rjmp	.+62     	; 0xccc <main+0xbfe>
     c8e:	fe 01       	movw	r30, r28
     c90:	eb 5b       	subi	r30, 0xBB	; 187
     c92:	fe 4f       	sbci	r31, 0xFE	; 254
     c94:	80 e9       	ldi	r24, 0x90	; 144
     c96:	91 e0       	ldi	r25, 0x01	; 1
     c98:	91 83       	std	Z+1, r25	; 0x01
     c9a:	80 83       	st	Z, r24
     c9c:	fe 01       	movw	r30, r28
     c9e:	eb 5b       	subi	r30, 0xBB	; 187
     ca0:	fe 4f       	sbci	r31, 0xFE	; 254
     ca2:	80 81       	ld	r24, Z
     ca4:	91 81       	ldd	r25, Z+1	; 0x01
     ca6:	01 97       	sbiw	r24, 0x01	; 1
     ca8:	f1 f7       	brne	.-4      	; 0xca6 <main+0xbd8>
     caa:	fe 01       	movw	r30, r28
     cac:	eb 5b       	subi	r30, 0xBB	; 187
     cae:	fe 4f       	sbci	r31, 0xFE	; 254
     cb0:	91 83       	std	Z+1, r25	; 0x01
     cb2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cb4:	de 01       	movw	r26, r28
     cb6:	a9 5b       	subi	r26, 0xB9	; 185
     cb8:	be 4f       	sbci	r27, 0xFE	; 254
     cba:	fe 01       	movw	r30, r28
     cbc:	e9 5b       	subi	r30, 0xB9	; 185
     cbe:	fe 4f       	sbci	r31, 0xFE	; 254
     cc0:	80 81       	ld	r24, Z
     cc2:	91 81       	ldd	r25, Z+1	; 0x01
     cc4:	01 97       	sbiw	r24, 0x01	; 1
     cc6:	11 96       	adiw	r26, 0x01	; 1
     cc8:	9c 93       	st	X, r25
     cca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ccc:	fe 01       	movw	r30, r28
     cce:	e9 5b       	subi	r30, 0xB9	; 185
     cd0:	fe 4f       	sbci	r31, 0xFE	; 254
     cd2:	80 81       	ld	r24, Z
     cd4:	91 81       	ldd	r25, Z+1	; 0x01
     cd6:	00 97       	sbiw	r24, 0x00	; 0
     cd8:	d1 f6       	brne	.-76     	; 0xc8e <main+0xbc0>
     cda:	27 c0       	rjmp	.+78     	; 0xd2a <main+0xc5c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cdc:	8e 01       	movw	r16, r28
     cde:	09 5b       	subi	r16, 0xB9	; 185
     ce0:	1e 4f       	sbci	r17, 0xFE	; 254
     ce2:	fe 01       	movw	r30, r28
     ce4:	e7 5b       	subi	r30, 0xB7	; 183
     ce6:	fe 4f       	sbci	r31, 0xFE	; 254
     ce8:	60 81       	ld	r22, Z
     cea:	71 81       	ldd	r23, Z+1	; 0x01
     cec:	82 81       	ldd	r24, Z+2	; 0x02
     cee:	93 81       	ldd	r25, Z+3	; 0x03
     cf0:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
     cf4:	dc 01       	movw	r26, r24
     cf6:	cb 01       	movw	r24, r22
     cf8:	f8 01       	movw	r30, r16
     cfa:	91 83       	std	Z+1, r25	; 0x01
     cfc:	80 83       	st	Z, r24
     cfe:	de 01       	movw	r26, r28
     d00:	ad 5b       	subi	r26, 0xBD	; 189
     d02:	be 4f       	sbci	r27, 0xFE	; 254
     d04:	fe 01       	movw	r30, r28
     d06:	e9 5b       	subi	r30, 0xB9	; 185
     d08:	fe 4f       	sbci	r31, 0xFE	; 254
     d0a:	80 81       	ld	r24, Z
     d0c:	91 81       	ldd	r25, Z+1	; 0x01
     d0e:	8d 93       	st	X+, r24
     d10:	9c 93       	st	X, r25
     d12:	fe 01       	movw	r30, r28
     d14:	ed 5b       	subi	r30, 0xBD	; 189
     d16:	fe 4f       	sbci	r31, 0xFE	; 254
     d18:	80 81       	ld	r24, Z
     d1a:	91 81       	ldd	r25, Z+1	; 0x01
     d1c:	01 97       	sbiw	r24, 0x01	; 1
     d1e:	f1 f7       	brne	.-4      	; 0xd1c <main+0xc4e>
     d20:	fe 01       	movw	r30, r28
     d22:	ed 5b       	subi	r30, 0xBD	; 189
     d24:	fe 4f       	sbci	r31, 0xFE	; 254
     d26:	91 83       	std	Z+1, r25	; 0x01
     d28:	80 83       	st	Z, r24
	break;
	}
 _delay_ms(1);
}

PORTB=0b11011111; // 주행모터 및 모든 모터 정지
     d2a:	e8 e3       	ldi	r30, 0x38	; 56
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	8f ed       	ldi	r24, 0xDF	; 223
     d30:	80 83       	st	Z, r24
PORTA= 0b00000001;// 전자석 on pE0 사용 
     d32:	eb e3       	ldi	r30, 0x3B	; 59
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	80 83       	st	Z, r24
     d3a:	fe 01       	movw	r30, r28
     d3c:	e1 5c       	subi	r30, 0xC1	; 193
     d3e:	fe 4f       	sbci	r31, 0xFE	; 254
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	90 e4       	ldi	r25, 0x40	; 64
     d44:	ac e9       	ldi	r26, 0x9C	; 156
     d46:	b5 e4       	ldi	r27, 0x45	; 69
     d48:	80 83       	st	Z, r24
     d4a:	91 83       	std	Z+1, r25	; 0x01
     d4c:	a2 83       	std	Z+2, r26	; 0x02
     d4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d50:	8e 01       	movw	r16, r28
     d52:	05 5c       	subi	r16, 0xC5	; 197
     d54:	1e 4f       	sbci	r17, 0xFE	; 254
     d56:	fe 01       	movw	r30, r28
     d58:	e1 5c       	subi	r30, 0xC1	; 193
     d5a:	fe 4f       	sbci	r31, 0xFE	; 254
     d5c:	60 81       	ld	r22, Z
     d5e:	71 81       	ldd	r23, Z+1	; 0x01
     d60:	82 81       	ldd	r24, Z+2	; 0x02
     d62:	93 81       	ldd	r25, Z+3	; 0x03
     d64:	20 e0       	ldi	r18, 0x00	; 0
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	4a e7       	ldi	r20, 0x7A	; 122
     d6a:	55 e4       	ldi	r21, 0x45	; 69
     d6c:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
     d70:	dc 01       	movw	r26, r24
     d72:	cb 01       	movw	r24, r22
     d74:	f8 01       	movw	r30, r16
     d76:	80 83       	st	Z, r24
     d78:	91 83       	std	Z+1, r25	; 0x01
     d7a:	a2 83       	std	Z+2, r26	; 0x02
     d7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d7e:	fe 01       	movw	r30, r28
     d80:	e5 5c       	subi	r30, 0xC5	; 197
     d82:	fe 4f       	sbci	r31, 0xFE	; 254
     d84:	60 81       	ld	r22, Z
     d86:	71 81       	ldd	r23, Z+1	; 0x01
     d88:	82 81       	ldd	r24, Z+2	; 0x02
     d8a:	93 81       	ldd	r25, Z+3	; 0x03
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	40 e8       	ldi	r20, 0x80	; 128
     d92:	5f e3       	ldi	r21, 0x3F	; 63
     d94:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
     d98:	88 23       	and	r24, r24
     d9a:	44 f4       	brge	.+16     	; 0xdac <main+0xcde>
		__ticks = 1;
     d9c:	fe 01       	movw	r30, r28
     d9e:	e7 5c       	subi	r30, 0xC7	; 199
     da0:	fe 4f       	sbci	r31, 0xFE	; 254
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	91 83       	std	Z+1, r25	; 0x01
     da8:	80 83       	st	Z, r24
     daa:	64 c0       	rjmp	.+200    	; 0xe74 <main+0xda6>
	else if (__tmp > 65535)
     dac:	fe 01       	movw	r30, r28
     dae:	e5 5c       	subi	r30, 0xC5	; 197
     db0:	fe 4f       	sbci	r31, 0xFE	; 254
     db2:	60 81       	ld	r22, Z
     db4:	71 81       	ldd	r23, Z+1	; 0x01
     db6:	82 81       	ldd	r24, Z+2	; 0x02
     db8:	93 81       	ldd	r25, Z+3	; 0x03
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	3f ef       	ldi	r19, 0xFF	; 255
     dbe:	4f e7       	ldi	r20, 0x7F	; 127
     dc0:	57 e4       	ldi	r21, 0x47	; 71
     dc2:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
     dc6:	18 16       	cp	r1, r24
     dc8:	0c f0       	brlt	.+2      	; 0xdcc <main+0xcfe>
     dca:	43 c0       	rjmp	.+134    	; 0xe52 <main+0xd84>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dcc:	fe 01       	movw	r30, r28
     dce:	e1 5c       	subi	r30, 0xC1	; 193
     dd0:	fe 4f       	sbci	r31, 0xFE	; 254
     dd2:	60 81       	ld	r22, Z
     dd4:	71 81       	ldd	r23, Z+1	; 0x01
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	40 e2       	ldi	r20, 0x20	; 32
     de0:	51 e4       	ldi	r21, 0x41	; 65
     de2:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
     de6:	dc 01       	movw	r26, r24
     de8:	cb 01       	movw	r24, r22
     dea:	8e 01       	movw	r16, r28
     dec:	07 5c       	subi	r16, 0xC7	; 199
     dee:	1e 4f       	sbci	r17, 0xFE	; 254
     df0:	bc 01       	movw	r22, r24
     df2:	cd 01       	movw	r24, r26
     df4:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
     df8:	dc 01       	movw	r26, r24
     dfa:	cb 01       	movw	r24, r22
     dfc:	f8 01       	movw	r30, r16
     dfe:	91 83       	std	Z+1, r25	; 0x01
     e00:	80 83       	st	Z, r24
     e02:	1f c0       	rjmp	.+62     	; 0xe42 <main+0xd74>
     e04:	fe 01       	movw	r30, r28
     e06:	e9 5c       	subi	r30, 0xC9	; 201
     e08:	fe 4f       	sbci	r31, 0xFE	; 254
     e0a:	80 e9       	ldi	r24, 0x90	; 144
     e0c:	91 e0       	ldi	r25, 0x01	; 1
     e0e:	91 83       	std	Z+1, r25	; 0x01
     e10:	80 83       	st	Z, r24
     e12:	fe 01       	movw	r30, r28
     e14:	e9 5c       	subi	r30, 0xC9	; 201
     e16:	fe 4f       	sbci	r31, 0xFE	; 254
     e18:	80 81       	ld	r24, Z
     e1a:	91 81       	ldd	r25, Z+1	; 0x01
     e1c:	01 97       	sbiw	r24, 0x01	; 1
     e1e:	f1 f7       	brne	.-4      	; 0xe1c <main+0xd4e>
     e20:	fe 01       	movw	r30, r28
     e22:	e9 5c       	subi	r30, 0xC9	; 201
     e24:	fe 4f       	sbci	r31, 0xFE	; 254
     e26:	91 83       	std	Z+1, r25	; 0x01
     e28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e2a:	de 01       	movw	r26, r28
     e2c:	a7 5c       	subi	r26, 0xC7	; 199
     e2e:	be 4f       	sbci	r27, 0xFE	; 254
     e30:	fe 01       	movw	r30, r28
     e32:	e7 5c       	subi	r30, 0xC7	; 199
     e34:	fe 4f       	sbci	r31, 0xFE	; 254
     e36:	80 81       	ld	r24, Z
     e38:	91 81       	ldd	r25, Z+1	; 0x01
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	11 96       	adiw	r26, 0x01	; 1
     e3e:	9c 93       	st	X, r25
     e40:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e42:	fe 01       	movw	r30, r28
     e44:	e7 5c       	subi	r30, 0xC7	; 199
     e46:	fe 4f       	sbci	r31, 0xFE	; 254
     e48:	80 81       	ld	r24, Z
     e4a:	91 81       	ldd	r25, Z+1	; 0x01
     e4c:	00 97       	sbiw	r24, 0x00	; 0
     e4e:	d1 f6       	brne	.-76     	; 0xe04 <main+0xd36>
     e50:	de c0       	rjmp	.+444    	; 0x100e <main+0xf40>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e52:	8e 01       	movw	r16, r28
     e54:	07 5c       	subi	r16, 0xC7	; 199
     e56:	1e 4f       	sbci	r17, 0xFE	; 254
     e58:	fe 01       	movw	r30, r28
     e5a:	e5 5c       	subi	r30, 0xC5	; 197
     e5c:	fe 4f       	sbci	r31, 0xFE	; 254
     e5e:	60 81       	ld	r22, Z
     e60:	71 81       	ldd	r23, Z+1	; 0x01
     e62:	82 81       	ldd	r24, Z+2	; 0x02
     e64:	93 81       	ldd	r25, Z+3	; 0x03
     e66:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	f8 01       	movw	r30, r16
     e70:	91 83       	std	Z+1, r25	; 0x01
     e72:	80 83       	st	Z, r24
     e74:	de 01       	movw	r26, r28
     e76:	ab 5c       	subi	r26, 0xCB	; 203
     e78:	be 4f       	sbci	r27, 0xFE	; 254
     e7a:	fe 01       	movw	r30, r28
     e7c:	e7 5c       	subi	r30, 0xC7	; 199
     e7e:	fe 4f       	sbci	r31, 0xFE	; 254
     e80:	80 81       	ld	r24, Z
     e82:	91 81       	ldd	r25, Z+1	; 0x01
     e84:	11 96       	adiw	r26, 0x01	; 1
     e86:	9c 93       	st	X, r25
     e88:	8e 93       	st	-X, r24
     e8a:	fe 01       	movw	r30, r28
     e8c:	eb 5c       	subi	r30, 0xCB	; 203
     e8e:	fe 4f       	sbci	r31, 0xFE	; 254
     e90:	80 81       	ld	r24, Z
     e92:	91 81       	ldd	r25, Z+1	; 0x01
     e94:	01 97       	sbiw	r24, 0x01	; 1
     e96:	f1 f7       	brne	.-4      	; 0xe94 <main+0xdc6>
     e98:	fe 01       	movw	r30, r28
     e9a:	eb 5c       	subi	r30, 0xCB	; 203
     e9c:	fe 4f       	sbci	r31, 0xFE	; 254
     e9e:	91 83       	std	Z+1, r25	; 0x01
     ea0:	80 83       	st	Z, r24
     ea2:	b5 c0       	rjmp	.+362    	; 0x100e <main+0xf40>
     ea4:	fe 01       	movw	r30, r28
     ea6:	ef 5c       	subi	r30, 0xCF	; 207
     ea8:	fe 4f       	sbci	r31, 0xFE	; 254
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	a0 e8       	ldi	r26, 0x80	; 128
     eb0:	bf e3       	ldi	r27, 0x3F	; 63
     eb2:	80 83       	st	Z, r24
     eb4:	91 83       	std	Z+1, r25	; 0x01
     eb6:	a2 83       	std	Z+2, r26	; 0x02
     eb8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eba:	8e 01       	movw	r16, r28
     ebc:	03 5d       	subi	r16, 0xD3	; 211
     ebe:	1e 4f       	sbci	r17, 0xFE	; 254
     ec0:	fe 01       	movw	r30, r28
     ec2:	ef 5c       	subi	r30, 0xCF	; 207
     ec4:	fe 4f       	sbci	r31, 0xFE	; 254
     ec6:	60 81       	ld	r22, Z
     ec8:	71 81       	ldd	r23, Z+1	; 0x01
     eca:	82 81       	ldd	r24, Z+2	; 0x02
     ecc:	93 81       	ldd	r25, Z+3	; 0x03
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	4a e7       	ldi	r20, 0x7A	; 122
     ed4:	55 e4       	ldi	r21, 0x45	; 69
     ed6:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
     eda:	dc 01       	movw	r26, r24
     edc:	cb 01       	movw	r24, r22
     ede:	f8 01       	movw	r30, r16
     ee0:	80 83       	st	Z, r24
     ee2:	91 83       	std	Z+1, r25	; 0x01
     ee4:	a2 83       	std	Z+2, r26	; 0x02
     ee6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ee8:	fe 01       	movw	r30, r28
     eea:	e3 5d       	subi	r30, 0xD3	; 211
     eec:	fe 4f       	sbci	r31, 0xFE	; 254
     eee:	60 81       	ld	r22, Z
     ef0:	71 81       	ldd	r23, Z+1	; 0x01
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	40 e8       	ldi	r20, 0x80	; 128
     efc:	5f e3       	ldi	r21, 0x3F	; 63
     efe:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
     f02:	88 23       	and	r24, r24
     f04:	44 f4       	brge	.+16     	; 0xf16 <main+0xe48>
		__ticks = 1;
     f06:	fe 01       	movw	r30, r28
     f08:	e5 5d       	subi	r30, 0xD5	; 213
     f0a:	fe 4f       	sbci	r31, 0xFE	; 254
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	91 83       	std	Z+1, r25	; 0x01
     f12:	80 83       	st	Z, r24
     f14:	64 c0       	rjmp	.+200    	; 0xfde <main+0xf10>
	else if (__tmp > 65535)
     f16:	fe 01       	movw	r30, r28
     f18:	e3 5d       	subi	r30, 0xD3	; 211
     f1a:	fe 4f       	sbci	r31, 0xFE	; 254
     f1c:	60 81       	ld	r22, Z
     f1e:	71 81       	ldd	r23, Z+1	; 0x01
     f20:	82 81       	ldd	r24, Z+2	; 0x02
     f22:	93 81       	ldd	r25, Z+3	; 0x03
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	3f ef       	ldi	r19, 0xFF	; 255
     f28:	4f e7       	ldi	r20, 0x7F	; 127
     f2a:	57 e4       	ldi	r21, 0x47	; 71
     f2c:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
     f30:	18 16       	cp	r1, r24
     f32:	0c f0       	brlt	.+2      	; 0xf36 <main+0xe68>
     f34:	43 c0       	rjmp	.+134    	; 0xfbc <main+0xeee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f36:	fe 01       	movw	r30, r28
     f38:	ef 5c       	subi	r30, 0xCF	; 207
     f3a:	fe 4f       	sbci	r31, 0xFE	; 254
     f3c:	60 81       	ld	r22, Z
     f3e:	71 81       	ldd	r23, Z+1	; 0x01
     f40:	82 81       	ldd	r24, Z+2	; 0x02
     f42:	93 81       	ldd	r25, Z+3	; 0x03
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	40 e2       	ldi	r20, 0x20	; 32
     f4a:	51 e4       	ldi	r21, 0x41	; 65
     f4c:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	8e 01       	movw	r16, r28
     f56:	05 5d       	subi	r16, 0xD5	; 213
     f58:	1e 4f       	sbci	r17, 0xFE	; 254
     f5a:	bc 01       	movw	r22, r24
     f5c:	cd 01       	movw	r24, r26
     f5e:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	f8 01       	movw	r30, r16
     f68:	91 83       	std	Z+1, r25	; 0x01
     f6a:	80 83       	st	Z, r24
     f6c:	1f c0       	rjmp	.+62     	; 0xfac <main+0xede>
     f6e:	fe 01       	movw	r30, r28
     f70:	e7 5d       	subi	r30, 0xD7	; 215
     f72:	fe 4f       	sbci	r31, 0xFE	; 254
     f74:	80 e9       	ldi	r24, 0x90	; 144
     f76:	91 e0       	ldi	r25, 0x01	; 1
     f78:	91 83       	std	Z+1, r25	; 0x01
     f7a:	80 83       	st	Z, r24
     f7c:	fe 01       	movw	r30, r28
     f7e:	e7 5d       	subi	r30, 0xD7	; 215
     f80:	fe 4f       	sbci	r31, 0xFE	; 254
     f82:	80 81       	ld	r24, Z
     f84:	91 81       	ldd	r25, Z+1	; 0x01
     f86:	01 97       	sbiw	r24, 0x01	; 1
     f88:	f1 f7       	brne	.-4      	; 0xf86 <main+0xeb8>
     f8a:	fe 01       	movw	r30, r28
     f8c:	e7 5d       	subi	r30, 0xD7	; 215
     f8e:	fe 4f       	sbci	r31, 0xFE	; 254
     f90:	91 83       	std	Z+1, r25	; 0x01
     f92:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f94:	de 01       	movw	r26, r28
     f96:	a5 5d       	subi	r26, 0xD5	; 213
     f98:	be 4f       	sbci	r27, 0xFE	; 254
     f9a:	fe 01       	movw	r30, r28
     f9c:	e5 5d       	subi	r30, 0xD5	; 213
     f9e:	fe 4f       	sbci	r31, 0xFE	; 254
     fa0:	80 81       	ld	r24, Z
     fa2:	91 81       	ldd	r25, Z+1	; 0x01
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	11 96       	adiw	r26, 0x01	; 1
     fa8:	9c 93       	st	X, r25
     faa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fac:	fe 01       	movw	r30, r28
     fae:	e5 5d       	subi	r30, 0xD5	; 213
     fb0:	fe 4f       	sbci	r31, 0xFE	; 254
     fb2:	80 81       	ld	r24, Z
     fb4:	91 81       	ldd	r25, Z+1	; 0x01
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	d1 f6       	brne	.-76     	; 0xf6e <main+0xea0>
     fba:	bd cd       	rjmp	.-1158   	; 0xb36 <main+0xa68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fbc:	8e 01       	movw	r16, r28
     fbe:	05 5d       	subi	r16, 0xD5	; 213
     fc0:	1e 4f       	sbci	r17, 0xFE	; 254
     fc2:	fe 01       	movw	r30, r28
     fc4:	e3 5d       	subi	r30, 0xD3	; 211
     fc6:	fe 4f       	sbci	r31, 0xFE	; 254
     fc8:	60 81       	ld	r22, Z
     fca:	71 81       	ldd	r23, Z+1	; 0x01
     fcc:	82 81       	ldd	r24, Z+2	; 0x02
     fce:	93 81       	ldd	r25, Z+3	; 0x03
     fd0:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
     fd4:	dc 01       	movw	r26, r24
     fd6:	cb 01       	movw	r24, r22
     fd8:	f8 01       	movw	r30, r16
     fda:	91 83       	std	Z+1, r25	; 0x01
     fdc:	80 83       	st	Z, r24
     fde:	de 01       	movw	r26, r28
     fe0:	a9 5d       	subi	r26, 0xD9	; 217
     fe2:	be 4f       	sbci	r27, 0xFE	; 254
     fe4:	fe 01       	movw	r30, r28
     fe6:	e5 5d       	subi	r30, 0xD5	; 213
     fe8:	fe 4f       	sbci	r31, 0xFE	; 254
     fea:	80 81       	ld	r24, Z
     fec:	91 81       	ldd	r25, Z+1	; 0x01
     fee:	11 96       	adiw	r26, 0x01	; 1
     ff0:	9c 93       	st	X, r25
     ff2:	8e 93       	st	-X, r24
     ff4:	fe 01       	movw	r30, r28
     ff6:	e9 5d       	subi	r30, 0xD9	; 217
     ff8:	fe 4f       	sbci	r31, 0xFE	; 254
     ffa:	80 81       	ld	r24, Z
     ffc:	91 81       	ldd	r25, Z+1	; 0x01
     ffe:	01 97       	sbiw	r24, 0x01	; 1
    1000:	f1 f7       	brne	.-4      	; 0xffe <main+0xf30>
    1002:	fe 01       	movw	r30, r28
    1004:	e9 5d       	subi	r30, 0xD9	; 217
    1006:	fe 4f       	sbci	r31, 0xFE	; 254
    1008:	91 83       	std	Z+1, r25	; 0x01
    100a:	80 83       	st	Z, r24
    100c:	94 cd       	rjmp	.-1240   	; 0xb36 <main+0xa68>
_delay_ms(5000);
while(1)//올리기
{
OCR2=200;
    100e:	e3 e4       	ldi	r30, 0x43	; 67
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	88 ec       	ldi	r24, 0xC8	; 200
    1014:	80 83       	st	Z, r24
PORTB= 0b10000010; //올라가기 
    1016:	e8 e3       	ldi	r30, 0x38	; 56
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	82 e8       	ldi	r24, 0x82	; 130
    101c:	80 83       	st	Z, r24

printf("i is = %d \r\n" , i);
    101e:	00 d0       	rcall	.+0      	; 0x1020 <main+0xf52>
    1020:	00 d0       	rcall	.+0      	; 0x1022 <main+0xf54>
    1022:	ad b7       	in	r26, 0x3d	; 61
    1024:	be b7       	in	r27, 0x3e	; 62
    1026:	11 96       	adiw	r26, 0x01	; 1
    1028:	81 e2       	ldi	r24, 0x21	; 33
    102a:	91 e0       	ldi	r25, 0x01	; 1
    102c:	11 96       	adiw	r26, 0x01	; 1
    102e:	9c 93       	st	X, r25
    1030:	8e 93       	st	-X, r24
    1032:	fe 01       	movw	r30, r28
    1034:	e1 54       	subi	r30, 0x41	; 65
    1036:	fe 4f       	sbci	r31, 0xFE	; 254
    1038:	80 81       	ld	r24, Z
    103a:	91 81       	ldd	r25, Z+1	; 0x01
    103c:	13 96       	adiw	r26, 0x03	; 3
    103e:	9c 93       	st	X, r25
    1040:	8e 93       	st	-X, r24
    1042:	12 97       	sbiw	r26, 0x02	; 2
    1044:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <printf>
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
i=i-1;
    1050:	de 01       	movw	r26, r28
    1052:	a1 54       	subi	r26, 0x41	; 65
    1054:	be 4f       	sbci	r27, 0xFE	; 254
    1056:	fe 01       	movw	r30, r28
    1058:	e1 54       	subi	r30, 0x41	; 65
    105a:	fe 4f       	sbci	r31, 0xFE	; 254
    105c:	80 81       	ld	r24, Z
    105e:	91 81       	ldd	r25, Z+1	; 0x01
    1060:	01 97       	sbiw	r24, 0x01	; 1
    1062:	11 96       	adiw	r26, 0x01	; 1
    1064:	9c 93       	st	X, r25
    1066:	8e 93       	st	-X, r24

if(i==0){
    1068:	fe 01       	movw	r30, r28
    106a:	e1 54       	subi	r30, 0x41	; 65
    106c:	fe 4f       	sbci	r31, 0xFE	; 254
    106e:	80 81       	ld	r24, Z
    1070:	91 81       	ldd	r25, Z+1	; 0x01
    1072:	00 97       	sbiw	r24, 0x00	; 0
    1074:	09 f0       	breq	.+2      	; 0x1078 <main+0xfaa>
    1076:	84 c1       	rjmp	.+776    	; 0x1380 <__stack+0x281>
    1078:	fe 01       	movw	r30, r28
    107a:	ed 5d       	subi	r30, 0xDD	; 221
    107c:	fe 4f       	sbci	r31, 0xFE	; 254
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	aa e7       	ldi	r26, 0x7A	; 122
    1084:	b5 e4       	ldi	r27, 0x45	; 69
    1086:	80 83       	st	Z, r24
    1088:	91 83       	std	Z+1, r25	; 0x01
    108a:	a2 83       	std	Z+2, r26	; 0x02
    108c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    108e:	8e 01       	movw	r16, r28
    1090:	01 5e       	subi	r16, 0xE1	; 225
    1092:	1e 4f       	sbci	r17, 0xFE	; 254
    1094:	fe 01       	movw	r30, r28
    1096:	ed 5d       	subi	r30, 0xDD	; 221
    1098:	fe 4f       	sbci	r31, 0xFE	; 254
    109a:	60 81       	ld	r22, Z
    109c:	71 81       	ldd	r23, Z+1	; 0x01
    109e:	82 81       	ldd	r24, Z+2	; 0x02
    10a0:	93 81       	ldd	r25, Z+3	; 0x03
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	4a e7       	ldi	r20, 0x7A	; 122
    10a8:	55 e4       	ldi	r21, 0x45	; 69
    10aa:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    10ae:	dc 01       	movw	r26, r24
    10b0:	cb 01       	movw	r24, r22
    10b2:	f8 01       	movw	r30, r16
    10b4:	80 83       	st	Z, r24
    10b6:	91 83       	std	Z+1, r25	; 0x01
    10b8:	a2 83       	std	Z+2, r26	; 0x02
    10ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10bc:	fe 01       	movw	r30, r28
    10be:	e1 5e       	subi	r30, 0xE1	; 225
    10c0:	fe 4f       	sbci	r31, 0xFE	; 254
    10c2:	60 81       	ld	r22, Z
    10c4:	71 81       	ldd	r23, Z+1	; 0x01
    10c6:	82 81       	ldd	r24, Z+2	; 0x02
    10c8:	93 81       	ldd	r25, Z+3	; 0x03
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	40 e8       	ldi	r20, 0x80	; 128
    10d0:	5f e3       	ldi	r21, 0x3F	; 63
    10d2:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    10d6:	88 23       	and	r24, r24
    10d8:	44 f4       	brge	.+16     	; 0x10ea <main+0x101c>
		__ticks = 1;
    10da:	fe 01       	movw	r30, r28
    10dc:	e3 5e       	subi	r30, 0xE3	; 227
    10de:	fe 4f       	sbci	r31, 0xFE	; 254
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	91 83       	std	Z+1, r25	; 0x01
    10e6:	80 83       	st	Z, r24
    10e8:	64 c0       	rjmp	.+200    	; 0x11b2 <__stack+0xb3>
	else if (__tmp > 65535)
    10ea:	fe 01       	movw	r30, r28
    10ec:	e1 5e       	subi	r30, 0xE1	; 225
    10ee:	fe 4f       	sbci	r31, 0xFE	; 254
    10f0:	60 81       	ld	r22, Z
    10f2:	71 81       	ldd	r23, Z+1	; 0x01
    10f4:	82 81       	ldd	r24, Z+2	; 0x02
    10f6:	93 81       	ldd	r25, Z+3	; 0x03
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	3f ef       	ldi	r19, 0xFF	; 255
    10fc:	4f e7       	ldi	r20, 0x7F	; 127
    10fe:	57 e4       	ldi	r21, 0x47	; 71
    1100:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    1104:	18 16       	cp	r1, r24
    1106:	0c f0       	brlt	.+2      	; 0x110a <__stack+0xb>
    1108:	43 c0       	rjmp	.+134    	; 0x1190 <__stack+0x91>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    110a:	fe 01       	movw	r30, r28
    110c:	ed 5d       	subi	r30, 0xDD	; 221
    110e:	fe 4f       	sbci	r31, 0xFE	; 254
    1110:	60 81       	ld	r22, Z
    1112:	71 81       	ldd	r23, Z+1	; 0x01
    1114:	82 81       	ldd	r24, Z+2	; 0x02
    1116:	93 81       	ldd	r25, Z+3	; 0x03
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	40 e2       	ldi	r20, 0x20	; 32
    111e:	51 e4       	ldi	r21, 0x41	; 65
    1120:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	8e 01       	movw	r16, r28
    112a:	03 5e       	subi	r16, 0xE3	; 227
    112c:	1e 4f       	sbci	r17, 0xFE	; 254
    112e:	bc 01       	movw	r22, r24
    1130:	cd 01       	movw	r24, r26
    1132:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    1136:	dc 01       	movw	r26, r24
    1138:	cb 01       	movw	r24, r22
    113a:	f8 01       	movw	r30, r16
    113c:	91 83       	std	Z+1, r25	; 0x01
    113e:	80 83       	st	Z, r24
    1140:	1f c0       	rjmp	.+62     	; 0x1180 <__stack+0x81>
    1142:	fe 01       	movw	r30, r28
    1144:	e5 5e       	subi	r30, 0xE5	; 229
    1146:	fe 4f       	sbci	r31, 0xFE	; 254
    1148:	80 e9       	ldi	r24, 0x90	; 144
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	91 83       	std	Z+1, r25	; 0x01
    114e:	80 83       	st	Z, r24
    1150:	fe 01       	movw	r30, r28
    1152:	e5 5e       	subi	r30, 0xE5	; 229
    1154:	fe 4f       	sbci	r31, 0xFE	; 254
    1156:	80 81       	ld	r24, Z
    1158:	91 81       	ldd	r25, Z+1	; 0x01
    115a:	01 97       	sbiw	r24, 0x01	; 1
    115c:	f1 f7       	brne	.-4      	; 0x115a <__stack+0x5b>
    115e:	fe 01       	movw	r30, r28
    1160:	e5 5e       	subi	r30, 0xE5	; 229
    1162:	fe 4f       	sbci	r31, 0xFE	; 254
    1164:	91 83       	std	Z+1, r25	; 0x01
    1166:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1168:	de 01       	movw	r26, r28
    116a:	a3 5e       	subi	r26, 0xE3	; 227
    116c:	be 4f       	sbci	r27, 0xFE	; 254
    116e:	fe 01       	movw	r30, r28
    1170:	e3 5e       	subi	r30, 0xE3	; 227
    1172:	fe 4f       	sbci	r31, 0xFE	; 254
    1174:	80 81       	ld	r24, Z
    1176:	91 81       	ldd	r25, Z+1	; 0x01
    1178:	01 97       	sbiw	r24, 0x01	; 1
    117a:	11 96       	adiw	r26, 0x01	; 1
    117c:	9c 93       	st	X, r25
    117e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1180:	fe 01       	movw	r30, r28
    1182:	e3 5e       	subi	r30, 0xE3	; 227
    1184:	fe 4f       	sbci	r31, 0xFE	; 254
    1186:	80 81       	ld	r24, Z
    1188:	91 81       	ldd	r25, Z+1	; 0x01
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	d1 f6       	brne	.-76     	; 0x1142 <__stack+0x43>
    118e:	27 c0       	rjmp	.+78     	; 0x11de <__stack+0xdf>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1190:	8e 01       	movw	r16, r28
    1192:	03 5e       	subi	r16, 0xE3	; 227
    1194:	1e 4f       	sbci	r17, 0xFE	; 254
    1196:	fe 01       	movw	r30, r28
    1198:	e1 5e       	subi	r30, 0xE1	; 225
    119a:	fe 4f       	sbci	r31, 0xFE	; 254
    119c:	60 81       	ld	r22, Z
    119e:	71 81       	ldd	r23, Z+1	; 0x01
    11a0:	82 81       	ldd	r24, Z+2	; 0x02
    11a2:	93 81       	ldd	r25, Z+3	; 0x03
    11a4:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	f8 01       	movw	r30, r16
    11ae:	91 83       	std	Z+1, r25	; 0x01
    11b0:	80 83       	st	Z, r24
    11b2:	de 01       	movw	r26, r28
    11b4:	a7 5e       	subi	r26, 0xE7	; 231
    11b6:	be 4f       	sbci	r27, 0xFE	; 254
    11b8:	fe 01       	movw	r30, r28
    11ba:	e3 5e       	subi	r30, 0xE3	; 227
    11bc:	fe 4f       	sbci	r31, 0xFE	; 254
    11be:	80 81       	ld	r24, Z
    11c0:	91 81       	ldd	r25, Z+1	; 0x01
    11c2:	8d 93       	st	X+, r24
    11c4:	9c 93       	st	X, r25
    11c6:	fe 01       	movw	r30, r28
    11c8:	e7 5e       	subi	r30, 0xE7	; 231
    11ca:	fe 4f       	sbci	r31, 0xFE	; 254
    11cc:	80 81       	ld	r24, Z
    11ce:	91 81       	ldd	r25, Z+1	; 0x01
    11d0:	01 97       	sbiw	r24, 0x01	; 1
    11d2:	f1 f7       	brne	.-4      	; 0x11d0 <__stack+0xd1>
    11d4:	fe 01       	movw	r30, r28
    11d6:	e7 5e       	subi	r30, 0xE7	; 231
    11d8:	fe 4f       	sbci	r31, 0xFE	; 254
    11da:	91 83       	std	Z+1, r25	; 0x01
    11dc:	80 83       	st	Z, r24
    11de:	fe 01       	movw	r30, r28
    11e0:	eb 5e       	subi	r30, 0xEB	; 235
    11e2:	fe 4f       	sbci	r31, 0xFE	; 254
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	aa e7       	ldi	r26, 0x7A	; 122
    11ea:	b5 e4       	ldi	r27, 0x45	; 69
    11ec:	80 83       	st	Z, r24
    11ee:	91 83       	std	Z+1, r25	; 0x01
    11f0:	a2 83       	std	Z+2, r26	; 0x02
    11f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f4:	8e 01       	movw	r16, r28
    11f6:	0f 5e       	subi	r16, 0xEF	; 239
    11f8:	1e 4f       	sbci	r17, 0xFE	; 254
    11fa:	fe 01       	movw	r30, r28
    11fc:	eb 5e       	subi	r30, 0xEB	; 235
    11fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1200:	60 81       	ld	r22, Z
    1202:	71 81       	ldd	r23, Z+1	; 0x01
    1204:	82 81       	ldd	r24, Z+2	; 0x02
    1206:	93 81       	ldd	r25, Z+3	; 0x03
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	4a e7       	ldi	r20, 0x7A	; 122
    120e:	55 e4       	ldi	r21, 0x45	; 69
    1210:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	f8 01       	movw	r30, r16
    121a:	80 83       	st	Z, r24
    121c:	91 83       	std	Z+1, r25	; 0x01
    121e:	a2 83       	std	Z+2, r26	; 0x02
    1220:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1222:	fe 01       	movw	r30, r28
    1224:	ef 5e       	subi	r30, 0xEF	; 239
    1226:	fe 4f       	sbci	r31, 0xFE	; 254
    1228:	60 81       	ld	r22, Z
    122a:	71 81       	ldd	r23, Z+1	; 0x01
    122c:	82 81       	ldd	r24, Z+2	; 0x02
    122e:	93 81       	ldd	r25, Z+3	; 0x03
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	40 e8       	ldi	r20, 0x80	; 128
    1236:	5f e3       	ldi	r21, 0x3F	; 63
    1238:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    123c:	88 23       	and	r24, r24
    123e:	44 f4       	brge	.+16     	; 0x1250 <__stack+0x151>
		__ticks = 1;
    1240:	fe 01       	movw	r30, r28
    1242:	e1 5f       	subi	r30, 0xF1	; 241
    1244:	fe 4f       	sbci	r31, 0xFE	; 254
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	91 83       	std	Z+1, r25	; 0x01
    124c:	80 83       	st	Z, r24
    124e:	64 c0       	rjmp	.+200    	; 0x1318 <__stack+0x219>
	else if (__tmp > 65535)
    1250:	fe 01       	movw	r30, r28
    1252:	ef 5e       	subi	r30, 0xEF	; 239
    1254:	fe 4f       	sbci	r31, 0xFE	; 254
    1256:	60 81       	ld	r22, Z
    1258:	71 81       	ldd	r23, Z+1	; 0x01
    125a:	82 81       	ldd	r24, Z+2	; 0x02
    125c:	93 81       	ldd	r25, Z+3	; 0x03
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	3f ef       	ldi	r19, 0xFF	; 255
    1262:	4f e7       	ldi	r20, 0x7F	; 127
    1264:	57 e4       	ldi	r21, 0x47	; 71
    1266:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    126a:	18 16       	cp	r1, r24
    126c:	0c f0       	brlt	.+2      	; 0x1270 <__stack+0x171>
    126e:	43 c0       	rjmp	.+134    	; 0x12f6 <__stack+0x1f7>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1270:	fe 01       	movw	r30, r28
    1272:	eb 5e       	subi	r30, 0xEB	; 235
    1274:	fe 4f       	sbci	r31, 0xFE	; 254
    1276:	60 81       	ld	r22, Z
    1278:	71 81       	ldd	r23, Z+1	; 0x01
    127a:	82 81       	ldd	r24, Z+2	; 0x02
    127c:	93 81       	ldd	r25, Z+3	; 0x03
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	40 e2       	ldi	r20, 0x20	; 32
    1284:	51 e4       	ldi	r21, 0x41	; 65
    1286:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    128a:	dc 01       	movw	r26, r24
    128c:	cb 01       	movw	r24, r22
    128e:	8e 01       	movw	r16, r28
    1290:	01 5f       	subi	r16, 0xF1	; 241
    1292:	1e 4f       	sbci	r17, 0xFE	; 254
    1294:	bc 01       	movw	r22, r24
    1296:	cd 01       	movw	r24, r26
    1298:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	f8 01       	movw	r30, r16
    12a2:	91 83       	std	Z+1, r25	; 0x01
    12a4:	80 83       	st	Z, r24
    12a6:	1f c0       	rjmp	.+62     	; 0x12e6 <__stack+0x1e7>
    12a8:	fe 01       	movw	r30, r28
    12aa:	e3 5f       	subi	r30, 0xF3	; 243
    12ac:	fe 4f       	sbci	r31, 0xFE	; 254
    12ae:	80 e9       	ldi	r24, 0x90	; 144
    12b0:	91 e0       	ldi	r25, 0x01	; 1
    12b2:	91 83       	std	Z+1, r25	; 0x01
    12b4:	80 83       	st	Z, r24
    12b6:	fe 01       	movw	r30, r28
    12b8:	e3 5f       	subi	r30, 0xF3	; 243
    12ba:	fe 4f       	sbci	r31, 0xFE	; 254
    12bc:	80 81       	ld	r24, Z
    12be:	91 81       	ldd	r25, Z+1	; 0x01
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	f1 f7       	brne	.-4      	; 0x12c0 <__stack+0x1c1>
    12c4:	fe 01       	movw	r30, r28
    12c6:	e3 5f       	subi	r30, 0xF3	; 243
    12c8:	fe 4f       	sbci	r31, 0xFE	; 254
    12ca:	91 83       	std	Z+1, r25	; 0x01
    12cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ce:	de 01       	movw	r26, r28
    12d0:	a1 5f       	subi	r26, 0xF1	; 241
    12d2:	be 4f       	sbci	r27, 0xFE	; 254
    12d4:	fe 01       	movw	r30, r28
    12d6:	e1 5f       	subi	r30, 0xF1	; 241
    12d8:	fe 4f       	sbci	r31, 0xFE	; 254
    12da:	80 81       	ld	r24, Z
    12dc:	91 81       	ldd	r25, Z+1	; 0x01
    12de:	01 97       	sbiw	r24, 0x01	; 1
    12e0:	11 96       	adiw	r26, 0x01	; 1
    12e2:	9c 93       	st	X, r25
    12e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e6:	fe 01       	movw	r30, r28
    12e8:	e1 5f       	subi	r30, 0xF1	; 241
    12ea:	fe 4f       	sbci	r31, 0xFE	; 254
    12ec:	80 81       	ld	r24, Z
    12ee:	91 81       	ldd	r25, Z+1	; 0x01
    12f0:	00 97       	sbiw	r24, 0x00	; 0
    12f2:	d1 f6       	brne	.-76     	; 0x12a8 <__stack+0x1a9>
    12f4:	27 c0       	rjmp	.+78     	; 0x1344 <__stack+0x245>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12f6:	8e 01       	movw	r16, r28
    12f8:	01 5f       	subi	r16, 0xF1	; 241
    12fa:	1e 4f       	sbci	r17, 0xFE	; 254
    12fc:	fe 01       	movw	r30, r28
    12fe:	ef 5e       	subi	r30, 0xEF	; 239
    1300:	fe 4f       	sbci	r31, 0xFE	; 254
    1302:	60 81       	ld	r22, Z
    1304:	71 81       	ldd	r23, Z+1	; 0x01
    1306:	82 81       	ldd	r24, Z+2	; 0x02
    1308:	93 81       	ldd	r25, Z+3	; 0x03
    130a:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	f8 01       	movw	r30, r16
    1314:	91 83       	std	Z+1, r25	; 0x01
    1316:	80 83       	st	Z, r24
    1318:	de 01       	movw	r26, r28
    131a:	a5 5f       	subi	r26, 0xF5	; 245
    131c:	be 4f       	sbci	r27, 0xFE	; 254
    131e:	fe 01       	movw	r30, r28
    1320:	e1 5f       	subi	r30, 0xF1	; 241
    1322:	fe 4f       	sbci	r31, 0xFE	; 254
    1324:	80 81       	ld	r24, Z
    1326:	91 81       	ldd	r25, Z+1	; 0x01
    1328:	8d 93       	st	X+, r24
    132a:	9c 93       	st	X, r25
    132c:	fe 01       	movw	r30, r28
    132e:	e5 5f       	subi	r30, 0xF5	; 245
    1330:	fe 4f       	sbci	r31, 0xFE	; 254
    1332:	80 81       	ld	r24, Z
    1334:	91 81       	ldd	r25, Z+1	; 0x01
    1336:	01 97       	sbiw	r24, 0x01	; 1
    1338:	f1 f7       	brne	.-4      	; 0x1336 <__stack+0x237>
    133a:	fe 01       	movw	r30, r28
    133c:	e5 5f       	subi	r30, 0xF5	; 245
    133e:	fe 4f       	sbci	r31, 0xFE	; 254
    1340:	91 83       	std	Z+1, r25	; 0x01
    1342:	80 83       	st	Z, r24
	}
_delay_ms(10);
}


PORTB=0b11011111; // 주행모터 및 모든 모터 정지
    1344:	e8 e3       	ldi	r30, 0x38	; 56
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	8f ed       	ldi	r24, 0xDF	; 223
    134a:	80 83       	st	Z, r24
printf("k is = %d \r\n" , k);
    134c:	00 d0       	rcall	.+0      	; 0x134e <__stack+0x24f>
    134e:	00 d0       	rcall	.+0      	; 0x1350 <__stack+0x251>
    1350:	ad b7       	in	r26, 0x3d	; 61
    1352:	be b7       	in	r27, 0x3e	; 62
    1354:	11 96       	adiw	r26, 0x01	; 1
    1356:	8e e2       	ldi	r24, 0x2E	; 46
    1358:	91 e0       	ldi	r25, 0x01	; 1
    135a:	11 96       	adiw	r26, 0x01	; 1
    135c:	9c 93       	st	X, r25
    135e:	8e 93       	st	-X, r24
    1360:	fe 01       	movw	r30, r28
    1362:	ef 53       	subi	r30, 0x3F	; 63
    1364:	fe 4f       	sbci	r31, 0xFE	; 254
    1366:	80 81       	ld	r24, Z
    1368:	91 81       	ldd	r25, Z+1	; 0x01
    136a:	13 96       	adiw	r26, 0x03	; 3
    136c:	9c 93       	st	X, r25
    136e:	8e 93       	st	-X, r24
    1370:	12 97       	sbiw	r26, 0x02	; 2
    1372:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <printf>
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	b5 c0       	rjmp	.+362    	; 0x14ea <__stack+0x3eb>
    1380:	fe 01       	movw	r30, r28
    1382:	e9 5f       	subi	r30, 0xF9	; 249
    1384:	fe 4f       	sbci	r31, 0xFE	; 254
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	a0 e2       	ldi	r26, 0x20	; 32
    138c:	b1 e4       	ldi	r27, 0x41	; 65
    138e:	80 83       	st	Z, r24
    1390:	91 83       	std	Z+1, r25	; 0x01
    1392:	a2 83       	std	Z+2, r26	; 0x02
    1394:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1396:	8e 01       	movw	r16, r28
    1398:	0d 5f       	subi	r16, 0xFD	; 253
    139a:	1e 4f       	sbci	r17, 0xFE	; 254
    139c:	fe 01       	movw	r30, r28
    139e:	e9 5f       	subi	r30, 0xF9	; 249
    13a0:	fe 4f       	sbci	r31, 0xFE	; 254
    13a2:	60 81       	ld	r22, Z
    13a4:	71 81       	ldd	r23, Z+1	; 0x01
    13a6:	82 81       	ldd	r24, Z+2	; 0x02
    13a8:	93 81       	ldd	r25, Z+3	; 0x03
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	4a e7       	ldi	r20, 0x7A	; 122
    13b0:	55 e4       	ldi	r21, 0x45	; 69
    13b2:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    13b6:	dc 01       	movw	r26, r24
    13b8:	cb 01       	movw	r24, r22
    13ba:	f8 01       	movw	r30, r16
    13bc:	80 83       	st	Z, r24
    13be:	91 83       	std	Z+1, r25	; 0x01
    13c0:	a2 83       	std	Z+2, r26	; 0x02
    13c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13c4:	fe 01       	movw	r30, r28
    13c6:	ed 5f       	subi	r30, 0xFD	; 253
    13c8:	fe 4f       	sbci	r31, 0xFE	; 254
    13ca:	60 81       	ld	r22, Z
    13cc:	71 81       	ldd	r23, Z+1	; 0x01
    13ce:	82 81       	ldd	r24, Z+2	; 0x02
    13d0:	93 81       	ldd	r25, Z+3	; 0x03
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	40 e8       	ldi	r20, 0x80	; 128
    13d8:	5f e3       	ldi	r21, 0x3F	; 63
    13da:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    13de:	88 23       	and	r24, r24
    13e0:	44 f4       	brge	.+16     	; 0x13f2 <__stack+0x2f3>
		__ticks = 1;
    13e2:	fe 01       	movw	r30, r28
    13e4:	ef 5f       	subi	r30, 0xFF	; 255
    13e6:	fe 4f       	sbci	r31, 0xFE	; 254
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	91 83       	std	Z+1, r25	; 0x01
    13ee:	80 83       	st	Z, r24
    13f0:	64 c0       	rjmp	.+200    	; 0x14ba <__stack+0x3bb>
	else if (__tmp > 65535)
    13f2:	fe 01       	movw	r30, r28
    13f4:	ed 5f       	subi	r30, 0xFD	; 253
    13f6:	fe 4f       	sbci	r31, 0xFE	; 254
    13f8:	60 81       	ld	r22, Z
    13fa:	71 81       	ldd	r23, Z+1	; 0x01
    13fc:	82 81       	ldd	r24, Z+2	; 0x02
    13fe:	93 81       	ldd	r25, Z+3	; 0x03
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	3f ef       	ldi	r19, 0xFF	; 255
    1404:	4f e7       	ldi	r20, 0x7F	; 127
    1406:	57 e4       	ldi	r21, 0x47	; 71
    1408:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    140c:	18 16       	cp	r1, r24
    140e:	0c f0       	brlt	.+2      	; 0x1412 <__stack+0x313>
    1410:	43 c0       	rjmp	.+134    	; 0x1498 <__stack+0x399>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1412:	fe 01       	movw	r30, r28
    1414:	e9 5f       	subi	r30, 0xF9	; 249
    1416:	fe 4f       	sbci	r31, 0xFE	; 254
    1418:	60 81       	ld	r22, Z
    141a:	71 81       	ldd	r23, Z+1	; 0x01
    141c:	82 81       	ldd	r24, Z+2	; 0x02
    141e:	93 81       	ldd	r25, Z+3	; 0x03
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	40 e2       	ldi	r20, 0x20	; 32
    1426:	51 e4       	ldi	r21, 0x41	; 65
    1428:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    142c:	dc 01       	movw	r26, r24
    142e:	cb 01       	movw	r24, r22
    1430:	8e 01       	movw	r16, r28
    1432:	0f 5f       	subi	r16, 0xFF	; 255
    1434:	1e 4f       	sbci	r17, 0xFE	; 254
    1436:	bc 01       	movw	r22, r24
    1438:	cd 01       	movw	r24, r26
    143a:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	f8 01       	movw	r30, r16
    1444:	91 83       	std	Z+1, r25	; 0x01
    1446:	80 83       	st	Z, r24
    1448:	1f c0       	rjmp	.+62     	; 0x1488 <__stack+0x389>
    144a:	fe 01       	movw	r30, r28
    144c:	e1 50       	subi	r30, 0x01	; 1
    144e:	ff 4f       	sbci	r31, 0xFF	; 255
    1450:	80 e9       	ldi	r24, 0x90	; 144
    1452:	91 e0       	ldi	r25, 0x01	; 1
    1454:	91 83       	std	Z+1, r25	; 0x01
    1456:	80 83       	st	Z, r24
    1458:	fe 01       	movw	r30, r28
    145a:	e1 50       	subi	r30, 0x01	; 1
    145c:	ff 4f       	sbci	r31, 0xFF	; 255
    145e:	80 81       	ld	r24, Z
    1460:	91 81       	ldd	r25, Z+1	; 0x01
    1462:	01 97       	sbiw	r24, 0x01	; 1
    1464:	f1 f7       	brne	.-4      	; 0x1462 <__stack+0x363>
    1466:	fe 01       	movw	r30, r28
    1468:	e1 50       	subi	r30, 0x01	; 1
    146a:	ff 4f       	sbci	r31, 0xFF	; 255
    146c:	91 83       	std	Z+1, r25	; 0x01
    146e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1470:	de 01       	movw	r26, r28
    1472:	af 5f       	subi	r26, 0xFF	; 255
    1474:	be 4f       	sbci	r27, 0xFE	; 254
    1476:	fe 01       	movw	r30, r28
    1478:	ef 5f       	subi	r30, 0xFF	; 255
    147a:	fe 4f       	sbci	r31, 0xFE	; 254
    147c:	80 81       	ld	r24, Z
    147e:	91 81       	ldd	r25, Z+1	; 0x01
    1480:	01 97       	sbiw	r24, 0x01	; 1
    1482:	11 96       	adiw	r26, 0x01	; 1
    1484:	9c 93       	st	X, r25
    1486:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1488:	fe 01       	movw	r30, r28
    148a:	ef 5f       	subi	r30, 0xFF	; 255
    148c:	fe 4f       	sbci	r31, 0xFE	; 254
    148e:	80 81       	ld	r24, Z
    1490:	91 81       	ldd	r25, Z+1	; 0x01
    1492:	00 97       	sbiw	r24, 0x00	; 0
    1494:	d1 f6       	brne	.-76     	; 0x144a <__stack+0x34b>
    1496:	bb cd       	rjmp	.-1162   	; 0x100e <main+0xf40>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1498:	8e 01       	movw	r16, r28
    149a:	0f 5f       	subi	r16, 0xFF	; 255
    149c:	1e 4f       	sbci	r17, 0xFE	; 254
    149e:	fe 01       	movw	r30, r28
    14a0:	ed 5f       	subi	r30, 0xFD	; 253
    14a2:	fe 4f       	sbci	r31, 0xFE	; 254
    14a4:	60 81       	ld	r22, Z
    14a6:	71 81       	ldd	r23, Z+1	; 0x01
    14a8:	82 81       	ldd	r24, Z+2	; 0x02
    14aa:	93 81       	ldd	r25, Z+3	; 0x03
    14ac:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	f8 01       	movw	r30, r16
    14b6:	91 83       	std	Z+1, r25	; 0x01
    14b8:	80 83       	st	Z, r24
    14ba:	de 01       	movw	r26, r28
    14bc:	a3 50       	subi	r26, 0x03	; 3
    14be:	bf 4f       	sbci	r27, 0xFF	; 255
    14c0:	fe 01       	movw	r30, r28
    14c2:	ef 5f       	subi	r30, 0xFF	; 255
    14c4:	fe 4f       	sbci	r31, 0xFE	; 254
    14c6:	80 81       	ld	r24, Z
    14c8:	91 81       	ldd	r25, Z+1	; 0x01
    14ca:	11 96       	adiw	r26, 0x01	; 1
    14cc:	9c 93       	st	X, r25
    14ce:	8e 93       	st	-X, r24
    14d0:	fe 01       	movw	r30, r28
    14d2:	e3 50       	subi	r30, 0x03	; 3
    14d4:	ff 4f       	sbci	r31, 0xFF	; 255
    14d6:	80 81       	ld	r24, Z
    14d8:	91 81       	ldd	r25, Z+1	; 0x01
    14da:	01 97       	sbiw	r24, 0x01	; 1
    14dc:	f1 f7       	brne	.-4      	; 0x14da <__stack+0x3db>
    14de:	fe 01       	movw	r30, r28
    14e0:	e3 50       	subi	r30, 0x03	; 3
    14e2:	ff 4f       	sbci	r31, 0xFF	; 255
    14e4:	91 83       	std	Z+1, r25	; 0x01
    14e6:	80 83       	st	Z, r24
    14e8:	92 cd       	rjmp	.-1244   	; 0x100e <main+0xf40>
// 크레인 원상복귀 시작
while(1)

{ 

          OCR1B=A_P;
    14ea:	a8 e4       	ldi	r26, 0x48	; 72
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	fe 01       	movw	r30, r28
    14f0:	e7 55       	subi	r30, 0x57	; 87
    14f2:	fe 4f       	sbci	r31, 0xFE	; 254
    14f4:	80 81       	ld	r24, Z
    14f6:	91 81       	ldd	r25, Z+1	; 0x01
    14f8:	11 96       	adiw	r26, 0x01	; 1
    14fa:	9c 93       	st	X, r25
    14fc:	8e 93       	st	-X, r24

 	if (A_P>385)
    14fe:	fe 01       	movw	r30, r28
    1500:	e7 55       	subi	r30, 0x57	; 87
    1502:	fe 4f       	sbci	r31, 0xFE	; 254
    1504:	80 81       	ld	r24, Z
    1506:	91 81       	ldd	r25, Z+1	; 0x01
    1508:	f1 e0       	ldi	r31, 0x01	; 1
    150a:	82 38       	cpi	r24, 0x82	; 130
    150c:	9f 07       	cpc	r25, r31
    150e:	08 f0       	brcs	.+2      	; 0x1512 <__stack+0x413>
    1510:	c0 c0       	rjmp	.+384    	; 0x1692 <__stack+0x593>

	  break;


 	}	
		A_P=A_P+5;
    1512:	de 01       	movw	r26, r28
    1514:	a7 55       	subi	r26, 0x57	; 87
    1516:	be 4f       	sbci	r27, 0xFE	; 254
    1518:	fe 01       	movw	r30, r28
    151a:	e7 55       	subi	r30, 0x57	; 87
    151c:	fe 4f       	sbci	r31, 0xFE	; 254
    151e:	80 81       	ld	r24, Z
    1520:	91 81       	ldd	r25, Z+1	; 0x01
    1522:	05 96       	adiw	r24, 0x05	; 5
    1524:	8d 93       	st	X+, r24
    1526:	9c 93       	st	X, r25
    1528:	fe 01       	movw	r30, r28
    152a:	e7 50       	subi	r30, 0x07	; 7
    152c:	ff 4f       	sbci	r31, 0xFF	; 255
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	aa ef       	ldi	r26, 0xFA	; 250
    1534:	b3 e4       	ldi	r27, 0x43	; 67
    1536:	80 83       	st	Z, r24
    1538:	91 83       	std	Z+1, r25	; 0x01
    153a:	a2 83       	std	Z+2, r26	; 0x02
    153c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    153e:	8e 01       	movw	r16, r28
    1540:	0b 50       	subi	r16, 0x0B	; 11
    1542:	1f 4f       	sbci	r17, 0xFF	; 255
    1544:	fe 01       	movw	r30, r28
    1546:	e7 50       	subi	r30, 0x07	; 7
    1548:	ff 4f       	sbci	r31, 0xFF	; 255
    154a:	60 81       	ld	r22, Z
    154c:	71 81       	ldd	r23, Z+1	; 0x01
    154e:	82 81       	ldd	r24, Z+2	; 0x02
    1550:	93 81       	ldd	r25, Z+3	; 0x03
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	4a e7       	ldi	r20, 0x7A	; 122
    1558:	55 e4       	ldi	r21, 0x45	; 69
    155a:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	f8 01       	movw	r30, r16
    1564:	80 83       	st	Z, r24
    1566:	91 83       	std	Z+1, r25	; 0x01
    1568:	a2 83       	std	Z+2, r26	; 0x02
    156a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    156c:	fe 01       	movw	r30, r28
    156e:	eb 50       	subi	r30, 0x0B	; 11
    1570:	ff 4f       	sbci	r31, 0xFF	; 255
    1572:	60 81       	ld	r22, Z
    1574:	71 81       	ldd	r23, Z+1	; 0x01
    1576:	82 81       	ldd	r24, Z+2	; 0x02
    1578:	93 81       	ldd	r25, Z+3	; 0x03
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	40 e8       	ldi	r20, 0x80	; 128
    1580:	5f e3       	ldi	r21, 0x3F	; 63
    1582:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    1586:	88 23       	and	r24, r24
    1588:	44 f4       	brge	.+16     	; 0x159a <__stack+0x49b>
		__ticks = 1;
    158a:	fe 01       	movw	r30, r28
    158c:	ed 50       	subi	r30, 0x0D	; 13
    158e:	ff 4f       	sbci	r31, 0xFF	; 255
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	91 83       	std	Z+1, r25	; 0x01
    1596:	80 83       	st	Z, r24
    1598:	64 c0       	rjmp	.+200    	; 0x1662 <__stack+0x563>
	else if (__tmp > 65535)
    159a:	fe 01       	movw	r30, r28
    159c:	eb 50       	subi	r30, 0x0B	; 11
    159e:	ff 4f       	sbci	r31, 0xFF	; 255
    15a0:	60 81       	ld	r22, Z
    15a2:	71 81       	ldd	r23, Z+1	; 0x01
    15a4:	82 81       	ldd	r24, Z+2	; 0x02
    15a6:	93 81       	ldd	r25, Z+3	; 0x03
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	3f ef       	ldi	r19, 0xFF	; 255
    15ac:	4f e7       	ldi	r20, 0x7F	; 127
    15ae:	57 e4       	ldi	r21, 0x47	; 71
    15b0:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    15b4:	18 16       	cp	r1, r24
    15b6:	0c f0       	brlt	.+2      	; 0x15ba <__stack+0x4bb>
    15b8:	43 c0       	rjmp	.+134    	; 0x1640 <__stack+0x541>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ba:	fe 01       	movw	r30, r28
    15bc:	e7 50       	subi	r30, 0x07	; 7
    15be:	ff 4f       	sbci	r31, 0xFF	; 255
    15c0:	60 81       	ld	r22, Z
    15c2:	71 81       	ldd	r23, Z+1	; 0x01
    15c4:	82 81       	ldd	r24, Z+2	; 0x02
    15c6:	93 81       	ldd	r25, Z+3	; 0x03
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	40 e2       	ldi	r20, 0x20	; 32
    15ce:	51 e4       	ldi	r21, 0x41	; 65
    15d0:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	8e 01       	movw	r16, r28
    15da:	0d 50       	subi	r16, 0x0D	; 13
    15dc:	1f 4f       	sbci	r17, 0xFF	; 255
    15de:	bc 01       	movw	r22, r24
    15e0:	cd 01       	movw	r24, r26
    15e2:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    15e6:	dc 01       	movw	r26, r24
    15e8:	cb 01       	movw	r24, r22
    15ea:	f8 01       	movw	r30, r16
    15ec:	91 83       	std	Z+1, r25	; 0x01
    15ee:	80 83       	st	Z, r24
    15f0:	1f c0       	rjmp	.+62     	; 0x1630 <__stack+0x531>
    15f2:	fe 01       	movw	r30, r28
    15f4:	ef 50       	subi	r30, 0x0F	; 15
    15f6:	ff 4f       	sbci	r31, 0xFF	; 255
    15f8:	80 e9       	ldi	r24, 0x90	; 144
    15fa:	91 e0       	ldi	r25, 0x01	; 1
    15fc:	91 83       	std	Z+1, r25	; 0x01
    15fe:	80 83       	st	Z, r24
    1600:	fe 01       	movw	r30, r28
    1602:	ef 50       	subi	r30, 0x0F	; 15
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	80 81       	ld	r24, Z
    1608:	91 81       	ldd	r25, Z+1	; 0x01
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	f1 f7       	brne	.-4      	; 0x160a <__stack+0x50b>
    160e:	fe 01       	movw	r30, r28
    1610:	ef 50       	subi	r30, 0x0F	; 15
    1612:	ff 4f       	sbci	r31, 0xFF	; 255
    1614:	91 83       	std	Z+1, r25	; 0x01
    1616:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1618:	de 01       	movw	r26, r28
    161a:	ad 50       	subi	r26, 0x0D	; 13
    161c:	bf 4f       	sbci	r27, 0xFF	; 255
    161e:	fe 01       	movw	r30, r28
    1620:	ed 50       	subi	r30, 0x0D	; 13
    1622:	ff 4f       	sbci	r31, 0xFF	; 255
    1624:	80 81       	ld	r24, Z
    1626:	91 81       	ldd	r25, Z+1	; 0x01
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	11 96       	adiw	r26, 0x01	; 1
    162c:	9c 93       	st	X, r25
    162e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1630:	fe 01       	movw	r30, r28
    1632:	ed 50       	subi	r30, 0x0D	; 13
    1634:	ff 4f       	sbci	r31, 0xFF	; 255
    1636:	80 81       	ld	r24, Z
    1638:	91 81       	ldd	r25, Z+1	; 0x01
    163a:	00 97       	sbiw	r24, 0x00	; 0
    163c:	d1 f6       	brne	.-76     	; 0x15f2 <__stack+0x4f3>
    163e:	55 cf       	rjmp	.-342    	; 0x14ea <__stack+0x3eb>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1640:	8e 01       	movw	r16, r28
    1642:	0d 50       	subi	r16, 0x0D	; 13
    1644:	1f 4f       	sbci	r17, 0xFF	; 255
    1646:	fe 01       	movw	r30, r28
    1648:	eb 50       	subi	r30, 0x0B	; 11
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	60 81       	ld	r22, Z
    164e:	71 81       	ldd	r23, Z+1	; 0x01
    1650:	82 81       	ldd	r24, Z+2	; 0x02
    1652:	93 81       	ldd	r25, Z+3	; 0x03
    1654:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	f8 01       	movw	r30, r16
    165e:	91 83       	std	Z+1, r25	; 0x01
    1660:	80 83       	st	Z, r24
    1662:	de 01       	movw	r26, r28
    1664:	a1 51       	subi	r26, 0x11	; 17
    1666:	bf 4f       	sbci	r27, 0xFF	; 255
    1668:	fe 01       	movw	r30, r28
    166a:	ed 50       	subi	r30, 0x0D	; 13
    166c:	ff 4f       	sbci	r31, 0xFF	; 255
    166e:	80 81       	ld	r24, Z
    1670:	91 81       	ldd	r25, Z+1	; 0x01
    1672:	11 96       	adiw	r26, 0x01	; 1
    1674:	9c 93       	st	X, r25
    1676:	8e 93       	st	-X, r24
    1678:	fe 01       	movw	r30, r28
    167a:	e1 51       	subi	r30, 0x11	; 17
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	80 81       	ld	r24, Z
    1680:	91 81       	ldd	r25, Z+1	; 0x01
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	f1 f7       	brne	.-4      	; 0x1682 <__stack+0x583>
    1686:	fe 01       	movw	r30, r28
    1688:	e1 51       	subi	r30, 0x11	; 17
    168a:	ff 4f       	sbci	r31, 0xFF	; 255
    168c:	91 83       	std	Z+1, r25	; 0x01
    168e:	80 83       	st	Z, r24
    1690:	2c cf       	rjmp	.-424    	; 0x14ea <__stack+0x3eb>
		  _delay_ms(500);

}
    1692:	fe 01       	movw	r30, r28
    1694:	e5 51       	subi	r30, 0x15	; 21
    1696:	ff 4f       	sbci	r31, 0xFF	; 255
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	aa ef       	ldi	r26, 0xFA	; 250
    169e:	b4 e4       	ldi	r27, 0x44	; 68
    16a0:	80 83       	st	Z, r24
    16a2:	91 83       	std	Z+1, r25	; 0x01
    16a4:	a2 83       	std	Z+2, r26	; 0x02
    16a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a8:	8e 01       	movw	r16, r28
    16aa:	09 51       	subi	r16, 0x19	; 25
    16ac:	1f 4f       	sbci	r17, 0xFF	; 255
    16ae:	fe 01       	movw	r30, r28
    16b0:	e5 51       	subi	r30, 0x15	; 21
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	60 81       	ld	r22, Z
    16b6:	71 81       	ldd	r23, Z+1	; 0x01
    16b8:	82 81       	ldd	r24, Z+2	; 0x02
    16ba:	93 81       	ldd	r25, Z+3	; 0x03
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	4a e7       	ldi	r20, 0x7A	; 122
    16c2:	55 e4       	ldi	r21, 0x45	; 69
    16c4:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	f8 01       	movw	r30, r16
    16ce:	80 83       	st	Z, r24
    16d0:	91 83       	std	Z+1, r25	; 0x01
    16d2:	a2 83       	std	Z+2, r26	; 0x02
    16d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16d6:	fe 01       	movw	r30, r28
    16d8:	e9 51       	subi	r30, 0x19	; 25
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	60 81       	ld	r22, Z
    16de:	71 81       	ldd	r23, Z+1	; 0x01
    16e0:	82 81       	ldd	r24, Z+2	; 0x02
    16e2:	93 81       	ldd	r25, Z+3	; 0x03
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	40 e8       	ldi	r20, 0x80	; 128
    16ea:	5f e3       	ldi	r21, 0x3F	; 63
    16ec:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    16f0:	88 23       	and	r24, r24
    16f2:	44 f4       	brge	.+16     	; 0x1704 <__stack+0x605>
		__ticks = 1;
    16f4:	fe 01       	movw	r30, r28
    16f6:	eb 51       	subi	r30, 0x1B	; 27
    16f8:	ff 4f       	sbci	r31, 0xFF	; 255
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	91 83       	std	Z+1, r25	; 0x01
    1700:	80 83       	st	Z, r24
    1702:	64 c0       	rjmp	.+200    	; 0x17cc <__stack+0x6cd>
	else if (__tmp > 65535)
    1704:	fe 01       	movw	r30, r28
    1706:	e9 51       	subi	r30, 0x19	; 25
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	60 81       	ld	r22, Z
    170c:	71 81       	ldd	r23, Z+1	; 0x01
    170e:	82 81       	ldd	r24, Z+2	; 0x02
    1710:	93 81       	ldd	r25, Z+3	; 0x03
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	3f ef       	ldi	r19, 0xFF	; 255
    1716:	4f e7       	ldi	r20, 0x7F	; 127
    1718:	57 e4       	ldi	r21, 0x47	; 71
    171a:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    171e:	18 16       	cp	r1, r24
    1720:	0c f0       	brlt	.+2      	; 0x1724 <__stack+0x625>
    1722:	43 c0       	rjmp	.+134    	; 0x17aa <__stack+0x6ab>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1724:	fe 01       	movw	r30, r28
    1726:	e5 51       	subi	r30, 0x15	; 21
    1728:	ff 4f       	sbci	r31, 0xFF	; 255
    172a:	60 81       	ld	r22, Z
    172c:	71 81       	ldd	r23, Z+1	; 0x01
    172e:	82 81       	ldd	r24, Z+2	; 0x02
    1730:	93 81       	ldd	r25, Z+3	; 0x03
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	40 e2       	ldi	r20, 0x20	; 32
    1738:	51 e4       	ldi	r21, 0x41	; 65
    173a:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	8e 01       	movw	r16, r28
    1744:	0b 51       	subi	r16, 0x1B	; 27
    1746:	1f 4f       	sbci	r17, 0xFF	; 255
    1748:	bc 01       	movw	r22, r24
    174a:	cd 01       	movw	r24, r26
    174c:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	f8 01       	movw	r30, r16
    1756:	91 83       	std	Z+1, r25	; 0x01
    1758:	80 83       	st	Z, r24
    175a:	1f c0       	rjmp	.+62     	; 0x179a <__stack+0x69b>
    175c:	fe 01       	movw	r30, r28
    175e:	ed 51       	subi	r30, 0x1D	; 29
    1760:	ff 4f       	sbci	r31, 0xFF	; 255
    1762:	80 e9       	ldi	r24, 0x90	; 144
    1764:	91 e0       	ldi	r25, 0x01	; 1
    1766:	91 83       	std	Z+1, r25	; 0x01
    1768:	80 83       	st	Z, r24
    176a:	fe 01       	movw	r30, r28
    176c:	ed 51       	subi	r30, 0x1D	; 29
    176e:	ff 4f       	sbci	r31, 0xFF	; 255
    1770:	80 81       	ld	r24, Z
    1772:	91 81       	ldd	r25, Z+1	; 0x01
    1774:	01 97       	sbiw	r24, 0x01	; 1
    1776:	f1 f7       	brne	.-4      	; 0x1774 <__stack+0x675>
    1778:	fe 01       	movw	r30, r28
    177a:	ed 51       	subi	r30, 0x1D	; 29
    177c:	ff 4f       	sbci	r31, 0xFF	; 255
    177e:	91 83       	std	Z+1, r25	; 0x01
    1780:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1782:	de 01       	movw	r26, r28
    1784:	ab 51       	subi	r26, 0x1B	; 27
    1786:	bf 4f       	sbci	r27, 0xFF	; 255
    1788:	fe 01       	movw	r30, r28
    178a:	eb 51       	subi	r30, 0x1B	; 27
    178c:	ff 4f       	sbci	r31, 0xFF	; 255
    178e:	80 81       	ld	r24, Z
    1790:	91 81       	ldd	r25, Z+1	; 0x01
    1792:	01 97       	sbiw	r24, 0x01	; 1
    1794:	11 96       	adiw	r26, 0x01	; 1
    1796:	9c 93       	st	X, r25
    1798:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    179a:	fe 01       	movw	r30, r28
    179c:	eb 51       	subi	r30, 0x1B	; 27
    179e:	ff 4f       	sbci	r31, 0xFF	; 255
    17a0:	80 81       	ld	r24, Z
    17a2:	91 81       	ldd	r25, Z+1	; 0x01
    17a4:	00 97       	sbiw	r24, 0x00	; 0
    17a6:	d1 f6       	brne	.-76     	; 0x175c <__stack+0x65d>
    17a8:	27 c0       	rjmp	.+78     	; 0x17f8 <__stack+0x6f9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17aa:	8e 01       	movw	r16, r28
    17ac:	0b 51       	subi	r16, 0x1B	; 27
    17ae:	1f 4f       	sbci	r17, 0xFF	; 255
    17b0:	fe 01       	movw	r30, r28
    17b2:	e9 51       	subi	r30, 0x19	; 25
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	60 81       	ld	r22, Z
    17b8:	71 81       	ldd	r23, Z+1	; 0x01
    17ba:	82 81       	ldd	r24, Z+2	; 0x02
    17bc:	93 81       	ldd	r25, Z+3	; 0x03
    17be:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    17c2:	dc 01       	movw	r26, r24
    17c4:	cb 01       	movw	r24, r22
    17c6:	f8 01       	movw	r30, r16
    17c8:	91 83       	std	Z+1, r25	; 0x01
    17ca:	80 83       	st	Z, r24
    17cc:	de 01       	movw	r26, r28
    17ce:	af 51       	subi	r26, 0x1F	; 31
    17d0:	bf 4f       	sbci	r27, 0xFF	; 255
    17d2:	fe 01       	movw	r30, r28
    17d4:	eb 51       	subi	r30, 0x1B	; 27
    17d6:	ff 4f       	sbci	r31, 0xFF	; 255
    17d8:	80 81       	ld	r24, Z
    17da:	91 81       	ldd	r25, Z+1	; 0x01
    17dc:	8d 93       	st	X+, r24
    17de:	9c 93       	st	X, r25
    17e0:	fe 01       	movw	r30, r28
    17e2:	ef 51       	subi	r30, 0x1F	; 31
    17e4:	ff 4f       	sbci	r31, 0xFF	; 255
    17e6:	80 81       	ld	r24, Z
    17e8:	91 81       	ldd	r25, Z+1	; 0x01
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	f1 f7       	brne	.-4      	; 0x17ea <__stack+0x6eb>
    17ee:	fe 01       	movw	r30, r28
    17f0:	ef 51       	subi	r30, 0x1F	; 31
    17f2:	ff 4f       	sbci	r31, 0xFF	; 255
    17f4:	91 83       	std	Z+1, r25	; 0x01
    17f6:	80 83       	st	Z, r24

// 크레인 원상복귀 끝

//moveslow2(); // 크레인 천천히 원상복귀 하기
 _delay_ms(2000);
s=1; // 짐 있음
    17f8:	fe 01       	movw	r30, r28
    17fa:	e3 54       	subi	r30, 0x43	; 67
    17fc:	fe 4f       	sbci	r31, 0xFE	; 254
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	91 83       	std	Z+1, r25	; 0x01
    1804:	80 83       	st	Z, r24


PORTB = 0b00110000; // 01 전진 기본 설정
    1806:	e8 e3       	ldi	r30, 0x38	; 56
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 e3       	ldi	r24, 0x30	; 48
    180c:	80 83       	st	Z, r24
PORTC = 0b10000000;  //PC7사용
    180e:	e5 e3       	ldi	r30, 0x35	; 53
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 e8       	ldi	r24, 0x80	; 128
    1814:	80 83       	st	Z, r24
OCR0=52; // 차량 출발 
    1816:	e1 e5       	ldi	r30, 0x51	; 81
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	84 e3       	ldi	r24, 0x34	; 52
    181c:	80 83       	st	Z, r24
    181e:	fe 01       	movw	r30, r28
    1820:	e3 52       	subi	r30, 0x23	; 35
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	aa e7       	ldi	r26, 0x7A	; 122
    182a:	b4 e4       	ldi	r27, 0x44	; 68
    182c:	80 83       	st	Z, r24
    182e:	91 83       	std	Z+1, r25	; 0x01
    1830:	a2 83       	std	Z+2, r26	; 0x02
    1832:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1834:	8e 01       	movw	r16, r28
    1836:	07 52       	subi	r16, 0x27	; 39
    1838:	1f 4f       	sbci	r17, 0xFF	; 255
    183a:	fe 01       	movw	r30, r28
    183c:	e3 52       	subi	r30, 0x23	; 35
    183e:	ff 4f       	sbci	r31, 0xFF	; 255
    1840:	60 81       	ld	r22, Z
    1842:	71 81       	ldd	r23, Z+1	; 0x01
    1844:	82 81       	ldd	r24, Z+2	; 0x02
    1846:	93 81       	ldd	r25, Z+3	; 0x03
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	4a e7       	ldi	r20, 0x7A	; 122
    184e:	55 e4       	ldi	r21, 0x45	; 69
    1850:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	f8 01       	movw	r30, r16
    185a:	80 83       	st	Z, r24
    185c:	91 83       	std	Z+1, r25	; 0x01
    185e:	a2 83       	std	Z+2, r26	; 0x02
    1860:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1862:	fe 01       	movw	r30, r28
    1864:	e7 52       	subi	r30, 0x27	; 39
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	60 81       	ld	r22, Z
    186a:	71 81       	ldd	r23, Z+1	; 0x01
    186c:	82 81       	ldd	r24, Z+2	; 0x02
    186e:	93 81       	ldd	r25, Z+3	; 0x03
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	40 e8       	ldi	r20, 0x80	; 128
    1876:	5f e3       	ldi	r21, 0x3F	; 63
    1878:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    187c:	88 23       	and	r24, r24
    187e:	44 f4       	brge	.+16     	; 0x1890 <__stack+0x791>
		__ticks = 1;
    1880:	fe 01       	movw	r30, r28
    1882:	e9 52       	subi	r30, 0x29	; 41
    1884:	ff 4f       	sbci	r31, 0xFF	; 255
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	91 83       	std	Z+1, r25	; 0x01
    188c:	80 83       	st	Z, r24
    188e:	64 c0       	rjmp	.+200    	; 0x1958 <__stack+0x859>
	else if (__tmp > 65535)
    1890:	fe 01       	movw	r30, r28
    1892:	e7 52       	subi	r30, 0x27	; 39
    1894:	ff 4f       	sbci	r31, 0xFF	; 255
    1896:	60 81       	ld	r22, Z
    1898:	71 81       	ldd	r23, Z+1	; 0x01
    189a:	82 81       	ldd	r24, Z+2	; 0x02
    189c:	93 81       	ldd	r25, Z+3	; 0x03
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	3f ef       	ldi	r19, 0xFF	; 255
    18a2:	4f e7       	ldi	r20, 0x7F	; 127
    18a4:	57 e4       	ldi	r21, 0x47	; 71
    18a6:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    18aa:	18 16       	cp	r1, r24
    18ac:	0c f0       	brlt	.+2      	; 0x18b0 <__stack+0x7b1>
    18ae:	43 c0       	rjmp	.+134    	; 0x1936 <__stack+0x837>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b0:	fe 01       	movw	r30, r28
    18b2:	e3 52       	subi	r30, 0x23	; 35
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	60 81       	ld	r22, Z
    18b8:	71 81       	ldd	r23, Z+1	; 0x01
    18ba:	82 81       	ldd	r24, Z+2	; 0x02
    18bc:	93 81       	ldd	r25, Z+3	; 0x03
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e2       	ldi	r20, 0x20	; 32
    18c4:	51 e4       	ldi	r21, 0x41	; 65
    18c6:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	8e 01       	movw	r16, r28
    18d0:	09 52       	subi	r16, 0x29	; 41
    18d2:	1f 4f       	sbci	r17, 0xFF	; 255
    18d4:	bc 01       	movw	r22, r24
    18d6:	cd 01       	movw	r24, r26
    18d8:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	f8 01       	movw	r30, r16
    18e2:	91 83       	std	Z+1, r25	; 0x01
    18e4:	80 83       	st	Z, r24
    18e6:	1f c0       	rjmp	.+62     	; 0x1926 <__stack+0x827>
    18e8:	fe 01       	movw	r30, r28
    18ea:	eb 52       	subi	r30, 0x2B	; 43
    18ec:	ff 4f       	sbci	r31, 0xFF	; 255
    18ee:	80 e9       	ldi	r24, 0x90	; 144
    18f0:	91 e0       	ldi	r25, 0x01	; 1
    18f2:	91 83       	std	Z+1, r25	; 0x01
    18f4:	80 83       	st	Z, r24
    18f6:	fe 01       	movw	r30, r28
    18f8:	eb 52       	subi	r30, 0x2B	; 43
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	80 81       	ld	r24, Z
    18fe:	91 81       	ldd	r25, Z+1	; 0x01
    1900:	01 97       	sbiw	r24, 0x01	; 1
    1902:	f1 f7       	brne	.-4      	; 0x1900 <__stack+0x801>
    1904:	fe 01       	movw	r30, r28
    1906:	eb 52       	subi	r30, 0x2B	; 43
    1908:	ff 4f       	sbci	r31, 0xFF	; 255
    190a:	91 83       	std	Z+1, r25	; 0x01
    190c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    190e:	de 01       	movw	r26, r28
    1910:	a9 52       	subi	r26, 0x29	; 41
    1912:	bf 4f       	sbci	r27, 0xFF	; 255
    1914:	fe 01       	movw	r30, r28
    1916:	e9 52       	subi	r30, 0x29	; 41
    1918:	ff 4f       	sbci	r31, 0xFF	; 255
    191a:	80 81       	ld	r24, Z
    191c:	91 81       	ldd	r25, Z+1	; 0x01
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	11 96       	adiw	r26, 0x01	; 1
    1922:	9c 93       	st	X, r25
    1924:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1926:	fe 01       	movw	r30, r28
    1928:	e9 52       	subi	r30, 0x29	; 41
    192a:	ff 4f       	sbci	r31, 0xFF	; 255
    192c:	80 81       	ld	r24, Z
    192e:	91 81       	ldd	r25, Z+1	; 0x01
    1930:	00 97       	sbiw	r24, 0x00	; 0
    1932:	d1 f6       	brne	.-76     	; 0x18e8 <__stack+0x7e9>
    1934:	28 c0       	rjmp	.+80     	; 0x1986 <__stack+0x887>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1936:	8e 01       	movw	r16, r28
    1938:	09 52       	subi	r16, 0x29	; 41
    193a:	1f 4f       	sbci	r17, 0xFF	; 255
    193c:	fe 01       	movw	r30, r28
    193e:	e7 52       	subi	r30, 0x27	; 39
    1940:	ff 4f       	sbci	r31, 0xFF	; 255
    1942:	60 81       	ld	r22, Z
    1944:	71 81       	ldd	r23, Z+1	; 0x01
    1946:	82 81       	ldd	r24, Z+2	; 0x02
    1948:	93 81       	ldd	r25, Z+3	; 0x03
    194a:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	f8 01       	movw	r30, r16
    1954:	91 83       	std	Z+1, r25	; 0x01
    1956:	80 83       	st	Z, r24
    1958:	de 01       	movw	r26, r28
    195a:	ad 52       	subi	r26, 0x2D	; 45
    195c:	bf 4f       	sbci	r27, 0xFF	; 255
    195e:	fe 01       	movw	r30, r28
    1960:	e9 52       	subi	r30, 0x29	; 41
    1962:	ff 4f       	sbci	r31, 0xFF	; 255
    1964:	80 81       	ld	r24, Z
    1966:	91 81       	ldd	r25, Z+1	; 0x01
    1968:	11 96       	adiw	r26, 0x01	; 1
    196a:	9c 93       	st	X, r25
    196c:	8e 93       	st	-X, r24
    196e:	fe 01       	movw	r30, r28
    1970:	ed 52       	subi	r30, 0x2D	; 45
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	80 81       	ld	r24, Z
    1976:	91 81       	ldd	r25, Z+1	; 0x01
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	f1 f7       	brne	.-4      	; 0x1978 <__stack+0x879>
    197c:	fe 01       	movw	r30, r28
    197e:	ed 52       	subi	r30, 0x2D	; 45
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	91 83       	std	Z+1, r25	; 0x01
    1984:	80 83       	st	Z, r24
_delay_ms(1000);
a=1;
    1986:	fe 01       	movw	r30, r28
    1988:	e9 54       	subi	r30, 0x49	; 73
    198a:	fe 4f       	sbci	r31, 0xFE	; 254
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	91 83       	std	Z+1, r25	; 0x01
    1992:	80 83       	st	Z, r24

}  // 짐올리기 끝

if( (!(PINA & (1 << PINA7)))  && s == 1)// 짐 있을때
    1994:	e9 e3       	ldi	r30, 0x39	; 57
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	88 23       	and	r24, r24
    199c:	0c f4       	brge	.+2      	; 0x19a0 <__stack+0x8a1>
    199e:	22 c7       	rjmp	.+3652   	; 0x27e4 <__stack+0x16e5>
    19a0:	fe 01       	movw	r30, r28
    19a2:	e3 54       	subi	r30, 0x43	; 67
    19a4:	fe 4f       	sbci	r31, 0xFE	; 254
    19a6:	80 81       	ld	r24, Z
    19a8:	91 81       	ldd	r25, Z+1	; 0x01
    19aa:	81 30       	cpi	r24, 0x01	; 1
    19ac:	91 05       	cpc	r25, r1
    19ae:	09 f0       	breq	.+2      	; 0x19b2 <__stack+0x8b3>
    19b0:	19 c7       	rjmp	.+3634   	; 0x27e4 <__stack+0x16e5>
{

DDRA=0b00000001; // 전자석 잡고 있기
    19b2:	ea e3       	ldi	r30, 0x3A	; 58
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	80 83       	st	Z, r24
PORTA=0b00000001; // 전자석 잡고 있기 
    19ba:	eb e3       	ldi	r30, 0x3B	; 59
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	80 83       	st	Z, r24
OCR0=0; // 주행모터 정지
    19c2:	e1 e5       	ldi	r30, 0x51	; 81
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	10 82       	st	Z, r1
PORTB=0b11011111; // 주행모터 및 모든 모터 정지
    19c8:	e8 e3       	ldi	r30, 0x38	; 56
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	8f ed       	ldi	r24, 0xDF	; 223
    19ce:	80 83       	st	Z, r24
f=k;
    19d0:	de 01       	movw	r26, r28
    19d2:	a7 54       	subi	r26, 0x47	; 71
    19d4:	be 4f       	sbci	r27, 0xFE	; 254
    19d6:	fe 01       	movw	r30, r28
    19d8:	ef 53       	subi	r30, 0x3F	; 63
    19da:	fe 4f       	sbci	r31, 0xFE	; 254
    19dc:	80 81       	ld	r24, Z
    19de:	91 81       	ldd	r25, Z+1	; 0x01
    19e0:	8d 93       	st	X+, r24
    19e2:	9c 93       	st	X, r25
r=k;
    19e4:	de 01       	movw	r26, r28
    19e6:	a5 54       	subi	r26, 0x45	; 69
    19e8:	be 4f       	sbci	r27, 0xFE	; 254
    19ea:	fe 01       	movw	r30, r28
    19ec:	ef 53       	subi	r30, 0x3F	; 63
    19ee:	fe 4f       	sbci	r31, 0xFE	; 254
    19f0:	80 81       	ld	r24, Z
    19f2:	91 81       	ldd	r25, Z+1	; 0x01
    19f4:	8d 93       	st	X+, r24
    19f6:	9c 93       	st	X, r25
moveslow1(); // 크레인 -90도로 천천히 돌리기
    19f8:	0e 94 38 20 	call	0x4070	; 0x4070 <moveslow1>
    19fc:	fe 01       	movw	r30, r28
    19fe:	e1 53       	subi	r30, 0x31	; 49
    1a00:	ff 4f       	sbci	r31, 0xFF	; 255
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	aa ef       	ldi	r26, 0xFA	; 250
    1a08:	b4 e4       	ldi	r27, 0x44	; 68
    1a0a:	80 83       	st	Z, r24
    1a0c:	91 83       	std	Z+1, r25	; 0x01
    1a0e:	a2 83       	std	Z+2, r26	; 0x02
    1a10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a12:	8e 01       	movw	r16, r28
    1a14:	05 53       	subi	r16, 0x35	; 53
    1a16:	1f 4f       	sbci	r17, 0xFF	; 255
    1a18:	fe 01       	movw	r30, r28
    1a1a:	e1 53       	subi	r30, 0x31	; 49
    1a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1e:	60 81       	ld	r22, Z
    1a20:	71 81       	ldd	r23, Z+1	; 0x01
    1a22:	82 81       	ldd	r24, Z+2	; 0x02
    1a24:	93 81       	ldd	r25, Z+3	; 0x03
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	4a e7       	ldi	r20, 0x7A	; 122
    1a2c:	55 e4       	ldi	r21, 0x45	; 69
    1a2e:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	f8 01       	movw	r30, r16
    1a38:	80 83       	st	Z, r24
    1a3a:	91 83       	std	Z+1, r25	; 0x01
    1a3c:	a2 83       	std	Z+2, r26	; 0x02
    1a3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a40:	fe 01       	movw	r30, r28
    1a42:	e5 53       	subi	r30, 0x35	; 53
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	60 81       	ld	r22, Z
    1a48:	71 81       	ldd	r23, Z+1	; 0x01
    1a4a:	82 81       	ldd	r24, Z+2	; 0x02
    1a4c:	93 81       	ldd	r25, Z+3	; 0x03
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e8       	ldi	r20, 0x80	; 128
    1a54:	5f e3       	ldi	r21, 0x3F	; 63
    1a56:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    1a5a:	88 23       	and	r24, r24
    1a5c:	44 f4       	brge	.+16     	; 0x1a6e <__stack+0x96f>
		__ticks = 1;
    1a5e:	fe 01       	movw	r30, r28
    1a60:	e7 53       	subi	r30, 0x37	; 55
    1a62:	ff 4f       	sbci	r31, 0xFF	; 255
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	91 83       	std	Z+1, r25	; 0x01
    1a6a:	80 83       	st	Z, r24
    1a6c:	64 c0       	rjmp	.+200    	; 0x1b36 <__stack+0xa37>
	else if (__tmp > 65535)
    1a6e:	fe 01       	movw	r30, r28
    1a70:	e5 53       	subi	r30, 0x35	; 53
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	60 81       	ld	r22, Z
    1a76:	71 81       	ldd	r23, Z+1	; 0x01
    1a78:	82 81       	ldd	r24, Z+2	; 0x02
    1a7a:	93 81       	ldd	r25, Z+3	; 0x03
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	3f ef       	ldi	r19, 0xFF	; 255
    1a80:	4f e7       	ldi	r20, 0x7F	; 127
    1a82:	57 e4       	ldi	r21, 0x47	; 71
    1a84:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    1a88:	18 16       	cp	r1, r24
    1a8a:	0c f0       	brlt	.+2      	; 0x1a8e <__stack+0x98f>
    1a8c:	43 c0       	rjmp	.+134    	; 0x1b14 <__stack+0xa15>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a8e:	fe 01       	movw	r30, r28
    1a90:	e1 53       	subi	r30, 0x31	; 49
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	60 81       	ld	r22, Z
    1a96:	71 81       	ldd	r23, Z+1	; 0x01
    1a98:	82 81       	ldd	r24, Z+2	; 0x02
    1a9a:	93 81       	ldd	r25, Z+3	; 0x03
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	40 e2       	ldi	r20, 0x20	; 32
    1aa2:	51 e4       	ldi	r21, 0x41	; 65
    1aa4:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	8e 01       	movw	r16, r28
    1aae:	07 53       	subi	r16, 0x37	; 55
    1ab0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab2:	bc 01       	movw	r22, r24
    1ab4:	cd 01       	movw	r24, r26
    1ab6:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	f8 01       	movw	r30, r16
    1ac0:	91 83       	std	Z+1, r25	; 0x01
    1ac2:	80 83       	st	Z, r24
    1ac4:	1f c0       	rjmp	.+62     	; 0x1b04 <__stack+0xa05>
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	e9 53       	subi	r30, 0x39	; 57
    1aca:	ff 4f       	sbci	r31, 0xFF	; 255
    1acc:	80 e9       	ldi	r24, 0x90	; 144
    1ace:	91 e0       	ldi	r25, 0x01	; 1
    1ad0:	91 83       	std	Z+1, r25	; 0x01
    1ad2:	80 83       	st	Z, r24
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	e9 53       	subi	r30, 0x39	; 57
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	80 81       	ld	r24, Z
    1adc:	91 81       	ldd	r25, Z+1	; 0x01
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	f1 f7       	brne	.-4      	; 0x1ade <__stack+0x9df>
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	e9 53       	subi	r30, 0x39	; 57
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	91 83       	std	Z+1, r25	; 0x01
    1aea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aec:	de 01       	movw	r26, r28
    1aee:	a7 53       	subi	r26, 0x37	; 55
    1af0:	bf 4f       	sbci	r27, 0xFF	; 255
    1af2:	fe 01       	movw	r30, r28
    1af4:	e7 53       	subi	r30, 0x37	; 55
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	80 81       	ld	r24, Z
    1afa:	91 81       	ldd	r25, Z+1	; 0x01
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	11 96       	adiw	r26, 0x01	; 1
    1b00:	9c 93       	st	X, r25
    1b02:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b04:	fe 01       	movw	r30, r28
    1b06:	e7 53       	subi	r30, 0x37	; 55
    1b08:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0a:	80 81       	ld	r24, Z
    1b0c:	91 81       	ldd	r25, Z+1	; 0x01
    1b0e:	00 97       	sbiw	r24, 0x00	; 0
    1b10:	d1 f6       	brne	.-76     	; 0x1ac6 <__stack+0x9c7>
    1b12:	27 c0       	rjmp	.+78     	; 0x1b62 <__stack+0xa63>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b14:	8e 01       	movw	r16, r28
    1b16:	07 53       	subi	r16, 0x37	; 55
    1b18:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	e5 53       	subi	r30, 0x35	; 53
    1b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b20:	60 81       	ld	r22, Z
    1b22:	71 81       	ldd	r23, Z+1	; 0x01
    1b24:	82 81       	ldd	r24, Z+2	; 0x02
    1b26:	93 81       	ldd	r25, Z+3	; 0x03
    1b28:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	f8 01       	movw	r30, r16
    1b32:	91 83       	std	Z+1, r25	; 0x01
    1b34:	80 83       	st	Z, r24
    1b36:	de 01       	movw	r26, r28
    1b38:	ab 53       	subi	r26, 0x3B	; 59
    1b3a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b3c:	fe 01       	movw	r30, r28
    1b3e:	e7 53       	subi	r30, 0x37	; 55
    1b40:	ff 4f       	sbci	r31, 0xFF	; 255
    1b42:	80 81       	ld	r24, Z
    1b44:	91 81       	ldd	r25, Z+1	; 0x01
    1b46:	8d 93       	st	X+, r24
    1b48:	9c 93       	st	X, r25
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	eb 53       	subi	r30, 0x3B	; 59
    1b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b50:	80 81       	ld	r24, Z
    1b52:	91 81       	ldd	r25, Z+1	; 0x01
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	f1 f7       	brne	.-4      	; 0x1b54 <__stack+0xa55>
    1b58:	fe 01       	movw	r30, r28
    1b5a:	eb 53       	subi	r30, 0x3B	; 59
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	91 83       	std	Z+1, r25	; 0x01
    1b60:	80 83       	st	Z, r24

//크레인 내리기 

while(1)//내리기
{
OCR2=200;
    1b62:	e3 e4       	ldi	r30, 0x43	; 67
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	88 ec       	ldi	r24, 0xC8	; 200
    1b68:	80 83       	st	Z, r24
PORTB= 0b10000001;//내려가기 
    1b6a:	e8 e3       	ldi	r30, 0x38	; 56
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	81 e8       	ldi	r24, 0x81	; 129
    1b70:	80 83       	st	Z, r24

printf("r is = %d \r\n" , r);
    1b72:	00 d0       	rcall	.+0      	; 0x1b74 <__stack+0xa75>
    1b74:	00 d0       	rcall	.+0      	; 0x1b76 <__stack+0xa77>
    1b76:	ad b7       	in	r26, 0x3d	; 61
    1b78:	be b7       	in	r27, 0x3e	; 62
    1b7a:	11 96       	adiw	r26, 0x01	; 1
    1b7c:	8b e3       	ldi	r24, 0x3B	; 59
    1b7e:	91 e0       	ldi	r25, 0x01	; 1
    1b80:	11 96       	adiw	r26, 0x01	; 1
    1b82:	9c 93       	st	X, r25
    1b84:	8e 93       	st	-X, r24
    1b86:	fe 01       	movw	r30, r28
    1b88:	e5 54       	subi	r30, 0x45	; 69
    1b8a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b8c:	80 81       	ld	r24, Z
    1b8e:	91 81       	ldd	r25, Z+1	; 0x01
    1b90:	13 96       	adiw	r26, 0x03	; 3
    1b92:	9c 93       	st	X, r25
    1b94:	8e 93       	st	-X, r24
    1b96:	12 97       	sbiw	r26, 0x02	; 2
    1b98:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <printf>
    1b9c:	0f 90       	pop	r0
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
r=r-1;
    1ba4:	de 01       	movw	r26, r28
    1ba6:	a5 54       	subi	r26, 0x45	; 69
    1ba8:	be 4f       	sbci	r27, 0xFE	; 254
    1baa:	fe 01       	movw	r30, r28
    1bac:	e5 54       	subi	r30, 0x45	; 69
    1bae:	fe 4f       	sbci	r31, 0xFE	; 254
    1bb0:	80 81       	ld	r24, Z
    1bb2:	91 81       	ldd	r25, Z+1	; 0x01
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	11 96       	adiw	r26, 0x01	; 1
    1bb8:	9c 93       	st	X, r25
    1bba:	8e 93       	st	-X, r24

if(r==0){
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	e5 54       	subi	r30, 0x45	; 69
    1bc0:	fe 4f       	sbci	r31, 0xFE	; 254
    1bc2:	80 81       	ld	r24, Z
    1bc4:	91 81       	ldd	r25, Z+1	; 0x01
    1bc6:	00 97       	sbiw	r24, 0x00	; 0
    1bc8:	09 f0       	breq	.+2      	; 0x1bcc <__stack+0xacd>
    1bca:	6f c1       	rjmp	.+734    	; 0x1eaa <__stack+0xdab>
    1bcc:	fe 01       	movw	r30, r28
    1bce:	ef 53       	subi	r30, 0x3F	; 63
    1bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	90 e8       	ldi	r25, 0x80	; 128
    1bd6:	ab eb       	ldi	r26, 0xBB	; 187
    1bd8:	b5 e4       	ldi	r27, 0x45	; 69
    1bda:	80 83       	st	Z, r24
    1bdc:	91 83       	std	Z+1, r25	; 0x01
    1bde:	a2 83       	std	Z+2, r26	; 0x02
    1be0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be2:	8e 01       	movw	r16, r28
    1be4:	03 54       	subi	r16, 0x43	; 67
    1be6:	1f 4f       	sbci	r17, 0xFF	; 255
    1be8:	fe 01       	movw	r30, r28
    1bea:	ef 53       	subi	r30, 0x3F	; 63
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	60 81       	ld	r22, Z
    1bf0:	71 81       	ldd	r23, Z+1	; 0x01
    1bf2:	82 81       	ldd	r24, Z+2	; 0x02
    1bf4:	93 81       	ldd	r25, Z+3	; 0x03
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	4a e7       	ldi	r20, 0x7A	; 122
    1bfc:	55 e4       	ldi	r21, 0x45	; 69
    1bfe:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	f8 01       	movw	r30, r16
    1c08:	80 83       	st	Z, r24
    1c0a:	91 83       	std	Z+1, r25	; 0x01
    1c0c:	a2 83       	std	Z+2, r26	; 0x02
    1c0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c10:	fe 01       	movw	r30, r28
    1c12:	e3 54       	subi	r30, 0x43	; 67
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	60 81       	ld	r22, Z
    1c18:	71 81       	ldd	r23, Z+1	; 0x01
    1c1a:	82 81       	ldd	r24, Z+2	; 0x02
    1c1c:	93 81       	ldd	r25, Z+3	; 0x03
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e8       	ldi	r20, 0x80	; 128
    1c24:	5f e3       	ldi	r21, 0x3F	; 63
    1c26:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    1c2a:	88 23       	and	r24, r24
    1c2c:	44 f4       	brge	.+16     	; 0x1c3e <__stack+0xb3f>
		__ticks = 1;
    1c2e:	fe 01       	movw	r30, r28
    1c30:	e5 54       	subi	r30, 0x45	; 69
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	91 83       	std	Z+1, r25	; 0x01
    1c3a:	80 83       	st	Z, r24
    1c3c:	64 c0       	rjmp	.+200    	; 0x1d06 <__stack+0xc07>
	else if (__tmp > 65535)
    1c3e:	fe 01       	movw	r30, r28
    1c40:	e3 54       	subi	r30, 0x43	; 67
    1c42:	ff 4f       	sbci	r31, 0xFF	; 255
    1c44:	60 81       	ld	r22, Z
    1c46:	71 81       	ldd	r23, Z+1	; 0x01
    1c48:	82 81       	ldd	r24, Z+2	; 0x02
    1c4a:	93 81       	ldd	r25, Z+3	; 0x03
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	3f ef       	ldi	r19, 0xFF	; 255
    1c50:	4f e7       	ldi	r20, 0x7F	; 127
    1c52:	57 e4       	ldi	r21, 0x47	; 71
    1c54:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    1c58:	18 16       	cp	r1, r24
    1c5a:	0c f0       	brlt	.+2      	; 0x1c5e <__stack+0xb5f>
    1c5c:	43 c0       	rjmp	.+134    	; 0x1ce4 <__stack+0xbe5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5e:	fe 01       	movw	r30, r28
    1c60:	ef 53       	subi	r30, 0x3F	; 63
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	60 81       	ld	r22, Z
    1c66:	71 81       	ldd	r23, Z+1	; 0x01
    1c68:	82 81       	ldd	r24, Z+2	; 0x02
    1c6a:	93 81       	ldd	r25, Z+3	; 0x03
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	40 e2       	ldi	r20, 0x20	; 32
    1c72:	51 e4       	ldi	r21, 0x41	; 65
    1c74:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	8e 01       	movw	r16, r28
    1c7e:	05 54       	subi	r16, 0x45	; 69
    1c80:	1f 4f       	sbci	r17, 0xFF	; 255
    1c82:	bc 01       	movw	r22, r24
    1c84:	cd 01       	movw	r24, r26
    1c86:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	f8 01       	movw	r30, r16
    1c90:	91 83       	std	Z+1, r25	; 0x01
    1c92:	80 83       	st	Z, r24
    1c94:	1f c0       	rjmp	.+62     	; 0x1cd4 <__stack+0xbd5>
    1c96:	fe 01       	movw	r30, r28
    1c98:	e7 54       	subi	r30, 0x47	; 71
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	80 e9       	ldi	r24, 0x90	; 144
    1c9e:	91 e0       	ldi	r25, 0x01	; 1
    1ca0:	91 83       	std	Z+1, r25	; 0x01
    1ca2:	80 83       	st	Z, r24
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	e7 54       	subi	r30, 0x47	; 71
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	80 81       	ld	r24, Z
    1cac:	91 81       	ldd	r25, Z+1	; 0x01
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	f1 f7       	brne	.-4      	; 0x1cae <__stack+0xbaf>
    1cb2:	fe 01       	movw	r30, r28
    1cb4:	e7 54       	subi	r30, 0x47	; 71
    1cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb8:	91 83       	std	Z+1, r25	; 0x01
    1cba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cbc:	de 01       	movw	r26, r28
    1cbe:	a5 54       	subi	r26, 0x45	; 69
    1cc0:	bf 4f       	sbci	r27, 0xFF	; 255
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	e5 54       	subi	r30, 0x45	; 69
    1cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc8:	80 81       	ld	r24, Z
    1cca:	91 81       	ldd	r25, Z+1	; 0x01
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	11 96       	adiw	r26, 0x01	; 1
    1cd0:	9c 93       	st	X, r25
    1cd2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	e5 54       	subi	r30, 0x45	; 69
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	80 81       	ld	r24, Z
    1cdc:	91 81       	ldd	r25, Z+1	; 0x01
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	d1 f6       	brne	.-76     	; 0x1c96 <__stack+0xb97>
    1ce2:	27 c0       	rjmp	.+78     	; 0x1d32 <__stack+0xc33>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce4:	8e 01       	movw	r16, r28
    1ce6:	05 54       	subi	r16, 0x45	; 69
    1ce8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cea:	fe 01       	movw	r30, r28
    1cec:	e3 54       	subi	r30, 0x43	; 67
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	60 81       	ld	r22, Z
    1cf2:	71 81       	ldd	r23, Z+1	; 0x01
    1cf4:	82 81       	ldd	r24, Z+2	; 0x02
    1cf6:	93 81       	ldd	r25, Z+3	; 0x03
    1cf8:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	f8 01       	movw	r30, r16
    1d02:	91 83       	std	Z+1, r25	; 0x01
    1d04:	80 83       	st	Z, r24
    1d06:	de 01       	movw	r26, r28
    1d08:	a9 54       	subi	r26, 0x49	; 73
    1d0a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	e5 54       	subi	r30, 0x45	; 69
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	80 81       	ld	r24, Z
    1d14:	91 81       	ldd	r25, Z+1	; 0x01
    1d16:	8d 93       	st	X+, r24
    1d18:	9c 93       	st	X, r25
    1d1a:	fe 01       	movw	r30, r28
    1d1c:	e9 54       	subi	r30, 0x49	; 73
    1d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d20:	80 81       	ld	r24, Z
    1d22:	91 81       	ldd	r25, Z+1	; 0x01
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	f1 f7       	brne	.-4      	; 0x1d24 <__stack+0xc25>
    1d28:	fe 01       	movw	r30, r28
    1d2a:	e9 54       	subi	r30, 0x49	; 73
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	91 83       	std	Z+1, r25	; 0x01
    1d30:	80 83       	st	Z, r24
_delay_ms(10);
}



PORTB=0b11011111; // 주행모터 및 모든 모터 정지
    1d32:	e8 e3       	ldi	r30, 0x38	; 56
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	8f ed       	ldi	r24, 0xDF	; 223
    1d38:	80 83       	st	Z, r24
PORTA= 0b00000000;// 전자석 off pE0 사용 
    1d3a:	eb e3       	ldi	r30, 0x3B	; 59
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	10 82       	st	Z, r1
    1d40:	fe 01       	movw	r30, r28
    1d42:	ed 54       	subi	r30, 0x4D	; 77
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	90 e8       	ldi	r25, 0x80	; 128
    1d4a:	ab e3       	ldi	r26, 0x3B	; 59
    1d4c:	b5 e4       	ldi	r27, 0x45	; 69
    1d4e:	80 83       	st	Z, r24
    1d50:	91 83       	std	Z+1, r25	; 0x01
    1d52:	a2 83       	std	Z+2, r26	; 0x02
    1d54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d56:	8e 01       	movw	r16, r28
    1d58:	01 55       	subi	r16, 0x51	; 81
    1d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	ed 54       	subi	r30, 0x4D	; 77
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	60 81       	ld	r22, Z
    1d64:	71 81       	ldd	r23, Z+1	; 0x01
    1d66:	82 81       	ldd	r24, Z+2	; 0x02
    1d68:	93 81       	ldd	r25, Z+3	; 0x03
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	4a e7       	ldi	r20, 0x7A	; 122
    1d70:	55 e4       	ldi	r21, 0x45	; 69
    1d72:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	f8 01       	movw	r30, r16
    1d7c:	80 83       	st	Z, r24
    1d7e:	91 83       	std	Z+1, r25	; 0x01
    1d80:	a2 83       	std	Z+2, r26	; 0x02
    1d82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d84:	fe 01       	movw	r30, r28
    1d86:	e1 55       	subi	r30, 0x51	; 81
    1d88:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8a:	60 81       	ld	r22, Z
    1d8c:	71 81       	ldd	r23, Z+1	; 0x01
    1d8e:	82 81       	ldd	r24, Z+2	; 0x02
    1d90:	93 81       	ldd	r25, Z+3	; 0x03
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	40 e8       	ldi	r20, 0x80	; 128
    1d98:	5f e3       	ldi	r21, 0x3F	; 63
    1d9a:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    1d9e:	88 23       	and	r24, r24
    1da0:	44 f4       	brge	.+16     	; 0x1db2 <__stack+0xcb3>
		__ticks = 1;
    1da2:	fe 01       	movw	r30, r28
    1da4:	e3 55       	subi	r30, 0x53	; 83
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	91 83       	std	Z+1, r25	; 0x01
    1dae:	80 83       	st	Z, r24
    1db0:	64 c0       	rjmp	.+200    	; 0x1e7a <__stack+0xd7b>
	else if (__tmp > 65535)
    1db2:	fe 01       	movw	r30, r28
    1db4:	e1 55       	subi	r30, 0x51	; 81
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	60 81       	ld	r22, Z
    1dba:	71 81       	ldd	r23, Z+1	; 0x01
    1dbc:	82 81       	ldd	r24, Z+2	; 0x02
    1dbe:	93 81       	ldd	r25, Z+3	; 0x03
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	3f ef       	ldi	r19, 0xFF	; 255
    1dc4:	4f e7       	ldi	r20, 0x7F	; 127
    1dc6:	57 e4       	ldi	r21, 0x47	; 71
    1dc8:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    1dcc:	18 16       	cp	r1, r24
    1dce:	0c f0       	brlt	.+2      	; 0x1dd2 <__stack+0xcd3>
    1dd0:	43 c0       	rjmp	.+134    	; 0x1e58 <__stack+0xd59>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd2:	fe 01       	movw	r30, r28
    1dd4:	ed 54       	subi	r30, 0x4D	; 77
    1dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd8:	60 81       	ld	r22, Z
    1dda:	71 81       	ldd	r23, Z+1	; 0x01
    1ddc:	82 81       	ldd	r24, Z+2	; 0x02
    1dde:	93 81       	ldd	r25, Z+3	; 0x03
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	40 e2       	ldi	r20, 0x20	; 32
    1de6:	51 e4       	ldi	r21, 0x41	; 65
    1de8:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	8e 01       	movw	r16, r28
    1df2:	03 55       	subi	r16, 0x53	; 83
    1df4:	1f 4f       	sbci	r17, 0xFF	; 255
    1df6:	bc 01       	movw	r22, r24
    1df8:	cd 01       	movw	r24, r26
    1dfa:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	f8 01       	movw	r30, r16
    1e04:	91 83       	std	Z+1, r25	; 0x01
    1e06:	80 83       	st	Z, r24
    1e08:	1f c0       	rjmp	.+62     	; 0x1e48 <__stack+0xd49>
    1e0a:	fe 01       	movw	r30, r28
    1e0c:	e5 55       	subi	r30, 0x55	; 85
    1e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e10:	80 e9       	ldi	r24, 0x90	; 144
    1e12:	91 e0       	ldi	r25, 0x01	; 1
    1e14:	91 83       	std	Z+1, r25	; 0x01
    1e16:	80 83       	st	Z, r24
    1e18:	fe 01       	movw	r30, r28
    1e1a:	e5 55       	subi	r30, 0x55	; 85
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	80 81       	ld	r24, Z
    1e20:	91 81       	ldd	r25, Z+1	; 0x01
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	f1 f7       	brne	.-4      	; 0x1e22 <__stack+0xd23>
    1e26:	fe 01       	movw	r30, r28
    1e28:	e5 55       	subi	r30, 0x55	; 85
    1e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2c:	91 83       	std	Z+1, r25	; 0x01
    1e2e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e30:	de 01       	movw	r26, r28
    1e32:	a3 55       	subi	r26, 0x53	; 83
    1e34:	bf 4f       	sbci	r27, 0xFF	; 255
    1e36:	fe 01       	movw	r30, r28
    1e38:	e3 55       	subi	r30, 0x53	; 83
    1e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3c:	80 81       	ld	r24, Z
    1e3e:	91 81       	ldd	r25, Z+1	; 0x01
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	11 96       	adiw	r26, 0x01	; 1
    1e44:	9c 93       	st	X, r25
    1e46:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e48:	fe 01       	movw	r30, r28
    1e4a:	e3 55       	subi	r30, 0x53	; 83
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	80 81       	ld	r24, Z
    1e50:	91 81       	ldd	r25, Z+1	; 0x01
    1e52:	00 97       	sbiw	r24, 0x00	; 0
    1e54:	d1 f6       	brne	.-76     	; 0x1e0a <__stack+0xd0b>
    1e56:	de c0       	rjmp	.+444    	; 0x2014 <__stack+0xf15>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e58:	8e 01       	movw	r16, r28
    1e5a:	03 55       	subi	r16, 0x53	; 83
    1e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5e:	fe 01       	movw	r30, r28
    1e60:	e1 55       	subi	r30, 0x51	; 81
    1e62:	ff 4f       	sbci	r31, 0xFF	; 255
    1e64:	60 81       	ld	r22, Z
    1e66:	71 81       	ldd	r23, Z+1	; 0x01
    1e68:	82 81       	ldd	r24, Z+2	; 0x02
    1e6a:	93 81       	ldd	r25, Z+3	; 0x03
    1e6c:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	f8 01       	movw	r30, r16
    1e76:	91 83       	std	Z+1, r25	; 0x01
    1e78:	80 83       	st	Z, r24
    1e7a:	de 01       	movw	r26, r28
    1e7c:	a7 55       	subi	r26, 0x57	; 87
    1e7e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e80:	fe 01       	movw	r30, r28
    1e82:	e3 55       	subi	r30, 0x53	; 83
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	80 81       	ld	r24, Z
    1e88:	91 81       	ldd	r25, Z+1	; 0x01
    1e8a:	11 96       	adiw	r26, 0x01	; 1
    1e8c:	9c 93       	st	X, r25
    1e8e:	8e 93       	st	-X, r24
    1e90:	fe 01       	movw	r30, r28
    1e92:	e7 55       	subi	r30, 0x57	; 87
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	80 81       	ld	r24, Z
    1e98:	91 81       	ldd	r25, Z+1	; 0x01
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	f1 f7       	brne	.-4      	; 0x1e9a <__stack+0xd9b>
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	e7 55       	subi	r30, 0x57	; 87
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	91 83       	std	Z+1, r25	; 0x01
    1ea6:	80 83       	st	Z, r24
    1ea8:	b5 c0       	rjmp	.+362    	; 0x2014 <__stack+0xf15>
    1eaa:	fe 01       	movw	r30, r28
    1eac:	eb 55       	subi	r30, 0x5B	; 91
    1eae:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	a0 e2       	ldi	r26, 0x20	; 32
    1eb6:	b1 e4       	ldi	r27, 0x41	; 65
    1eb8:	80 83       	st	Z, r24
    1eba:	91 83       	std	Z+1, r25	; 0x01
    1ebc:	a2 83       	std	Z+2, r26	; 0x02
    1ebe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec0:	8e 01       	movw	r16, r28
    1ec2:	0f 55       	subi	r16, 0x5F	; 95
    1ec4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	eb 55       	subi	r30, 0x5B	; 91
    1eca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ecc:	60 81       	ld	r22, Z
    1ece:	71 81       	ldd	r23, Z+1	; 0x01
    1ed0:	82 81       	ldd	r24, Z+2	; 0x02
    1ed2:	93 81       	ldd	r25, Z+3	; 0x03
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	4a e7       	ldi	r20, 0x7A	; 122
    1eda:	55 e4       	ldi	r21, 0x45	; 69
    1edc:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	f8 01       	movw	r30, r16
    1ee6:	80 83       	st	Z, r24
    1ee8:	91 83       	std	Z+1, r25	; 0x01
    1eea:	a2 83       	std	Z+2, r26	; 0x02
    1eec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1eee:	fe 01       	movw	r30, r28
    1ef0:	ef 55       	subi	r30, 0x5F	; 95
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	60 81       	ld	r22, Z
    1ef6:	71 81       	ldd	r23, Z+1	; 0x01
    1ef8:	82 81       	ldd	r24, Z+2	; 0x02
    1efa:	93 81       	ldd	r25, Z+3	; 0x03
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	40 e8       	ldi	r20, 0x80	; 128
    1f02:	5f e3       	ldi	r21, 0x3F	; 63
    1f04:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    1f08:	88 23       	and	r24, r24
    1f0a:	44 f4       	brge	.+16     	; 0x1f1c <__stack+0xe1d>
		__ticks = 1;
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	e1 56       	subi	r30, 0x61	; 97
    1f10:	ff 4f       	sbci	r31, 0xFF	; 255
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	91 83       	std	Z+1, r25	; 0x01
    1f18:	80 83       	st	Z, r24
    1f1a:	64 c0       	rjmp	.+200    	; 0x1fe4 <__stack+0xee5>
	else if (__tmp > 65535)
    1f1c:	fe 01       	movw	r30, r28
    1f1e:	ef 55       	subi	r30, 0x5F	; 95
    1f20:	ff 4f       	sbci	r31, 0xFF	; 255
    1f22:	60 81       	ld	r22, Z
    1f24:	71 81       	ldd	r23, Z+1	; 0x01
    1f26:	82 81       	ldd	r24, Z+2	; 0x02
    1f28:	93 81       	ldd	r25, Z+3	; 0x03
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	3f ef       	ldi	r19, 0xFF	; 255
    1f2e:	4f e7       	ldi	r20, 0x7F	; 127
    1f30:	57 e4       	ldi	r21, 0x47	; 71
    1f32:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    1f36:	18 16       	cp	r1, r24
    1f38:	0c f0       	brlt	.+2      	; 0x1f3c <__stack+0xe3d>
    1f3a:	43 c0       	rjmp	.+134    	; 0x1fc2 <__stack+0xec3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	eb 55       	subi	r30, 0x5B	; 91
    1f40:	ff 4f       	sbci	r31, 0xFF	; 255
    1f42:	60 81       	ld	r22, Z
    1f44:	71 81       	ldd	r23, Z+1	; 0x01
    1f46:	82 81       	ldd	r24, Z+2	; 0x02
    1f48:	93 81       	ldd	r25, Z+3	; 0x03
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	40 e2       	ldi	r20, 0x20	; 32
    1f50:	51 e4       	ldi	r21, 0x41	; 65
    1f52:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	8e 01       	movw	r16, r28
    1f5c:	01 56       	subi	r16, 0x61	; 97
    1f5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f60:	bc 01       	movw	r22, r24
    1f62:	cd 01       	movw	r24, r26
    1f64:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	f8 01       	movw	r30, r16
    1f6e:	91 83       	std	Z+1, r25	; 0x01
    1f70:	80 83       	st	Z, r24
    1f72:	1f c0       	rjmp	.+62     	; 0x1fb2 <__stack+0xeb3>
    1f74:	fe 01       	movw	r30, r28
    1f76:	e3 56       	subi	r30, 0x63	; 99
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	80 e9       	ldi	r24, 0x90	; 144
    1f7c:	91 e0       	ldi	r25, 0x01	; 1
    1f7e:	91 83       	std	Z+1, r25	; 0x01
    1f80:	80 83       	st	Z, r24
    1f82:	fe 01       	movw	r30, r28
    1f84:	e3 56       	subi	r30, 0x63	; 99
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	80 81       	ld	r24, Z
    1f8a:	91 81       	ldd	r25, Z+1	; 0x01
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	f1 f7       	brne	.-4      	; 0x1f8c <__stack+0xe8d>
    1f90:	fe 01       	movw	r30, r28
    1f92:	e3 56       	subi	r30, 0x63	; 99
    1f94:	ff 4f       	sbci	r31, 0xFF	; 255
    1f96:	91 83       	std	Z+1, r25	; 0x01
    1f98:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f9a:	de 01       	movw	r26, r28
    1f9c:	a1 56       	subi	r26, 0x61	; 97
    1f9e:	bf 4f       	sbci	r27, 0xFF	; 255
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	e1 56       	subi	r30, 0x61	; 97
    1fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa6:	80 81       	ld	r24, Z
    1fa8:	91 81       	ldd	r25, Z+1	; 0x01
    1faa:	01 97       	sbiw	r24, 0x01	; 1
    1fac:	11 96       	adiw	r26, 0x01	; 1
    1fae:	9c 93       	st	X, r25
    1fb0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb2:	fe 01       	movw	r30, r28
    1fb4:	e1 56       	subi	r30, 0x61	; 97
    1fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb8:	80 81       	ld	r24, Z
    1fba:	91 81       	ldd	r25, Z+1	; 0x01
    1fbc:	00 97       	sbiw	r24, 0x00	; 0
    1fbe:	d1 f6       	brne	.-76     	; 0x1f74 <__stack+0xe75>
    1fc0:	d0 cd       	rjmp	.-1120   	; 0x1b62 <__stack+0xa63>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc2:	8e 01       	movw	r16, r28
    1fc4:	01 56       	subi	r16, 0x61	; 97
    1fc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc8:	fe 01       	movw	r30, r28
    1fca:	ef 55       	subi	r30, 0x5F	; 95
    1fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fce:	60 81       	ld	r22, Z
    1fd0:	71 81       	ldd	r23, Z+1	; 0x01
    1fd2:	82 81       	ldd	r24, Z+2	; 0x02
    1fd4:	93 81       	ldd	r25, Z+3	; 0x03
    1fd6:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	f8 01       	movw	r30, r16
    1fe0:	91 83       	std	Z+1, r25	; 0x01
    1fe2:	80 83       	st	Z, r24
    1fe4:	de 01       	movw	r26, r28
    1fe6:	a5 56       	subi	r26, 0x65	; 101
    1fe8:	bf 4f       	sbci	r27, 0xFF	; 255
    1fea:	fe 01       	movw	r30, r28
    1fec:	e1 56       	subi	r30, 0x61	; 97
    1fee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff0:	80 81       	ld	r24, Z
    1ff2:	91 81       	ldd	r25, Z+1	; 0x01
    1ff4:	11 96       	adiw	r26, 0x01	; 1
    1ff6:	9c 93       	st	X, r25
    1ff8:	8e 93       	st	-X, r24
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	e5 56       	subi	r30, 0x65	; 101
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	80 81       	ld	r24, Z
    2002:	91 81       	ldd	r25, Z+1	; 0x01
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	f1 f7       	brne	.-4      	; 0x2004 <__stack+0xf05>
    2008:	fe 01       	movw	r30, r28
    200a:	e5 56       	subi	r30, 0x65	; 101
    200c:	ff 4f       	sbci	r31, 0xFF	; 255
    200e:	91 83       	std	Z+1, r25	; 0x01
    2010:	80 83       	st	Z, r24
    2012:	a7 cd       	rjmp	.-1202   	; 0x1b62 <__stack+0xa63>
_delay_ms(3000);

while(1)//올리기
{
OCR2=200;
    2014:	e3 e4       	ldi	r30, 0x43	; 67
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	88 ec       	ldi	r24, 0xC8	; 200
    201a:	80 83       	st	Z, r24
PORTB= 0b10000010; //올라가기
    201c:	e8 e3       	ldi	r30, 0x38	; 56
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	82 e8       	ldi	r24, 0x82	; 130
    2022:	80 83       	st	Z, r24

printf("f is = %d \r\n" , f);
    2024:	00 d0       	rcall	.+0      	; 0x2026 <__stack+0xf27>
    2026:	00 d0       	rcall	.+0      	; 0x2028 <__stack+0xf29>
    2028:	ad b7       	in	r26, 0x3d	; 61
    202a:	be b7       	in	r27, 0x3e	; 62
    202c:	11 96       	adiw	r26, 0x01	; 1
    202e:	88 e4       	ldi	r24, 0x48	; 72
    2030:	91 e0       	ldi	r25, 0x01	; 1
    2032:	11 96       	adiw	r26, 0x01	; 1
    2034:	9c 93       	st	X, r25
    2036:	8e 93       	st	-X, r24
    2038:	fe 01       	movw	r30, r28
    203a:	e7 54       	subi	r30, 0x47	; 71
    203c:	fe 4f       	sbci	r31, 0xFE	; 254
    203e:	80 81       	ld	r24, Z
    2040:	91 81       	ldd	r25, Z+1	; 0x01
    2042:	13 96       	adiw	r26, 0x03	; 3
    2044:	9c 93       	st	X, r25
    2046:	8e 93       	st	-X, r24
    2048:	12 97       	sbiw	r26, 0x02	; 2
    204a:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <printf>
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
f=f-1;
    2056:	de 01       	movw	r26, r28
    2058:	a7 54       	subi	r26, 0x47	; 71
    205a:	be 4f       	sbci	r27, 0xFE	; 254
    205c:	fe 01       	movw	r30, r28
    205e:	e7 54       	subi	r30, 0x47	; 71
    2060:	fe 4f       	sbci	r31, 0xFE	; 254
    2062:	80 81       	ld	r24, Z
    2064:	91 81       	ldd	r25, Z+1	; 0x01
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	11 96       	adiw	r26, 0x01	; 1
    206a:	9c 93       	st	X, r25
    206c:	8e 93       	st	-X, r24

if(f==0){
    206e:	fe 01       	movw	r30, r28
    2070:	e7 54       	subi	r30, 0x47	; 71
    2072:	fe 4f       	sbci	r31, 0xFE	; 254
    2074:	80 81       	ld	r24, Z
    2076:	91 81       	ldd	r25, Z+1	; 0x01
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	09 f0       	breq	.+2      	; 0x207e <__stack+0xf7f>
    207c:	fe c2       	rjmp	.+1532   	; 0x267a <__stack+0x157b>
    207e:	fe 01       	movw	r30, r28
    2080:	e9 56       	subi	r30, 0x69	; 105
    2082:	ff 4f       	sbci	r31, 0xFF	; 255
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	90 e4       	ldi	r25, 0x40	; 64
    2088:	ac e9       	ldi	r26, 0x9C	; 156
    208a:	b5 e4       	ldi	r27, 0x45	; 69
    208c:	80 83       	st	Z, r24
    208e:	91 83       	std	Z+1, r25	; 0x01
    2090:	a2 83       	std	Z+2, r26	; 0x02
    2092:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2094:	8e 01       	movw	r16, r28
    2096:	0d 56       	subi	r16, 0x6D	; 109
    2098:	1f 4f       	sbci	r17, 0xFF	; 255
    209a:	fe 01       	movw	r30, r28
    209c:	e9 56       	subi	r30, 0x69	; 105
    209e:	ff 4f       	sbci	r31, 0xFF	; 255
    20a0:	60 81       	ld	r22, Z
    20a2:	71 81       	ldd	r23, Z+1	; 0x01
    20a4:	82 81       	ldd	r24, Z+2	; 0x02
    20a6:	93 81       	ldd	r25, Z+3	; 0x03
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	4a e7       	ldi	r20, 0x7A	; 122
    20ae:	55 e4       	ldi	r21, 0x45	; 69
    20b0:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	f8 01       	movw	r30, r16
    20ba:	80 83       	st	Z, r24
    20bc:	91 83       	std	Z+1, r25	; 0x01
    20be:	a2 83       	std	Z+2, r26	; 0x02
    20c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20c2:	fe 01       	movw	r30, r28
    20c4:	ed 56       	subi	r30, 0x6D	; 109
    20c6:	ff 4f       	sbci	r31, 0xFF	; 255
    20c8:	60 81       	ld	r22, Z
    20ca:	71 81       	ldd	r23, Z+1	; 0x01
    20cc:	82 81       	ldd	r24, Z+2	; 0x02
    20ce:	93 81       	ldd	r25, Z+3	; 0x03
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	40 e8       	ldi	r20, 0x80	; 128
    20d6:	5f e3       	ldi	r21, 0x3F	; 63
    20d8:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    20dc:	88 23       	and	r24, r24
    20de:	44 f4       	brge	.+16     	; 0x20f0 <__stack+0xff1>
		__ticks = 1;
    20e0:	fe 01       	movw	r30, r28
    20e2:	ef 56       	subi	r30, 0x6F	; 111
    20e4:	ff 4f       	sbci	r31, 0xFF	; 255
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	91 83       	std	Z+1, r25	; 0x01
    20ec:	80 83       	st	Z, r24
    20ee:	64 c0       	rjmp	.+200    	; 0x21b8 <__stack+0x10b9>
	else if (__tmp > 65535)
    20f0:	fe 01       	movw	r30, r28
    20f2:	ed 56       	subi	r30, 0x6D	; 109
    20f4:	ff 4f       	sbci	r31, 0xFF	; 255
    20f6:	60 81       	ld	r22, Z
    20f8:	71 81       	ldd	r23, Z+1	; 0x01
    20fa:	82 81       	ldd	r24, Z+2	; 0x02
    20fc:	93 81       	ldd	r25, Z+3	; 0x03
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	3f ef       	ldi	r19, 0xFF	; 255
    2102:	4f e7       	ldi	r20, 0x7F	; 127
    2104:	57 e4       	ldi	r21, 0x47	; 71
    2106:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    210a:	18 16       	cp	r1, r24
    210c:	0c f0       	brlt	.+2      	; 0x2110 <__stack+0x1011>
    210e:	43 c0       	rjmp	.+134    	; 0x2196 <__stack+0x1097>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2110:	fe 01       	movw	r30, r28
    2112:	e9 56       	subi	r30, 0x69	; 105
    2114:	ff 4f       	sbci	r31, 0xFF	; 255
    2116:	60 81       	ld	r22, Z
    2118:	71 81       	ldd	r23, Z+1	; 0x01
    211a:	82 81       	ldd	r24, Z+2	; 0x02
    211c:	93 81       	ldd	r25, Z+3	; 0x03
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	40 e2       	ldi	r20, 0x20	; 32
    2124:	51 e4       	ldi	r21, 0x41	; 65
    2126:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	8e 01       	movw	r16, r28
    2130:	0f 56       	subi	r16, 0x6F	; 111
    2132:	1f 4f       	sbci	r17, 0xFF	; 255
    2134:	bc 01       	movw	r22, r24
    2136:	cd 01       	movw	r24, r26
    2138:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	f8 01       	movw	r30, r16
    2142:	91 83       	std	Z+1, r25	; 0x01
    2144:	80 83       	st	Z, r24
    2146:	1f c0       	rjmp	.+62     	; 0x2186 <__stack+0x1087>
    2148:	fe 01       	movw	r30, r28
    214a:	e1 57       	subi	r30, 0x71	; 113
    214c:	ff 4f       	sbci	r31, 0xFF	; 255
    214e:	80 e9       	ldi	r24, 0x90	; 144
    2150:	91 e0       	ldi	r25, 0x01	; 1
    2152:	91 83       	std	Z+1, r25	; 0x01
    2154:	80 83       	st	Z, r24
    2156:	fe 01       	movw	r30, r28
    2158:	e1 57       	subi	r30, 0x71	; 113
    215a:	ff 4f       	sbci	r31, 0xFF	; 255
    215c:	80 81       	ld	r24, Z
    215e:	91 81       	ldd	r25, Z+1	; 0x01
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	f1 f7       	brne	.-4      	; 0x2160 <__stack+0x1061>
    2164:	fe 01       	movw	r30, r28
    2166:	e1 57       	subi	r30, 0x71	; 113
    2168:	ff 4f       	sbci	r31, 0xFF	; 255
    216a:	91 83       	std	Z+1, r25	; 0x01
    216c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    216e:	de 01       	movw	r26, r28
    2170:	af 56       	subi	r26, 0x6F	; 111
    2172:	bf 4f       	sbci	r27, 0xFF	; 255
    2174:	fe 01       	movw	r30, r28
    2176:	ef 56       	subi	r30, 0x6F	; 111
    2178:	ff 4f       	sbci	r31, 0xFF	; 255
    217a:	80 81       	ld	r24, Z
    217c:	91 81       	ldd	r25, Z+1	; 0x01
    217e:	01 97       	sbiw	r24, 0x01	; 1
    2180:	11 96       	adiw	r26, 0x01	; 1
    2182:	9c 93       	st	X, r25
    2184:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2186:	fe 01       	movw	r30, r28
    2188:	ef 56       	subi	r30, 0x6F	; 111
    218a:	ff 4f       	sbci	r31, 0xFF	; 255
    218c:	80 81       	ld	r24, Z
    218e:	91 81       	ldd	r25, Z+1	; 0x01
    2190:	00 97       	sbiw	r24, 0x00	; 0
    2192:	d1 f6       	brne	.-76     	; 0x2148 <__stack+0x1049>
    2194:	27 c0       	rjmp	.+78     	; 0x21e4 <__stack+0x10e5>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2196:	8e 01       	movw	r16, r28
    2198:	0f 56       	subi	r16, 0x6F	; 111
    219a:	1f 4f       	sbci	r17, 0xFF	; 255
    219c:	fe 01       	movw	r30, r28
    219e:	ed 56       	subi	r30, 0x6D	; 109
    21a0:	ff 4f       	sbci	r31, 0xFF	; 255
    21a2:	60 81       	ld	r22, Z
    21a4:	71 81       	ldd	r23, Z+1	; 0x01
    21a6:	82 81       	ldd	r24, Z+2	; 0x02
    21a8:	93 81       	ldd	r25, Z+3	; 0x03
    21aa:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	f8 01       	movw	r30, r16
    21b4:	91 83       	std	Z+1, r25	; 0x01
    21b6:	80 83       	st	Z, r24
    21b8:	de 01       	movw	r26, r28
    21ba:	a3 57       	subi	r26, 0x73	; 115
    21bc:	bf 4f       	sbci	r27, 0xFF	; 255
    21be:	fe 01       	movw	r30, r28
    21c0:	ef 56       	subi	r30, 0x6F	; 111
    21c2:	ff 4f       	sbci	r31, 0xFF	; 255
    21c4:	80 81       	ld	r24, Z
    21c6:	91 81       	ldd	r25, Z+1	; 0x01
    21c8:	8d 93       	st	X+, r24
    21ca:	9c 93       	st	X, r25
    21cc:	fe 01       	movw	r30, r28
    21ce:	e3 57       	subi	r30, 0x73	; 115
    21d0:	ff 4f       	sbci	r31, 0xFF	; 255
    21d2:	80 81       	ld	r24, Z
    21d4:	91 81       	ldd	r25, Z+1	; 0x01
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	f1 f7       	brne	.-4      	; 0x21d6 <__stack+0x10d7>
    21da:	fe 01       	movw	r30, r28
    21dc:	e3 57       	subi	r30, 0x73	; 115
    21de:	ff 4f       	sbci	r31, 0xFF	; 255
    21e0:	91 83       	std	Z+1, r25	; 0x01
    21e2:	80 83       	st	Z, r24
    21e4:	fe 01       	movw	r30, r28
    21e6:	e7 57       	subi	r30, 0x77	; 119
    21e8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	90 e8       	ldi	r25, 0x80	; 128
    21ee:	ab e3       	ldi	r26, 0x3B	; 59
    21f0:	b5 e4       	ldi	r27, 0x45	; 69
    21f2:	80 83       	st	Z, r24
    21f4:	91 83       	std	Z+1, r25	; 0x01
    21f6:	a2 83       	std	Z+2, r26	; 0x02
    21f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21fa:	8e 01       	movw	r16, r28
    21fc:	0b 57       	subi	r16, 0x7B	; 123
    21fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2200:	fe 01       	movw	r30, r28
    2202:	e7 57       	subi	r30, 0x77	; 119
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	60 81       	ld	r22, Z
    2208:	71 81       	ldd	r23, Z+1	; 0x01
    220a:	82 81       	ldd	r24, Z+2	; 0x02
    220c:	93 81       	ldd	r25, Z+3	; 0x03
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	4a e7       	ldi	r20, 0x7A	; 122
    2214:	55 e4       	ldi	r21, 0x45	; 69
    2216:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	f8 01       	movw	r30, r16
    2220:	80 83       	st	Z, r24
    2222:	91 83       	std	Z+1, r25	; 0x01
    2224:	a2 83       	std	Z+2, r26	; 0x02
    2226:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2228:	fe 01       	movw	r30, r28
    222a:	eb 57       	subi	r30, 0x7B	; 123
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	60 81       	ld	r22, Z
    2230:	71 81       	ldd	r23, Z+1	; 0x01
    2232:	82 81       	ldd	r24, Z+2	; 0x02
    2234:	93 81       	ldd	r25, Z+3	; 0x03
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e8       	ldi	r20, 0x80	; 128
    223c:	5f e3       	ldi	r21, 0x3F	; 63
    223e:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    2242:	88 23       	and	r24, r24
    2244:	44 f4       	brge	.+16     	; 0x2256 <__stack+0x1157>
		__ticks = 1;
    2246:	fe 01       	movw	r30, r28
    2248:	ed 57       	subi	r30, 0x7D	; 125
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	91 83       	std	Z+1, r25	; 0x01
    2252:	80 83       	st	Z, r24
    2254:	64 c0       	rjmp	.+200    	; 0x231e <__stack+0x121f>
	else if (__tmp > 65535)
    2256:	fe 01       	movw	r30, r28
    2258:	eb 57       	subi	r30, 0x7B	; 123
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	60 81       	ld	r22, Z
    225e:	71 81       	ldd	r23, Z+1	; 0x01
    2260:	82 81       	ldd	r24, Z+2	; 0x02
    2262:	93 81       	ldd	r25, Z+3	; 0x03
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	3f ef       	ldi	r19, 0xFF	; 255
    2268:	4f e7       	ldi	r20, 0x7F	; 127
    226a:	57 e4       	ldi	r21, 0x47	; 71
    226c:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    2270:	18 16       	cp	r1, r24
    2272:	0c f0       	brlt	.+2      	; 0x2276 <__stack+0x1177>
    2274:	43 c0       	rjmp	.+134    	; 0x22fc <__stack+0x11fd>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2276:	fe 01       	movw	r30, r28
    2278:	e7 57       	subi	r30, 0x77	; 119
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	60 81       	ld	r22, Z
    227e:	71 81       	ldd	r23, Z+1	; 0x01
    2280:	82 81       	ldd	r24, Z+2	; 0x02
    2282:	93 81       	ldd	r25, Z+3	; 0x03
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	40 e2       	ldi	r20, 0x20	; 32
    228a:	51 e4       	ldi	r21, 0x41	; 65
    228c:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	8e 01       	movw	r16, r28
    2296:	0d 57       	subi	r16, 0x7D	; 125
    2298:	1f 4f       	sbci	r17, 0xFF	; 255
    229a:	bc 01       	movw	r22, r24
    229c:	cd 01       	movw	r24, r26
    229e:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	f8 01       	movw	r30, r16
    22a8:	91 83       	std	Z+1, r25	; 0x01
    22aa:	80 83       	st	Z, r24
    22ac:	1f c0       	rjmp	.+62     	; 0x22ec <__stack+0x11ed>
    22ae:	fe 01       	movw	r30, r28
    22b0:	ef 57       	subi	r30, 0x7F	; 127
    22b2:	ff 4f       	sbci	r31, 0xFF	; 255
    22b4:	80 e9       	ldi	r24, 0x90	; 144
    22b6:	91 e0       	ldi	r25, 0x01	; 1
    22b8:	91 83       	std	Z+1, r25	; 0x01
    22ba:	80 83       	st	Z, r24
    22bc:	fe 01       	movw	r30, r28
    22be:	ef 57       	subi	r30, 0x7F	; 127
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	80 81       	ld	r24, Z
    22c4:	91 81       	ldd	r25, Z+1	; 0x01
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	f1 f7       	brne	.-4      	; 0x22c6 <__stack+0x11c7>
    22ca:	fe 01       	movw	r30, r28
    22cc:	ef 57       	subi	r30, 0x7F	; 127
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	91 83       	std	Z+1, r25	; 0x01
    22d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d4:	de 01       	movw	r26, r28
    22d6:	ad 57       	subi	r26, 0x7D	; 125
    22d8:	bf 4f       	sbci	r27, 0xFF	; 255
    22da:	fe 01       	movw	r30, r28
    22dc:	ed 57       	subi	r30, 0x7D	; 125
    22de:	ff 4f       	sbci	r31, 0xFF	; 255
    22e0:	80 81       	ld	r24, Z
    22e2:	91 81       	ldd	r25, Z+1	; 0x01
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	11 96       	adiw	r26, 0x01	; 1
    22e8:	9c 93       	st	X, r25
    22ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ec:	fe 01       	movw	r30, r28
    22ee:	ed 57       	subi	r30, 0x7D	; 125
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	80 81       	ld	r24, Z
    22f4:	91 81       	ldd	r25, Z+1	; 0x01
    22f6:	00 97       	sbiw	r24, 0x00	; 0
    22f8:	d1 f6       	brne	.-76     	; 0x22ae <__stack+0x11af>
    22fa:	27 c0       	rjmp	.+78     	; 0x234a <__stack+0x124b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fc:	8e 01       	movw	r16, r28
    22fe:	0d 57       	subi	r16, 0x7D	; 125
    2300:	1f 4f       	sbci	r17, 0xFF	; 255
    2302:	fe 01       	movw	r30, r28
    2304:	eb 57       	subi	r30, 0x7B	; 123
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	60 81       	ld	r22, Z
    230a:	71 81       	ldd	r23, Z+1	; 0x01
    230c:	82 81       	ldd	r24, Z+2	; 0x02
    230e:	93 81       	ldd	r25, Z+3	; 0x03
    2310:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	f8 01       	movw	r30, r16
    231a:	91 83       	std	Z+1, r25	; 0x01
    231c:	80 83       	st	Z, r24
    231e:	de 01       	movw	r26, r28
    2320:	a1 58       	subi	r26, 0x81	; 129
    2322:	bf 4f       	sbci	r27, 0xFF	; 255
    2324:	fe 01       	movw	r30, r28
    2326:	ed 57       	subi	r30, 0x7D	; 125
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	80 81       	ld	r24, Z
    232c:	91 81       	ldd	r25, Z+1	; 0x01
    232e:	8d 93       	st	X+, r24
    2330:	9c 93       	st	X, r25
    2332:	fe 01       	movw	r30, r28
    2334:	e1 58       	subi	r30, 0x81	; 129
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	80 81       	ld	r24, Z
    233a:	91 81       	ldd	r25, Z+1	; 0x01
    233c:	01 97       	sbiw	r24, 0x01	; 1
    233e:	f1 f7       	brne	.-4      	; 0x233c <__stack+0x123d>
    2340:	fe 01       	movw	r30, r28
    2342:	e1 58       	subi	r30, 0x81	; 129
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	91 83       	std	Z+1, r25	; 0x01
    2348:	80 83       	st	Z, r24
	}
_delay_ms(10);
}


PORTB=0b11011111; // 주행모터 및 모든 모터 정지
    234a:	e8 e3       	ldi	r30, 0x38	; 56
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	8f ed       	ldi	r24, 0xDF	; 223
    2350:	80 83       	st	Z, r24
printf("k is = %d \r\n" , k);
    2352:	00 d0       	rcall	.+0      	; 0x2354 <__stack+0x1255>
    2354:	00 d0       	rcall	.+0      	; 0x2356 <__stack+0x1257>
    2356:	ad b7       	in	r26, 0x3d	; 61
    2358:	be b7       	in	r27, 0x3e	; 62
    235a:	11 96       	adiw	r26, 0x01	; 1
    235c:	8e e2       	ldi	r24, 0x2E	; 46
    235e:	91 e0       	ldi	r25, 0x01	; 1
    2360:	11 96       	adiw	r26, 0x01	; 1
    2362:	9c 93       	st	X, r25
    2364:	8e 93       	st	-X, r24
    2366:	fe 01       	movw	r30, r28
    2368:	ef 53       	subi	r30, 0x3F	; 63
    236a:	fe 4f       	sbci	r31, 0xFE	; 254
    236c:	80 81       	ld	r24, Z
    236e:	91 81       	ldd	r25, Z+1	; 0x01
    2370:	13 96       	adiw	r26, 0x03	; 3
    2372:	9c 93       	st	X, r25
    2374:	8e 93       	st	-X, r24
    2376:	12 97       	sbiw	r26, 0x02	; 2
    2378:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <printf>
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0

moveslow2(); // 크레인 천천히 원상복귀 하기
    2384:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <moveslow2>
    2388:	fe 01       	movw	r30, r28
    238a:	e5 58       	subi	r30, 0x85	; 133
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	aa ef       	ldi	r26, 0xFA	; 250
    2394:	b4 e4       	ldi	r27, 0x44	; 68
    2396:	80 83       	st	Z, r24
    2398:	91 83       	std	Z+1, r25	; 0x01
    239a:	a2 83       	std	Z+2, r26	; 0x02
    239c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239e:	8e 01       	movw	r16, r28
    23a0:	09 58       	subi	r16, 0x89	; 137
    23a2:	1f 4f       	sbci	r17, 0xFF	; 255
    23a4:	fe 01       	movw	r30, r28
    23a6:	e5 58       	subi	r30, 0x85	; 133
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	60 81       	ld	r22, Z
    23ac:	71 81       	ldd	r23, Z+1	; 0x01
    23ae:	82 81       	ldd	r24, Z+2	; 0x02
    23b0:	93 81       	ldd	r25, Z+3	; 0x03
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	4a e7       	ldi	r20, 0x7A	; 122
    23b8:	55 e4       	ldi	r21, 0x45	; 69
    23ba:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	f8 01       	movw	r30, r16
    23c4:	80 83       	st	Z, r24
    23c6:	91 83       	std	Z+1, r25	; 0x01
    23c8:	a2 83       	std	Z+2, r26	; 0x02
    23ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23cc:	fe 01       	movw	r30, r28
    23ce:	e9 58       	subi	r30, 0x89	; 137
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	60 81       	ld	r22, Z
    23d4:	71 81       	ldd	r23, Z+1	; 0x01
    23d6:	82 81       	ldd	r24, Z+2	; 0x02
    23d8:	93 81       	ldd	r25, Z+3	; 0x03
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	40 e8       	ldi	r20, 0x80	; 128
    23e0:	5f e3       	ldi	r21, 0x3F	; 63
    23e2:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    23e6:	88 23       	and	r24, r24
    23e8:	44 f4       	brge	.+16     	; 0x23fa <__stack+0x12fb>
		__ticks = 1;
    23ea:	fe 01       	movw	r30, r28
    23ec:	eb 58       	subi	r30, 0x8B	; 139
    23ee:	ff 4f       	sbci	r31, 0xFF	; 255
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	91 83       	std	Z+1, r25	; 0x01
    23f6:	80 83       	st	Z, r24
    23f8:	64 c0       	rjmp	.+200    	; 0x24c2 <__stack+0x13c3>
	else if (__tmp > 65535)
    23fa:	fe 01       	movw	r30, r28
    23fc:	e9 58       	subi	r30, 0x89	; 137
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	60 81       	ld	r22, Z
    2402:	71 81       	ldd	r23, Z+1	; 0x01
    2404:	82 81       	ldd	r24, Z+2	; 0x02
    2406:	93 81       	ldd	r25, Z+3	; 0x03
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	3f ef       	ldi	r19, 0xFF	; 255
    240c:	4f e7       	ldi	r20, 0x7F	; 127
    240e:	57 e4       	ldi	r21, 0x47	; 71
    2410:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    2414:	18 16       	cp	r1, r24
    2416:	0c f0       	brlt	.+2      	; 0x241a <__stack+0x131b>
    2418:	43 c0       	rjmp	.+134    	; 0x24a0 <__stack+0x13a1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    241a:	fe 01       	movw	r30, r28
    241c:	e5 58       	subi	r30, 0x85	; 133
    241e:	ff 4f       	sbci	r31, 0xFF	; 255
    2420:	60 81       	ld	r22, Z
    2422:	71 81       	ldd	r23, Z+1	; 0x01
    2424:	82 81       	ldd	r24, Z+2	; 0x02
    2426:	93 81       	ldd	r25, Z+3	; 0x03
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	40 e2       	ldi	r20, 0x20	; 32
    242e:	51 e4       	ldi	r21, 0x41	; 65
    2430:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	8e 01       	movw	r16, r28
    243a:	0b 58       	subi	r16, 0x8B	; 139
    243c:	1f 4f       	sbci	r17, 0xFF	; 255
    243e:	bc 01       	movw	r22, r24
    2440:	cd 01       	movw	r24, r26
    2442:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	f8 01       	movw	r30, r16
    244c:	91 83       	std	Z+1, r25	; 0x01
    244e:	80 83       	st	Z, r24
    2450:	1f c0       	rjmp	.+62     	; 0x2490 <__stack+0x1391>
    2452:	fe 01       	movw	r30, r28
    2454:	ed 58       	subi	r30, 0x8D	; 141
    2456:	ff 4f       	sbci	r31, 0xFF	; 255
    2458:	80 e9       	ldi	r24, 0x90	; 144
    245a:	91 e0       	ldi	r25, 0x01	; 1
    245c:	91 83       	std	Z+1, r25	; 0x01
    245e:	80 83       	st	Z, r24
    2460:	fe 01       	movw	r30, r28
    2462:	ed 58       	subi	r30, 0x8D	; 141
    2464:	ff 4f       	sbci	r31, 0xFF	; 255
    2466:	80 81       	ld	r24, Z
    2468:	91 81       	ldd	r25, Z+1	; 0x01
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <__stack+0x136b>
    246e:	fe 01       	movw	r30, r28
    2470:	ed 58       	subi	r30, 0x8D	; 141
    2472:	ff 4f       	sbci	r31, 0xFF	; 255
    2474:	91 83       	std	Z+1, r25	; 0x01
    2476:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2478:	de 01       	movw	r26, r28
    247a:	ab 58       	subi	r26, 0x8B	; 139
    247c:	bf 4f       	sbci	r27, 0xFF	; 255
    247e:	fe 01       	movw	r30, r28
    2480:	eb 58       	subi	r30, 0x8B	; 139
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	80 81       	ld	r24, Z
    2486:	91 81       	ldd	r25, Z+1	; 0x01
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	11 96       	adiw	r26, 0x01	; 1
    248c:	9c 93       	st	X, r25
    248e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2490:	fe 01       	movw	r30, r28
    2492:	eb 58       	subi	r30, 0x8B	; 139
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	80 81       	ld	r24, Z
    2498:	91 81       	ldd	r25, Z+1	; 0x01
    249a:	00 97       	sbiw	r24, 0x00	; 0
    249c:	d1 f6       	brne	.-76     	; 0x2452 <__stack+0x1353>
    249e:	27 c0       	rjmp	.+78     	; 0x24ee <__stack+0x13ef>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a0:	8e 01       	movw	r16, r28
    24a2:	0b 58       	subi	r16, 0x8B	; 139
    24a4:	1f 4f       	sbci	r17, 0xFF	; 255
    24a6:	fe 01       	movw	r30, r28
    24a8:	e9 58       	subi	r30, 0x89	; 137
    24aa:	ff 4f       	sbci	r31, 0xFF	; 255
    24ac:	60 81       	ld	r22, Z
    24ae:	71 81       	ldd	r23, Z+1	; 0x01
    24b0:	82 81       	ldd	r24, Z+2	; 0x02
    24b2:	93 81       	ldd	r25, Z+3	; 0x03
    24b4:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	f8 01       	movw	r30, r16
    24be:	91 83       	std	Z+1, r25	; 0x01
    24c0:	80 83       	st	Z, r24
    24c2:	de 01       	movw	r26, r28
    24c4:	af 58       	subi	r26, 0x8F	; 143
    24c6:	bf 4f       	sbci	r27, 0xFF	; 255
    24c8:	fe 01       	movw	r30, r28
    24ca:	eb 58       	subi	r30, 0x8B	; 139
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	80 81       	ld	r24, Z
    24d0:	91 81       	ldd	r25, Z+1	; 0x01
    24d2:	8d 93       	st	X+, r24
    24d4:	9c 93       	st	X, r25
    24d6:	fe 01       	movw	r30, r28
    24d8:	ef 58       	subi	r30, 0x8F	; 143
    24da:	ff 4f       	sbci	r31, 0xFF	; 255
    24dc:	80 81       	ld	r24, Z
    24de:	91 81       	ldd	r25, Z+1	; 0x01
    24e0:	01 97       	sbiw	r24, 0x01	; 1
    24e2:	f1 f7       	brne	.-4      	; 0x24e0 <__stack+0x13e1>
    24e4:	fe 01       	movw	r30, r28
    24e6:	ef 58       	subi	r30, 0x8F	; 143
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	91 83       	std	Z+1, r25	; 0x01
    24ec:	80 83       	st	Z, r24

 _delay_ms(2000);
s=0; // 짐 없음 
    24ee:	fe 01       	movw	r30, r28
    24f0:	e3 54       	subi	r30, 0x43	; 67
    24f2:	fe 4f       	sbci	r31, 0xFE	; 254
    24f4:	11 82       	std	Z+1, r1	; 0x01
    24f6:	10 82       	st	Z, r1

//a=1;
PORTB = 0b00110000; // 01 전진 기본 설정
    24f8:	e8 e3       	ldi	r30, 0x38	; 56
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	80 e3       	ldi	r24, 0x30	; 48
    24fe:	80 83       	st	Z, r24
PORTC = 0b10000000;  //PC7사용
    2500:	e5 e3       	ldi	r30, 0x35	; 53
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 e8       	ldi	r24, 0x80	; 128
    2506:	80 83       	st	Z, r24
OCR0=52; // 차량 출발 
    2508:	e1 e5       	ldi	r30, 0x51	; 81
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	84 e3       	ldi	r24, 0x34	; 52
    250e:	80 83       	st	Z, r24
    2510:	fe 01       	movw	r30, r28
    2512:	e3 59       	subi	r30, 0x93	; 147
    2514:	ff 4f       	sbci	r31, 0xFF	; 255
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	aa e7       	ldi	r26, 0x7A	; 122
    251c:	b4 e4       	ldi	r27, 0x44	; 68
    251e:	80 83       	st	Z, r24
    2520:	91 83       	std	Z+1, r25	; 0x01
    2522:	a2 83       	std	Z+2, r26	; 0x02
    2524:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2526:	8e 01       	movw	r16, r28
    2528:	07 59       	subi	r16, 0x97	; 151
    252a:	1f 4f       	sbci	r17, 0xFF	; 255
    252c:	fe 01       	movw	r30, r28
    252e:	e3 59       	subi	r30, 0x93	; 147
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	60 81       	ld	r22, Z
    2534:	71 81       	ldd	r23, Z+1	; 0x01
    2536:	82 81       	ldd	r24, Z+2	; 0x02
    2538:	93 81       	ldd	r25, Z+3	; 0x03
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	4a e7       	ldi	r20, 0x7A	; 122
    2540:	55 e4       	ldi	r21, 0x45	; 69
    2542:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	f8 01       	movw	r30, r16
    254c:	80 83       	st	Z, r24
    254e:	91 83       	std	Z+1, r25	; 0x01
    2550:	a2 83       	std	Z+2, r26	; 0x02
    2552:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2554:	fe 01       	movw	r30, r28
    2556:	e7 59       	subi	r30, 0x97	; 151
    2558:	ff 4f       	sbci	r31, 0xFF	; 255
    255a:	60 81       	ld	r22, Z
    255c:	71 81       	ldd	r23, Z+1	; 0x01
    255e:	82 81       	ldd	r24, Z+2	; 0x02
    2560:	93 81       	ldd	r25, Z+3	; 0x03
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	40 e8       	ldi	r20, 0x80	; 128
    2568:	5f e3       	ldi	r21, 0x3F	; 63
    256a:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    256e:	88 23       	and	r24, r24
    2570:	44 f4       	brge	.+16     	; 0x2582 <__stack+0x1483>
		__ticks = 1;
    2572:	fe 01       	movw	r30, r28
    2574:	e9 59       	subi	r30, 0x99	; 153
    2576:	ff 4f       	sbci	r31, 0xFF	; 255
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	91 83       	std	Z+1, r25	; 0x01
    257e:	80 83       	st	Z, r24
    2580:	64 c0       	rjmp	.+200    	; 0x264a <__stack+0x154b>
	else if (__tmp > 65535)
    2582:	fe 01       	movw	r30, r28
    2584:	e7 59       	subi	r30, 0x97	; 151
    2586:	ff 4f       	sbci	r31, 0xFF	; 255
    2588:	60 81       	ld	r22, Z
    258a:	71 81       	ldd	r23, Z+1	; 0x01
    258c:	82 81       	ldd	r24, Z+2	; 0x02
    258e:	93 81       	ldd	r25, Z+3	; 0x03
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	3f ef       	ldi	r19, 0xFF	; 255
    2594:	4f e7       	ldi	r20, 0x7F	; 127
    2596:	57 e4       	ldi	r21, 0x47	; 71
    2598:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    259c:	18 16       	cp	r1, r24
    259e:	0c f0       	brlt	.+2      	; 0x25a2 <__stack+0x14a3>
    25a0:	43 c0       	rjmp	.+134    	; 0x2628 <__stack+0x1529>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a2:	fe 01       	movw	r30, r28
    25a4:	e3 59       	subi	r30, 0x93	; 147
    25a6:	ff 4f       	sbci	r31, 0xFF	; 255
    25a8:	60 81       	ld	r22, Z
    25aa:	71 81       	ldd	r23, Z+1	; 0x01
    25ac:	82 81       	ldd	r24, Z+2	; 0x02
    25ae:	93 81       	ldd	r25, Z+3	; 0x03
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	40 e2       	ldi	r20, 0x20	; 32
    25b6:	51 e4       	ldi	r21, 0x41	; 65
    25b8:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	8e 01       	movw	r16, r28
    25c2:	09 59       	subi	r16, 0x99	; 153
    25c4:	1f 4f       	sbci	r17, 0xFF	; 255
    25c6:	bc 01       	movw	r22, r24
    25c8:	cd 01       	movw	r24, r26
    25ca:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	f8 01       	movw	r30, r16
    25d4:	91 83       	std	Z+1, r25	; 0x01
    25d6:	80 83       	st	Z, r24
    25d8:	1f c0       	rjmp	.+62     	; 0x2618 <__stack+0x1519>
    25da:	fe 01       	movw	r30, r28
    25dc:	eb 59       	subi	r30, 0x9B	; 155
    25de:	ff 4f       	sbci	r31, 0xFF	; 255
    25e0:	80 e9       	ldi	r24, 0x90	; 144
    25e2:	91 e0       	ldi	r25, 0x01	; 1
    25e4:	91 83       	std	Z+1, r25	; 0x01
    25e6:	80 83       	st	Z, r24
    25e8:	fe 01       	movw	r30, r28
    25ea:	eb 59       	subi	r30, 0x9B	; 155
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	80 81       	ld	r24, Z
    25f0:	91 81       	ldd	r25, Z+1	; 0x01
    25f2:	01 97       	sbiw	r24, 0x01	; 1
    25f4:	f1 f7       	brne	.-4      	; 0x25f2 <__stack+0x14f3>
    25f6:	fe 01       	movw	r30, r28
    25f8:	eb 59       	subi	r30, 0x9B	; 155
    25fa:	ff 4f       	sbci	r31, 0xFF	; 255
    25fc:	91 83       	std	Z+1, r25	; 0x01
    25fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2600:	de 01       	movw	r26, r28
    2602:	a9 59       	subi	r26, 0x99	; 153
    2604:	bf 4f       	sbci	r27, 0xFF	; 255
    2606:	fe 01       	movw	r30, r28
    2608:	e9 59       	subi	r30, 0x99	; 153
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	80 81       	ld	r24, Z
    260e:	91 81       	ldd	r25, Z+1	; 0x01
    2610:	01 97       	sbiw	r24, 0x01	; 1
    2612:	11 96       	adiw	r26, 0x01	; 1
    2614:	9c 93       	st	X, r25
    2616:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2618:	fe 01       	movw	r30, r28
    261a:	e9 59       	subi	r30, 0x99	; 153
    261c:	ff 4f       	sbci	r31, 0xFF	; 255
    261e:	80 81       	ld	r24, Z
    2620:	91 81       	ldd	r25, Z+1	; 0x01
    2622:	00 97       	sbiw	r24, 0x00	; 0
    2624:	d1 f6       	brne	.-76     	; 0x25da <__stack+0x14db>
    2626:	de c0       	rjmp	.+444    	; 0x27e4 <__stack+0x16e5>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2628:	8e 01       	movw	r16, r28
    262a:	09 59       	subi	r16, 0x99	; 153
    262c:	1f 4f       	sbci	r17, 0xFF	; 255
    262e:	fe 01       	movw	r30, r28
    2630:	e7 59       	subi	r30, 0x97	; 151
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	60 81       	ld	r22, Z
    2636:	71 81       	ldd	r23, Z+1	; 0x01
    2638:	82 81       	ldd	r24, Z+2	; 0x02
    263a:	93 81       	ldd	r25, Z+3	; 0x03
    263c:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	f8 01       	movw	r30, r16
    2646:	91 83       	std	Z+1, r25	; 0x01
    2648:	80 83       	st	Z, r24
    264a:	de 01       	movw	r26, r28
    264c:	ad 59       	subi	r26, 0x9D	; 157
    264e:	bf 4f       	sbci	r27, 0xFF	; 255
    2650:	fe 01       	movw	r30, r28
    2652:	e9 59       	subi	r30, 0x99	; 153
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	80 81       	ld	r24, Z
    2658:	91 81       	ldd	r25, Z+1	; 0x01
    265a:	11 96       	adiw	r26, 0x01	; 1
    265c:	9c 93       	st	X, r25
    265e:	8e 93       	st	-X, r24
    2660:	fe 01       	movw	r30, r28
    2662:	ed 59       	subi	r30, 0x9D	; 157
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	80 81       	ld	r24, Z
    2668:	91 81       	ldd	r25, Z+1	; 0x01
    266a:	01 97       	sbiw	r24, 0x01	; 1
    266c:	f1 f7       	brne	.-4      	; 0x266a <__stack+0x156b>
    266e:	fe 01       	movw	r30, r28
    2670:	ed 59       	subi	r30, 0x9D	; 157
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	91 83       	std	Z+1, r25	; 0x01
    2676:	80 83       	st	Z, r24
    2678:	b5 c0       	rjmp	.+362    	; 0x27e4 <__stack+0x16e5>
    267a:	fe 01       	movw	r30, r28
    267c:	e1 5a       	subi	r30, 0xA1	; 161
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	a0 e2       	ldi	r26, 0x20	; 32
    2686:	b1 e4       	ldi	r27, 0x41	; 65
    2688:	80 83       	st	Z, r24
    268a:	91 83       	std	Z+1, r25	; 0x01
    268c:	a2 83       	std	Z+2, r26	; 0x02
    268e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2690:	8e 01       	movw	r16, r28
    2692:	05 5a       	subi	r16, 0xA5	; 165
    2694:	1f 4f       	sbci	r17, 0xFF	; 255
    2696:	fe 01       	movw	r30, r28
    2698:	e1 5a       	subi	r30, 0xA1	; 161
    269a:	ff 4f       	sbci	r31, 0xFF	; 255
    269c:	60 81       	ld	r22, Z
    269e:	71 81       	ldd	r23, Z+1	; 0x01
    26a0:	82 81       	ldd	r24, Z+2	; 0x02
    26a2:	93 81       	ldd	r25, Z+3	; 0x03
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	4a e7       	ldi	r20, 0x7A	; 122
    26aa:	55 e4       	ldi	r21, 0x45	; 69
    26ac:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	f8 01       	movw	r30, r16
    26b6:	80 83       	st	Z, r24
    26b8:	91 83       	std	Z+1, r25	; 0x01
    26ba:	a2 83       	std	Z+2, r26	; 0x02
    26bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26be:	fe 01       	movw	r30, r28
    26c0:	e5 5a       	subi	r30, 0xA5	; 165
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	60 81       	ld	r22, Z
    26c6:	71 81       	ldd	r23, Z+1	; 0x01
    26c8:	82 81       	ldd	r24, Z+2	; 0x02
    26ca:	93 81       	ldd	r25, Z+3	; 0x03
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	40 e8       	ldi	r20, 0x80	; 128
    26d2:	5f e3       	ldi	r21, 0x3F	; 63
    26d4:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    26d8:	88 23       	and	r24, r24
    26da:	44 f4       	brge	.+16     	; 0x26ec <__stack+0x15ed>
		__ticks = 1;
    26dc:	fe 01       	movw	r30, r28
    26de:	e7 5a       	subi	r30, 0xA7	; 167
    26e0:	ff 4f       	sbci	r31, 0xFF	; 255
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	91 83       	std	Z+1, r25	; 0x01
    26e8:	80 83       	st	Z, r24
    26ea:	64 c0       	rjmp	.+200    	; 0x27b4 <__stack+0x16b5>
	else if (__tmp > 65535)
    26ec:	fe 01       	movw	r30, r28
    26ee:	e5 5a       	subi	r30, 0xA5	; 165
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	60 81       	ld	r22, Z
    26f4:	71 81       	ldd	r23, Z+1	; 0x01
    26f6:	82 81       	ldd	r24, Z+2	; 0x02
    26f8:	93 81       	ldd	r25, Z+3	; 0x03
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	3f ef       	ldi	r19, 0xFF	; 255
    26fe:	4f e7       	ldi	r20, 0x7F	; 127
    2700:	57 e4       	ldi	r21, 0x47	; 71
    2702:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    2706:	18 16       	cp	r1, r24
    2708:	0c f0       	brlt	.+2      	; 0x270c <__stack+0x160d>
    270a:	43 c0       	rjmp	.+134    	; 0x2792 <__stack+0x1693>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    270c:	fe 01       	movw	r30, r28
    270e:	e1 5a       	subi	r30, 0xA1	; 161
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	60 81       	ld	r22, Z
    2714:	71 81       	ldd	r23, Z+1	; 0x01
    2716:	82 81       	ldd	r24, Z+2	; 0x02
    2718:	93 81       	ldd	r25, Z+3	; 0x03
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e2       	ldi	r20, 0x20	; 32
    2720:	51 e4       	ldi	r21, 0x41	; 65
    2722:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	8e 01       	movw	r16, r28
    272c:	07 5a       	subi	r16, 0xA7	; 167
    272e:	1f 4f       	sbci	r17, 0xFF	; 255
    2730:	bc 01       	movw	r22, r24
    2732:	cd 01       	movw	r24, r26
    2734:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	f8 01       	movw	r30, r16
    273e:	91 83       	std	Z+1, r25	; 0x01
    2740:	80 83       	st	Z, r24
    2742:	1f c0       	rjmp	.+62     	; 0x2782 <__stack+0x1683>
    2744:	fe 01       	movw	r30, r28
    2746:	e9 5a       	subi	r30, 0xA9	; 169
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	80 e9       	ldi	r24, 0x90	; 144
    274c:	91 e0       	ldi	r25, 0x01	; 1
    274e:	91 83       	std	Z+1, r25	; 0x01
    2750:	80 83       	st	Z, r24
    2752:	fe 01       	movw	r30, r28
    2754:	e9 5a       	subi	r30, 0xA9	; 169
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	80 81       	ld	r24, Z
    275a:	91 81       	ldd	r25, Z+1	; 0x01
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	f1 f7       	brne	.-4      	; 0x275c <__stack+0x165d>
    2760:	fe 01       	movw	r30, r28
    2762:	e9 5a       	subi	r30, 0xA9	; 169
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	91 83       	std	Z+1, r25	; 0x01
    2768:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    276a:	de 01       	movw	r26, r28
    276c:	a7 5a       	subi	r26, 0xA7	; 167
    276e:	bf 4f       	sbci	r27, 0xFF	; 255
    2770:	fe 01       	movw	r30, r28
    2772:	e7 5a       	subi	r30, 0xA7	; 167
    2774:	ff 4f       	sbci	r31, 0xFF	; 255
    2776:	80 81       	ld	r24, Z
    2778:	91 81       	ldd	r25, Z+1	; 0x01
    277a:	01 97       	sbiw	r24, 0x01	; 1
    277c:	11 96       	adiw	r26, 0x01	; 1
    277e:	9c 93       	st	X, r25
    2780:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2782:	fe 01       	movw	r30, r28
    2784:	e7 5a       	subi	r30, 0xA7	; 167
    2786:	ff 4f       	sbci	r31, 0xFF	; 255
    2788:	80 81       	ld	r24, Z
    278a:	91 81       	ldd	r25, Z+1	; 0x01
    278c:	00 97       	sbiw	r24, 0x00	; 0
    278e:	d1 f6       	brne	.-76     	; 0x2744 <__stack+0x1645>
    2790:	41 cc       	rjmp	.-1918   	; 0x2014 <__stack+0xf15>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2792:	8e 01       	movw	r16, r28
    2794:	07 5a       	subi	r16, 0xA7	; 167
    2796:	1f 4f       	sbci	r17, 0xFF	; 255
    2798:	fe 01       	movw	r30, r28
    279a:	e5 5a       	subi	r30, 0xA5	; 165
    279c:	ff 4f       	sbci	r31, 0xFF	; 255
    279e:	60 81       	ld	r22, Z
    27a0:	71 81       	ldd	r23, Z+1	; 0x01
    27a2:	82 81       	ldd	r24, Z+2	; 0x02
    27a4:	93 81       	ldd	r25, Z+3	; 0x03
    27a6:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	f8 01       	movw	r30, r16
    27b0:	91 83       	std	Z+1, r25	; 0x01
    27b2:	80 83       	st	Z, r24
    27b4:	de 01       	movw	r26, r28
    27b6:	ab 5a       	subi	r26, 0xAB	; 171
    27b8:	bf 4f       	sbci	r27, 0xFF	; 255
    27ba:	fe 01       	movw	r30, r28
    27bc:	e7 5a       	subi	r30, 0xA7	; 167
    27be:	ff 4f       	sbci	r31, 0xFF	; 255
    27c0:	80 81       	ld	r24, Z
    27c2:	91 81       	ldd	r25, Z+1	; 0x01
    27c4:	11 96       	adiw	r26, 0x01	; 1
    27c6:	9c 93       	st	X, r25
    27c8:	8e 93       	st	-X, r24
    27ca:	fe 01       	movw	r30, r28
    27cc:	eb 5a       	subi	r30, 0xAB	; 171
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	80 81       	ld	r24, Z
    27d2:	91 81       	ldd	r25, Z+1	; 0x01
    27d4:	01 97       	sbiw	r24, 0x01	; 1
    27d6:	f1 f7       	brne	.-4      	; 0x27d4 <__stack+0x16d5>
    27d8:	fe 01       	movw	r30, r28
    27da:	eb 5a       	subi	r30, 0xAB	; 171
    27dc:	ff 4f       	sbci	r31, 0xFF	; 255
    27de:	91 83       	std	Z+1, r25	; 0x01
    27e0:	80 83       	st	Z, r24
    27e2:	18 cc       	rjmp	.-2000   	; 0x2014 <__stack+0xf15>



} // if 문 끝짐내리기 끝

if ( (PINA & (1 << PINA6)) && (!(PINA & (1 << PINA5)))     ) //5 왼쪽 6 오른쪽 7중앙
    27e4:	e9 e3       	ldi	r30, 0x39	; 57
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	80 81       	ld	r24, Z
    27ea:	88 2f       	mov	r24, r24
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	80 74       	andi	r24, 0x40	; 64
    27f0:	90 70       	andi	r25, 0x00	; 0
    27f2:	00 97       	sbiw	r24, 0x00	; 0
    27f4:	09 f4       	brne	.+2      	; 0x27f8 <__stack+0x16f9>
    27f6:	d4 c0       	rjmp	.+424    	; 0x29a0 <__stack+0x18a1>
    27f8:	e9 e3       	ldi	r30, 0x39	; 57
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	80 81       	ld	r24, Z
    27fe:	88 2f       	mov	r24, r24
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	80 72       	andi	r24, 0x20	; 32
    2804:	90 70       	andi	r25, 0x00	; 0
    2806:	00 97       	sbiw	r24, 0x00	; 0
    2808:	09 f0       	breq	.+2      	; 0x280c <__stack+0x170d>
    280a:	ca c0       	rjmp	.+404    	; 0x29a0 <__stack+0x18a1>
               
{ // 왼쪽으로 회전
               	PORTB = 0b00110000; // 01 전진 기본 설정
    280c:	e8 e3       	ldi	r30, 0x38	; 56
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	80 e3       	ldi	r24, 0x30	; 48
    2812:	80 83       	st	Z, r24
	   			PORTC = 0b10000000;  //B2,3,4,5 씀
    2814:	e5 e3       	ldi	r30, 0x35	; 53
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	80 e8       	ldi	r24, 0x80	; 128
    281a:	80 83       	st	Z, r24
                OCR1A = 295; // 서보모터 각도 설정 (왼쪽으로 회전)
    281c:	ea e4       	ldi	r30, 0x4A	; 74
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	87 e2       	ldi	r24, 0x27	; 39
    2822:	91 e0       	ldi	r25, 0x01	; 1
    2824:	91 83       	std	Z+1, r25	; 0x01
    2826:	80 83       	st	Z, r24
                OCR0 = speed+35; // 모터 속도 설정
    2828:	a1 e5       	ldi	r26, 0x51	; 81
    282a:	b0 e0       	ldi	r27, 0x00	; 0
    282c:	fe 01       	movw	r30, r28
    282e:	e3 55       	subi	r30, 0x53	; 83
    2830:	fe 4f       	sbci	r31, 0xFE	; 254
    2832:	80 81       	ld	r24, Z
    2834:	8d 5d       	subi	r24, 0xDD	; 221
    2836:	8c 93       	st	X, r24
    2838:	fe 01       	movw	r30, r28
    283a:	ef 5a       	subi	r30, 0xAF	; 175
    283c:	ff 4f       	sbci	r31, 0xFF	; 255
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	a8 ec       	ldi	r26, 0xC8	; 200
    2844:	b2 e4       	ldi	r27, 0x42	; 66
    2846:	80 83       	st	Z, r24
    2848:	91 83       	std	Z+1, r25	; 0x01
    284a:	a2 83       	std	Z+2, r26	; 0x02
    284c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    284e:	8e 01       	movw	r16, r28
    2850:	03 5b       	subi	r16, 0xB3	; 179
    2852:	1f 4f       	sbci	r17, 0xFF	; 255
    2854:	fe 01       	movw	r30, r28
    2856:	ef 5a       	subi	r30, 0xAF	; 175
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	60 81       	ld	r22, Z
    285c:	71 81       	ldd	r23, Z+1	; 0x01
    285e:	82 81       	ldd	r24, Z+2	; 0x02
    2860:	93 81       	ldd	r25, Z+3	; 0x03
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	4a e7       	ldi	r20, 0x7A	; 122
    2868:	55 e4       	ldi	r21, 0x45	; 69
    286a:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	f8 01       	movw	r30, r16
    2874:	80 83       	st	Z, r24
    2876:	91 83       	std	Z+1, r25	; 0x01
    2878:	a2 83       	std	Z+2, r26	; 0x02
    287a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    287c:	fe 01       	movw	r30, r28
    287e:	e3 5b       	subi	r30, 0xB3	; 179
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	60 81       	ld	r22, Z
    2884:	71 81       	ldd	r23, Z+1	; 0x01
    2886:	82 81       	ldd	r24, Z+2	; 0x02
    2888:	93 81       	ldd	r25, Z+3	; 0x03
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	40 e8       	ldi	r20, 0x80	; 128
    2890:	5f e3       	ldi	r21, 0x3F	; 63
    2892:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    2896:	88 23       	and	r24, r24
    2898:	44 f4       	brge	.+16     	; 0x28aa <__stack+0x17ab>
		__ticks = 1;
    289a:	fe 01       	movw	r30, r28
    289c:	e5 5b       	subi	r30, 0xB5	; 181
    289e:	ff 4f       	sbci	r31, 0xFF	; 255
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	91 83       	std	Z+1, r25	; 0x01
    28a6:	80 83       	st	Z, r24
    28a8:	64 c0       	rjmp	.+200    	; 0x2972 <__stack+0x1873>
	else if (__tmp > 65535)
    28aa:	fe 01       	movw	r30, r28
    28ac:	e3 5b       	subi	r30, 0xB3	; 179
    28ae:	ff 4f       	sbci	r31, 0xFF	; 255
    28b0:	60 81       	ld	r22, Z
    28b2:	71 81       	ldd	r23, Z+1	; 0x01
    28b4:	82 81       	ldd	r24, Z+2	; 0x02
    28b6:	93 81       	ldd	r25, Z+3	; 0x03
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	3f ef       	ldi	r19, 0xFF	; 255
    28bc:	4f e7       	ldi	r20, 0x7F	; 127
    28be:	57 e4       	ldi	r21, 0x47	; 71
    28c0:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    28c4:	18 16       	cp	r1, r24
    28c6:	0c f0       	brlt	.+2      	; 0x28ca <__stack+0x17cb>
    28c8:	43 c0       	rjmp	.+134    	; 0x2950 <__stack+0x1851>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ca:	fe 01       	movw	r30, r28
    28cc:	ef 5a       	subi	r30, 0xAF	; 175
    28ce:	ff 4f       	sbci	r31, 0xFF	; 255
    28d0:	60 81       	ld	r22, Z
    28d2:	71 81       	ldd	r23, Z+1	; 0x01
    28d4:	82 81       	ldd	r24, Z+2	; 0x02
    28d6:	93 81       	ldd	r25, Z+3	; 0x03
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	40 e2       	ldi	r20, 0x20	; 32
    28de:	51 e4       	ldi	r21, 0x41	; 65
    28e0:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	8e 01       	movw	r16, r28
    28ea:	05 5b       	subi	r16, 0xB5	; 181
    28ec:	1f 4f       	sbci	r17, 0xFF	; 255
    28ee:	bc 01       	movw	r22, r24
    28f0:	cd 01       	movw	r24, r26
    28f2:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	f8 01       	movw	r30, r16
    28fc:	91 83       	std	Z+1, r25	; 0x01
    28fe:	80 83       	st	Z, r24
    2900:	1f c0       	rjmp	.+62     	; 0x2940 <__stack+0x1841>
    2902:	fe 01       	movw	r30, r28
    2904:	e7 5b       	subi	r30, 0xB7	; 183
    2906:	ff 4f       	sbci	r31, 0xFF	; 255
    2908:	80 e9       	ldi	r24, 0x90	; 144
    290a:	91 e0       	ldi	r25, 0x01	; 1
    290c:	91 83       	std	Z+1, r25	; 0x01
    290e:	80 83       	st	Z, r24
    2910:	fe 01       	movw	r30, r28
    2912:	e7 5b       	subi	r30, 0xB7	; 183
    2914:	ff 4f       	sbci	r31, 0xFF	; 255
    2916:	80 81       	ld	r24, Z
    2918:	91 81       	ldd	r25, Z+1	; 0x01
    291a:	01 97       	sbiw	r24, 0x01	; 1
    291c:	f1 f7       	brne	.-4      	; 0x291a <__stack+0x181b>
    291e:	fe 01       	movw	r30, r28
    2920:	e7 5b       	subi	r30, 0xB7	; 183
    2922:	ff 4f       	sbci	r31, 0xFF	; 255
    2924:	91 83       	std	Z+1, r25	; 0x01
    2926:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2928:	de 01       	movw	r26, r28
    292a:	a5 5b       	subi	r26, 0xB5	; 181
    292c:	bf 4f       	sbci	r27, 0xFF	; 255
    292e:	fe 01       	movw	r30, r28
    2930:	e5 5b       	subi	r30, 0xB5	; 181
    2932:	ff 4f       	sbci	r31, 0xFF	; 255
    2934:	80 81       	ld	r24, Z
    2936:	91 81       	ldd	r25, Z+1	; 0x01
    2938:	01 97       	sbiw	r24, 0x01	; 1
    293a:	11 96       	adiw	r26, 0x01	; 1
    293c:	9c 93       	st	X, r25
    293e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2940:	fe 01       	movw	r30, r28
    2942:	e5 5b       	subi	r30, 0xB5	; 181
    2944:	ff 4f       	sbci	r31, 0xFF	; 255
    2946:	80 81       	ld	r24, Z
    2948:	91 81       	ldd	r25, Z+1	; 0x01
    294a:	00 97       	sbiw	r24, 0x00	; 0
    294c:	d1 f6       	brne	.-76     	; 0x2902 <__stack+0x1803>
    294e:	28 c0       	rjmp	.+80     	; 0x29a0 <__stack+0x18a1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2950:	8e 01       	movw	r16, r28
    2952:	05 5b       	subi	r16, 0xB5	; 181
    2954:	1f 4f       	sbci	r17, 0xFF	; 255
    2956:	fe 01       	movw	r30, r28
    2958:	e3 5b       	subi	r30, 0xB3	; 179
    295a:	ff 4f       	sbci	r31, 0xFF	; 255
    295c:	60 81       	ld	r22, Z
    295e:	71 81       	ldd	r23, Z+1	; 0x01
    2960:	82 81       	ldd	r24, Z+2	; 0x02
    2962:	93 81       	ldd	r25, Z+3	; 0x03
    2964:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	f8 01       	movw	r30, r16
    296e:	91 83       	std	Z+1, r25	; 0x01
    2970:	80 83       	st	Z, r24
    2972:	de 01       	movw	r26, r28
    2974:	a9 5b       	subi	r26, 0xB9	; 185
    2976:	bf 4f       	sbci	r27, 0xFF	; 255
    2978:	fe 01       	movw	r30, r28
    297a:	e5 5b       	subi	r30, 0xB5	; 181
    297c:	ff 4f       	sbci	r31, 0xFF	; 255
    297e:	80 81       	ld	r24, Z
    2980:	91 81       	ldd	r25, Z+1	; 0x01
    2982:	11 96       	adiw	r26, 0x01	; 1
    2984:	9c 93       	st	X, r25
    2986:	8e 93       	st	-X, r24
    2988:	fe 01       	movw	r30, r28
    298a:	e9 5b       	subi	r30, 0xB9	; 185
    298c:	ff 4f       	sbci	r31, 0xFF	; 255
    298e:	80 81       	ld	r24, Z
    2990:	91 81       	ldd	r25, Z+1	; 0x01
    2992:	01 97       	sbiw	r24, 0x01	; 1
    2994:	f1 f7       	brne	.-4      	; 0x2992 <__stack+0x1893>
    2996:	fe 01       	movw	r30, r28
    2998:	e9 5b       	subi	r30, 0xB9	; 185
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	91 83       	std	Z+1, r25	; 0x01
    299e:	80 83       	st	Z, r24



}

if ((PINA & (1 << PINA5))  &&  (!(PINA & (1 << PINA6)))  ) 
    29a0:	e9 e3       	ldi	r30, 0x39	; 57
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	80 81       	ld	r24, Z
    29a6:	88 2f       	mov	r24, r24
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	80 72       	andi	r24, 0x20	; 32
    29ac:	90 70       	andi	r25, 0x00	; 0
    29ae:	00 97       	sbiw	r24, 0x00	; 0
    29b0:	09 f4       	brne	.+2      	; 0x29b4 <__stack+0x18b5>
    29b2:	a5 c0       	rjmp	.+330    	; 0x2afe <__stack+0x19ff>
    29b4:	e9 e3       	ldi	r30, 0x39	; 57
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	80 81       	ld	r24, Z
    29ba:	88 2f       	mov	r24, r24
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	80 74       	andi	r24, 0x40	; 64
    29c0:	90 70       	andi	r25, 0x00	; 0
    29c2:	00 97       	sbiw	r24, 0x00	; 0
    29c4:	09 f0       	breq	.+2      	; 0x29c8 <__stack+0x18c9>
    29c6:	9b c0       	rjmp	.+310    	; 0x2afe <__stack+0x19ff>
{
                // 오른쪽으로 회전
                PORTB = 0b00110000; // 01 전진 기본 설정
    29c8:	e8 e3       	ldi	r30, 0x38	; 56
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	80 e3       	ldi	r24, 0x30	; 48
    29ce:	80 83       	st	Z, r24
	   			PORTC = 0b10000000;  //B2,3,4,5 씀
    29d0:	e5 e3       	ldi	r30, 0x35	; 53
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	80 e8       	ldi	r24, 0x80	; 128
    29d6:	80 83       	st	Z, r24
                OCR1A = 440; // 서보모터 각도 설정 (오른쪽으로 회전)
    29d8:	ea e4       	ldi	r30, 0x4A	; 74
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	88 eb       	ldi	r24, 0xB8	; 184
    29de:	91 e0       	ldi	r25, 0x01	; 1
    29e0:	91 83       	std	Z+1, r25	; 0x01
    29e2:	80 83       	st	Z, r24
                OCR0 = speed+35; // 모터 속도 설정
    29e4:	a1 e5       	ldi	r26, 0x51	; 81
    29e6:	b0 e0       	ldi	r27, 0x00	; 0
    29e8:	fe 01       	movw	r30, r28
    29ea:	e3 55       	subi	r30, 0x53	; 83
    29ec:	fe 4f       	sbci	r31, 0xFE	; 254
    29ee:	80 81       	ld	r24, Z
    29f0:	8d 5d       	subi	r24, 0xDD	; 221
    29f2:	8c 93       	st	X, r24
    29f4:	fe 01       	movw	r30, r28
    29f6:	ed 5b       	subi	r30, 0xBD	; 189
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	80 e0       	ldi	r24, 0x00	; 0
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	a8 ec       	ldi	r26, 0xC8	; 200
    2a00:	b2 e4       	ldi	r27, 0x42	; 66
    2a02:	80 83       	st	Z, r24
    2a04:	91 83       	std	Z+1, r25	; 0x01
    2a06:	a2 83       	std	Z+2, r26	; 0x02
    2a08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a0a:	8e 01       	movw	r16, r28
    2a0c:	01 5c       	subi	r16, 0xC1	; 193
    2a0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a10:	fe 01       	movw	r30, r28
    2a12:	ed 5b       	subi	r30, 0xBD	; 189
    2a14:	ff 4f       	sbci	r31, 0xFF	; 255
    2a16:	60 81       	ld	r22, Z
    2a18:	71 81       	ldd	r23, Z+1	; 0x01
    2a1a:	82 81       	ldd	r24, Z+2	; 0x02
    2a1c:	93 81       	ldd	r25, Z+3	; 0x03
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	4a e7       	ldi	r20, 0x7A	; 122
    2a24:	55 e4       	ldi	r21, 0x45	; 69
    2a26:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	f8 01       	movw	r30, r16
    2a30:	80 83       	st	Z, r24
    2a32:	91 83       	std	Z+1, r25	; 0x01
    2a34:	a2 83       	std	Z+2, r26	; 0x02
    2a36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a38:	fe 01       	movw	r30, r28
    2a3a:	ff 96       	adiw	r30, 0x3f	; 63
    2a3c:	60 81       	ld	r22, Z
    2a3e:	71 81       	ldd	r23, Z+1	; 0x01
    2a40:	82 81       	ldd	r24, Z+2	; 0x02
    2a42:	93 81       	ldd	r25, Z+3	; 0x03
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	40 e8       	ldi	r20, 0x80	; 128
    2a4a:	5f e3       	ldi	r21, 0x3F	; 63
    2a4c:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    2a50:	88 23       	and	r24, r24
    2a52:	2c f4       	brge	.+10     	; 0x2a5e <__stack+0x195f>
		__ticks = 1;
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	9e af       	std	Y+62, r25	; 0x3e
    2a5a:	8d af       	std	Y+61, r24	; 0x3d
    2a5c:	46 c0       	rjmp	.+140    	; 0x2aea <__stack+0x19eb>
	else if (__tmp > 65535)
    2a5e:	fe 01       	movw	r30, r28
    2a60:	ff 96       	adiw	r30, 0x3f	; 63
    2a62:	60 81       	ld	r22, Z
    2a64:	71 81       	ldd	r23, Z+1	; 0x01
    2a66:	82 81       	ldd	r24, Z+2	; 0x02
    2a68:	93 81       	ldd	r25, Z+3	; 0x03
    2a6a:	20 e0       	ldi	r18, 0x00	; 0
    2a6c:	3f ef       	ldi	r19, 0xFF	; 255
    2a6e:	4f e7       	ldi	r20, 0x7F	; 127
    2a70:	57 e4       	ldi	r21, 0x47	; 71
    2a72:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    2a76:	18 16       	cp	r1, r24
    2a78:	64 f5       	brge	.+88     	; 0x2ad2 <__stack+0x19d3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	ed 5b       	subi	r30, 0xBD	; 189
    2a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a80:	60 81       	ld	r22, Z
    2a82:	71 81       	ldd	r23, Z+1	; 0x01
    2a84:	82 81       	ldd	r24, Z+2	; 0x02
    2a86:	93 81       	ldd	r25, Z+3	; 0x03
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	40 e2       	ldi	r20, 0x20	; 32
    2a8e:	51 e4       	ldi	r21, 0x41	; 65
    2a90:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	bc 01       	movw	r22, r24
    2a9a:	cd 01       	movw	r24, r26
    2a9c:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	9e af       	std	Y+62, r25	; 0x3e
    2aa6:	8d af       	std	Y+61, r24	; 0x3d
    2aa8:	0f c0       	rjmp	.+30     	; 0x2ac8 <__stack+0x19c9>
    2aaa:	80 e9       	ldi	r24, 0x90	; 144
    2aac:	91 e0       	ldi	r25, 0x01	; 1
    2aae:	9c af       	std	Y+60, r25	; 0x3c
    2ab0:	8b af       	std	Y+59, r24	; 0x3b
    2ab2:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ab4:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ab6:	01 97       	sbiw	r24, 0x01	; 1
    2ab8:	f1 f7       	brne	.-4      	; 0x2ab6 <__stack+0x19b7>
    2aba:	9c af       	std	Y+60, r25	; 0x3c
    2abc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2abe:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ac0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ac2:	01 97       	sbiw	r24, 0x01	; 1
    2ac4:	9e af       	std	Y+62, r25	; 0x3e
    2ac6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ac8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2aca:	9e ad       	ldd	r25, Y+62	; 0x3e
    2acc:	00 97       	sbiw	r24, 0x00	; 0
    2ace:	69 f7       	brne	.-38     	; 0x2aaa <__stack+0x19ab>
    2ad0:	16 c0       	rjmp	.+44     	; 0x2afe <__stack+0x19ff>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	ff 96       	adiw	r30, 0x3f	; 63
    2ad6:	60 81       	ld	r22, Z
    2ad8:	71 81       	ldd	r23, Z+1	; 0x01
    2ada:	82 81       	ldd	r24, Z+2	; 0x02
    2adc:	93 81       	ldd	r25, Z+3	; 0x03
    2ade:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	9e af       	std	Y+62, r25	; 0x3e
    2ae8:	8d af       	std	Y+61, r24	; 0x3d
    2aea:	8d ad       	ldd	r24, Y+61	; 0x3d
    2aec:	9e ad       	ldd	r25, Y+62	; 0x3e
    2aee:	9a af       	std	Y+58, r25	; 0x3a
    2af0:	89 af       	std	Y+57, r24	; 0x39
    2af2:	89 ad       	ldd	r24, Y+57	; 0x39
    2af4:	9a ad       	ldd	r25, Y+58	; 0x3a
    2af6:	01 97       	sbiw	r24, 0x01	; 1
    2af8:	f1 f7       	brne	.-4      	; 0x2af6 <__stack+0x19f7>
    2afa:	9a af       	std	Y+58, r25	; 0x3a
    2afc:	89 af       	std	Y+57, r24	; 0x39

            } 



 if (FRONT < 300 && (PINA & (1 << PINA6)) && (PINA & (1 << PINA5)) ) {
    2afe:	fe 01       	movw	r30, r28
    2b00:	eb 54       	subi	r30, 0x4B	; 75
    2b02:	fe 4f       	sbci	r31, 0xFE	; 254
    2b04:	80 81       	ld	r24, Z
    2b06:	91 81       	ldd	r25, Z+1	; 0x01
    2b08:	f1 e0       	ldi	r31, 0x01	; 1
    2b0a:	8c 32       	cpi	r24, 0x2C	; 44
    2b0c:	9f 07       	cpc	r25, r31
    2b0e:	08 f0       	brcs	.+2      	; 0x2b12 <__stack+0x1a13>
    2b10:	5f c1       	rjmp	.+702    	; 0x2dd0 <__stack+0x1cd1>
    2b12:	e9 e3       	ldi	r30, 0x39	; 57
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	80 81       	ld	r24, Z
    2b18:	88 2f       	mov	r24, r24
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	80 74       	andi	r24, 0x40	; 64
    2b1e:	90 70       	andi	r25, 0x00	; 0
    2b20:	00 97       	sbiw	r24, 0x00	; 0
    2b22:	09 f4       	brne	.+2      	; 0x2b26 <__stack+0x1a27>
    2b24:	55 c1       	rjmp	.+682    	; 0x2dd0 <__stack+0x1cd1>
    2b26:	e9 e3       	ldi	r30, 0x39	; 57
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	80 81       	ld	r24, Z
    2b2c:	88 2f       	mov	r24, r24
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	80 72       	andi	r24, 0x20	; 32
    2b32:	90 70       	andi	r25, 0x00	; 0
    2b34:	00 97       	sbiw	r24, 0x00	; 0
    2b36:	09 f4       	brne	.+2      	; 0x2b3a <__stack+0x1a3b>
    2b38:	4b c1       	rjmp	.+662    	; 0x2dd0 <__stack+0x1cd1>
            LEFT = distanceFRONT(TRIGFL, ECHOFL);
    2b3a:	82 e0       	ldi	r24, 0x02	; 2
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	63 e0       	ldi	r22, 0x03	; 3
    2b40:	70 e0       	ldi	r23, 0x00	; 0
    2b42:	0e 94 0e 18 	call	0x301c	; 0x301c <distanceFRONT>
    2b46:	fe 01       	movw	r30, r28
    2b48:	ed 54       	subi	r30, 0x4D	; 77
    2b4a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b4c:	91 83       	std	Z+1, r25	; 0x01
    2b4e:	80 83       	st	Z, r24
            RIGHT = distanceFRONT(TRIGFR, ECHOFR);
    2b50:	84 e0       	ldi	r24, 0x04	; 4
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	65 e0       	ldi	r22, 0x05	; 5
    2b56:	70 e0       	ldi	r23, 0x00	; 0
    2b58:	0e 94 0e 18 	call	0x301c	; 0x301c <distanceFRONT>
    2b5c:	fe 01       	movw	r30, r28
    2b5e:	ef 54       	subi	r30, 0x4F	; 79
    2b60:	fe 4f       	sbci	r31, 0xFE	; 254
    2b62:	91 83       	std	Z+1, r25	; 0x01
    2b64:	80 83       	st	Z, r24
	    

            if (LEFT > RIGHT) {
    2b66:	fe 01       	movw	r30, r28
    2b68:	ed 54       	subi	r30, 0x4D	; 77
    2b6a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b6c:	de 01       	movw	r26, r28
    2b6e:	af 54       	subi	r26, 0x4F	; 79
    2b70:	be 4f       	sbci	r27, 0xFE	; 254
    2b72:	20 81       	ld	r18, Z
    2b74:	31 81       	ldd	r19, Z+1	; 0x01
    2b76:	8d 91       	ld	r24, X+
    2b78:	9c 91       	ld	r25, X
    2b7a:	11 97       	sbiw	r26, 0x01	; 1
    2b7c:	82 17       	cp	r24, r18
    2b7e:	93 07       	cpc	r25, r19
    2b80:	08 f0       	brcs	.+2      	; 0x2b84 <__stack+0x1a85>
    2b82:	8b c0       	rjmp	.+278    	; 0x2c9a <__stack+0x1b9b>
                // 왼쪽으로 회전
               	PORTB = 0b00110000; // 01 전진 기본 설정
    2b84:	e8 e3       	ldi	r30, 0x38	; 56
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	80 e3       	ldi	r24, 0x30	; 48
    2b8a:	80 83       	st	Z, r24
	   			PORTC = 0b10000000;  //B2,3,4,5 씀
    2b8c:	e5 e3       	ldi	r30, 0x35	; 53
    2b8e:	f0 e0       	ldi	r31, 0x00	; 0
    2b90:	80 e8       	ldi	r24, 0x80	; 128
    2b92:	80 83       	st	Z, r24
                OCR1A = 295; // 서보모터 각도 설정 (왼쪽으로 회전)
    2b94:	ea e4       	ldi	r30, 0x4A	; 74
    2b96:	f0 e0       	ldi	r31, 0x00	; 0
    2b98:	87 e2       	ldi	r24, 0x27	; 39
    2b9a:	91 e0       	ldi	r25, 0x01	; 1
    2b9c:	91 83       	std	Z+1, r25	; 0x01
    2b9e:	80 83       	st	Z, r24
                OCR0 = speed+40; // 모터 속도 설정
    2ba0:	a1 e5       	ldi	r26, 0x51	; 81
    2ba2:	b0 e0       	ldi	r27, 0x00	; 0
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	e3 55       	subi	r30, 0x53	; 83
    2ba8:	fe 4f       	sbci	r31, 0xFE	; 254
    2baa:	80 81       	ld	r24, Z
    2bac:	88 5d       	subi	r24, 0xD8	; 216
    2bae:	8c 93       	st	X, r24
    2bb0:	80 e0       	ldi	r24, 0x00	; 0
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	a8 ec       	ldi	r26, 0xC8	; 200
    2bb6:	b2 e4       	ldi	r27, 0x42	; 66
    2bb8:	8d ab       	std	Y+53, r24	; 0x35
    2bba:	9e ab       	std	Y+54, r25	; 0x36
    2bbc:	af ab       	std	Y+55, r26	; 0x37
    2bbe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc0:	6d a9       	ldd	r22, Y+53	; 0x35
    2bc2:	7e a9       	ldd	r23, Y+54	; 0x36
    2bc4:	8f a9       	ldd	r24, Y+55	; 0x37
    2bc6:	98 ad       	ldd	r25, Y+56	; 0x38
    2bc8:	20 e0       	ldi	r18, 0x00	; 0
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	4a e7       	ldi	r20, 0x7A	; 122
    2bce:	55 e4       	ldi	r21, 0x45	; 69
    2bd0:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	89 ab       	std	Y+49, r24	; 0x31
    2bda:	9a ab       	std	Y+50, r25	; 0x32
    2bdc:	ab ab       	std	Y+51, r26	; 0x33
    2bde:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2be0:	69 a9       	ldd	r22, Y+49	; 0x31
    2be2:	7a a9       	ldd	r23, Y+50	; 0x32
    2be4:	8b a9       	ldd	r24, Y+51	; 0x33
    2be6:	9c a9       	ldd	r25, Y+52	; 0x34
    2be8:	20 e0       	ldi	r18, 0x00	; 0
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	40 e8       	ldi	r20, 0x80	; 128
    2bee:	5f e3       	ldi	r21, 0x3F	; 63
    2bf0:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    2bf4:	88 23       	and	r24, r24
    2bf6:	2c f4       	brge	.+10     	; 0x2c02 <__stack+0x1b03>
		__ticks = 1;
    2bf8:	81 e0       	ldi	r24, 0x01	; 1
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	98 ab       	std	Y+48, r25	; 0x30
    2bfe:	8f a7       	std	Y+47, r24	; 0x2f
    2c00:	40 c0       	rjmp	.+128    	; 0x2c82 <__stack+0x1b83>
	else if (__tmp > 65535)
    2c02:	69 a9       	ldd	r22, Y+49	; 0x31
    2c04:	7a a9       	ldd	r23, Y+50	; 0x32
    2c06:	8b a9       	ldd	r24, Y+51	; 0x33
    2c08:	9c a9       	ldd	r25, Y+52	; 0x34
    2c0a:	20 e0       	ldi	r18, 0x00	; 0
    2c0c:	3f ef       	ldi	r19, 0xFF	; 255
    2c0e:	4f e7       	ldi	r20, 0x7F	; 127
    2c10:	57 e4       	ldi	r21, 0x47	; 71
    2c12:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    2c16:	18 16       	cp	r1, r24
    2c18:	54 f5       	brge	.+84     	; 0x2c6e <__stack+0x1b6f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c1a:	6d a9       	ldd	r22, Y+53	; 0x35
    2c1c:	7e a9       	ldd	r23, Y+54	; 0x36
    2c1e:	8f a9       	ldd	r24, Y+55	; 0x37
    2c20:	98 ad       	ldd	r25, Y+56	; 0x38
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	40 e2       	ldi	r20, 0x20	; 32
    2c28:	51 e4       	ldi	r21, 0x41	; 65
    2c2a:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    2c2e:	dc 01       	movw	r26, r24
    2c30:	cb 01       	movw	r24, r22
    2c32:	bc 01       	movw	r22, r24
    2c34:	cd 01       	movw	r24, r26
    2c36:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	98 ab       	std	Y+48, r25	; 0x30
    2c40:	8f a7       	std	Y+47, r24	; 0x2f
    2c42:	0f c0       	rjmp	.+30     	; 0x2c62 <__stack+0x1b63>
    2c44:	80 e9       	ldi	r24, 0x90	; 144
    2c46:	91 e0       	ldi	r25, 0x01	; 1
    2c48:	9e a7       	std	Y+46, r25	; 0x2e
    2c4a:	8d a7       	std	Y+45, r24	; 0x2d
    2c4c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c4e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c50:	01 97       	sbiw	r24, 0x01	; 1
    2c52:	f1 f7       	brne	.-4      	; 0x2c50 <__stack+0x1b51>
    2c54:	9e a7       	std	Y+46, r25	; 0x2e
    2c56:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c58:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c5a:	98 a9       	ldd	r25, Y+48	; 0x30
    2c5c:	01 97       	sbiw	r24, 0x01	; 1
    2c5e:	98 ab       	std	Y+48, r25	; 0x30
    2c60:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c62:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c64:	98 a9       	ldd	r25, Y+48	; 0x30
    2c66:	00 97       	sbiw	r24, 0x00	; 0
    2c68:	69 f7       	brne	.-38     	; 0x2c44 <__stack+0x1b45>
    2c6a:	0c 94 a9 00 	jmp	0x152	; 0x152 <main+0x84>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c6e:	69 a9       	ldd	r22, Y+49	; 0x31
    2c70:	7a a9       	ldd	r23, Y+50	; 0x32
    2c72:	8b a9       	ldd	r24, Y+51	; 0x33
    2c74:	9c a9       	ldd	r25, Y+52	; 0x34
    2c76:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	98 ab       	std	Y+48, r25	; 0x30
    2c80:	8f a7       	std	Y+47, r24	; 0x2f
    2c82:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c84:	98 a9       	ldd	r25, Y+48	; 0x30
    2c86:	9c a7       	std	Y+44, r25	; 0x2c
    2c88:	8b a7       	std	Y+43, r24	; 0x2b
    2c8a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c8c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c8e:	01 97       	sbiw	r24, 0x01	; 1
    2c90:	f1 f7       	brne	.-4      	; 0x2c8e <__stack+0x1b8f>
    2c92:	9c a7       	std	Y+44, r25	; 0x2c
    2c94:	8b a7       	std	Y+43, r24	; 0x2b
    2c96:	0c 94 a9 00 	jmp	0x152	; 0x152 <main+0x84>
		_delay_ms(100);
            } else if((LEFT < RIGHT)) {
    2c9a:	fe 01       	movw	r30, r28
    2c9c:	ed 54       	subi	r30, 0x4D	; 77
    2c9e:	fe 4f       	sbci	r31, 0xFE	; 254
    2ca0:	de 01       	movw	r26, r28
    2ca2:	af 54       	subi	r26, 0x4F	; 79
    2ca4:	be 4f       	sbci	r27, 0xFE	; 254
    2ca6:	20 81       	ld	r18, Z
    2ca8:	31 81       	ldd	r19, Z+1	; 0x01
    2caa:	8d 91       	ld	r24, X+
    2cac:	9c 91       	ld	r25, X
    2cae:	11 97       	sbiw	r26, 0x01	; 1
    2cb0:	28 17       	cp	r18, r24
    2cb2:	39 07       	cpc	r19, r25
    2cb4:	10 f0       	brcs	.+4      	; 0x2cba <__stack+0x1bbb>
    2cb6:	0c 94 a9 00 	jmp	0x152	; 0x152 <main+0x84>
                // 오른쪽으로 회전
                PORTB = 0b00110000; // 01 전진 기본 설정
    2cba:	e8 e3       	ldi	r30, 0x38	; 56
    2cbc:	f0 e0       	ldi	r31, 0x00	; 0
    2cbe:	80 e3       	ldi	r24, 0x30	; 48
    2cc0:	80 83       	st	Z, r24
	   			PORTC = 0b10000000;  //B2,3,4,5 씀
    2cc2:	e5 e3       	ldi	r30, 0x35	; 53
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	80 e8       	ldi	r24, 0x80	; 128
    2cc8:	80 83       	st	Z, r24
                OCR1A = 450; // 서보모터 각도 설정 (오른쪽으로 회전)
    2cca:	ea e4       	ldi	r30, 0x4A	; 74
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	82 ec       	ldi	r24, 0xC2	; 194
    2cd0:	91 e0       	ldi	r25, 0x01	; 1
    2cd2:	91 83       	std	Z+1, r25	; 0x01
    2cd4:	80 83       	st	Z, r24
                OCR0 = speed+40; // 모터 속도 설정
    2cd6:	a1 e5       	ldi	r26, 0x51	; 81
    2cd8:	b0 e0       	ldi	r27, 0x00	; 0
    2cda:	fe 01       	movw	r30, r28
    2cdc:	e3 55       	subi	r30, 0x53	; 83
    2cde:	fe 4f       	sbci	r31, 0xFE	; 254
    2ce0:	80 81       	ld	r24, Z
    2ce2:	88 5d       	subi	r24, 0xD8	; 216
    2ce4:	8c 93       	st	X, r24
    2ce6:	80 e0       	ldi	r24, 0x00	; 0
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	a8 ec       	ldi	r26, 0xC8	; 200
    2cec:	b2 e4       	ldi	r27, 0x42	; 66
    2cee:	8f a3       	std	Y+39, r24	; 0x27
    2cf0:	98 a7       	std	Y+40, r25	; 0x28
    2cf2:	a9 a7       	std	Y+41, r26	; 0x29
    2cf4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cf6:	6f a1       	ldd	r22, Y+39	; 0x27
    2cf8:	78 a5       	ldd	r23, Y+40	; 0x28
    2cfa:	89 a5       	ldd	r24, Y+41	; 0x29
    2cfc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	4a e7       	ldi	r20, 0x7A	; 122
    2d04:	55 e4       	ldi	r21, 0x45	; 69
    2d06:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	8b a3       	std	Y+35, r24	; 0x23
    2d10:	9c a3       	std	Y+36, r25	; 0x24
    2d12:	ad a3       	std	Y+37, r26	; 0x25
    2d14:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d16:	6b a1       	ldd	r22, Y+35	; 0x23
    2d18:	7c a1       	ldd	r23, Y+36	; 0x24
    2d1a:	8d a1       	ldd	r24, Y+37	; 0x25
    2d1c:	9e a1       	ldd	r25, Y+38	; 0x26
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	40 e8       	ldi	r20, 0x80	; 128
    2d24:	5f e3       	ldi	r21, 0x3F	; 63
    2d26:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    2d2a:	88 23       	and	r24, r24
    2d2c:	2c f4       	brge	.+10     	; 0x2d38 <__stack+0x1c39>
		__ticks = 1;
    2d2e:	81 e0       	ldi	r24, 0x01	; 1
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	9a a3       	std	Y+34, r25	; 0x22
    2d34:	89 a3       	std	Y+33, r24	; 0x21
    2d36:	40 c0       	rjmp	.+128    	; 0x2db8 <__stack+0x1cb9>
	else if (__tmp > 65535)
    2d38:	6b a1       	ldd	r22, Y+35	; 0x23
    2d3a:	7c a1       	ldd	r23, Y+36	; 0x24
    2d3c:	8d a1       	ldd	r24, Y+37	; 0x25
    2d3e:	9e a1       	ldd	r25, Y+38	; 0x26
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	3f ef       	ldi	r19, 0xFF	; 255
    2d44:	4f e7       	ldi	r20, 0x7F	; 127
    2d46:	57 e4       	ldi	r21, 0x47	; 71
    2d48:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    2d4c:	18 16       	cp	r1, r24
    2d4e:	54 f5       	brge	.+84     	; 0x2da4 <__stack+0x1ca5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d50:	6f a1       	ldd	r22, Y+39	; 0x27
    2d52:	78 a5       	ldd	r23, Y+40	; 0x28
    2d54:	89 a5       	ldd	r24, Y+41	; 0x29
    2d56:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d58:	20 e0       	ldi	r18, 0x00	; 0
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
    2d5c:	40 e2       	ldi	r20, 0x20	; 32
    2d5e:	51 e4       	ldi	r21, 0x41	; 65
    2d60:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    2d64:	dc 01       	movw	r26, r24
    2d66:	cb 01       	movw	r24, r22
    2d68:	bc 01       	movw	r22, r24
    2d6a:	cd 01       	movw	r24, r26
    2d6c:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    2d70:	dc 01       	movw	r26, r24
    2d72:	cb 01       	movw	r24, r22
    2d74:	9a a3       	std	Y+34, r25	; 0x22
    2d76:	89 a3       	std	Y+33, r24	; 0x21
    2d78:	0f c0       	rjmp	.+30     	; 0x2d98 <__stack+0x1c99>
    2d7a:	80 e9       	ldi	r24, 0x90	; 144
    2d7c:	91 e0       	ldi	r25, 0x01	; 1
    2d7e:	98 a3       	std	Y+32, r25	; 0x20
    2d80:	8f 8f       	std	Y+31, r24	; 0x1f
    2d82:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d84:	98 a1       	ldd	r25, Y+32	; 0x20
    2d86:	01 97       	sbiw	r24, 0x01	; 1
    2d88:	f1 f7       	brne	.-4      	; 0x2d86 <__stack+0x1c87>
    2d8a:	98 a3       	std	Y+32, r25	; 0x20
    2d8c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d8e:	89 a1       	ldd	r24, Y+33	; 0x21
    2d90:	9a a1       	ldd	r25, Y+34	; 0x22
    2d92:	01 97       	sbiw	r24, 0x01	; 1
    2d94:	9a a3       	std	Y+34, r25	; 0x22
    2d96:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d98:	89 a1       	ldd	r24, Y+33	; 0x21
    2d9a:	9a a1       	ldd	r25, Y+34	; 0x22
    2d9c:	00 97       	sbiw	r24, 0x00	; 0
    2d9e:	69 f7       	brne	.-38     	; 0x2d7a <__stack+0x1c7b>
    2da0:	0c 94 a9 00 	jmp	0x152	; 0x152 <main+0x84>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da4:	6b a1       	ldd	r22, Y+35	; 0x23
    2da6:	7c a1       	ldd	r23, Y+36	; 0x24
    2da8:	8d a1       	ldd	r24, Y+37	; 0x25
    2daa:	9e a1       	ldd	r25, Y+38	; 0x26
    2dac:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    2db0:	dc 01       	movw	r26, r24
    2db2:	cb 01       	movw	r24, r22
    2db4:	9a a3       	std	Y+34, r25	; 0x22
    2db6:	89 a3       	std	Y+33, r24	; 0x21
    2db8:	89 a1       	ldd	r24, Y+33	; 0x21
    2dba:	9a a1       	ldd	r25, Y+34	; 0x22
    2dbc:	9e 8f       	std	Y+30, r25	; 0x1e
    2dbe:	8d 8f       	std	Y+29, r24	; 0x1d
    2dc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dc2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dc4:	01 97       	sbiw	r24, 0x01	; 1
    2dc6:	f1 f7       	brne	.-4      	; 0x2dc4 <__stack+0x1cc5>
    2dc8:	9e 8f       	std	Y+30, r25	; 0x1e
    2dca:	8d 8f       	std	Y+29, r24	; 0x1d
    2dcc:	0c 94 a9 00 	jmp	0x152	; 0x152 <main+0x84>
	        _delay_ms(100);
            }
        } 
		else {//정면 장애물 없는 경우

		 if (RIGHT < 250) {
    2dd0:	fe 01       	movw	r30, r28
    2dd2:	ef 54       	subi	r30, 0x4F	; 79
    2dd4:	fe 4f       	sbci	r31, 0xFE	; 254
    2dd6:	80 81       	ld	r24, Z
    2dd8:	91 81       	ldd	r25, Z+1	; 0x01
    2dda:	8a 3f       	cpi	r24, 0xFA	; 250
    2ddc:	91 05       	cpc	r25, r1
    2dde:	08 f0       	brcs	.+2      	; 0x2de2 <__stack+0x1ce3>
    2de0:	88 c0       	rjmp	.+272    	; 0x2ef2 <__stack+0x1df3>
                // 왼쪽으로 회전
               	PORTB = 0b00110000; // 01 전진 기본 설정
    2de2:	e8 e3       	ldi	r30, 0x38	; 56
    2de4:	f0 e0       	ldi	r31, 0x00	; 0
    2de6:	80 e3       	ldi	r24, 0x30	; 48
    2de8:	80 83       	st	Z, r24
	   			PORTC = 0b10000000;  //B2,3,4,5 씀
    2dea:	e5 e3       	ldi	r30, 0x35	; 53
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	80 e8       	ldi	r24, 0x80	; 128
    2df0:	80 83       	st	Z, r24
                OCR1A = 290; // 서보모터 각도 설정 (왼쪽으로 회전)
    2df2:	ea e4       	ldi	r30, 0x4A	; 74
    2df4:	f0 e0       	ldi	r31, 0x00	; 0
    2df6:	82 e2       	ldi	r24, 0x22	; 34
    2df8:	91 e0       	ldi	r25, 0x01	; 1
    2dfa:	91 83       	std	Z+1, r25	; 0x01
    2dfc:	80 83       	st	Z, r24
                OCR0 = speed+55; // 모터 속도 설정
    2dfe:	a1 e5       	ldi	r26, 0x51	; 81
    2e00:	b0 e0       	ldi	r27, 0x00	; 0
    2e02:	fe 01       	movw	r30, r28
    2e04:	e3 55       	subi	r30, 0x53	; 83
    2e06:	fe 4f       	sbci	r31, 0xFE	; 254
    2e08:	80 81       	ld	r24, Z
    2e0a:	89 5c       	subi	r24, 0xC9	; 201
    2e0c:	8c 93       	st	X, r24
    2e0e:	80 e0       	ldi	r24, 0x00	; 0
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	a8 ec       	ldi	r26, 0xC8	; 200
    2e14:	b2 e4       	ldi	r27, 0x42	; 66
    2e16:	89 8f       	std	Y+25, r24	; 0x19
    2e18:	9a 8f       	std	Y+26, r25	; 0x1a
    2e1a:	ab 8f       	std	Y+27, r26	; 0x1b
    2e1c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e1e:	69 8d       	ldd	r22, Y+25	; 0x19
    2e20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	4a e7       	ldi	r20, 0x7A	; 122
    2e2c:	55 e4       	ldi	r21, 0x45	; 69
    2e2e:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    2e32:	dc 01       	movw	r26, r24
    2e34:	cb 01       	movw	r24, r22
    2e36:	8d 8b       	std	Y+21, r24	; 0x15
    2e38:	9e 8b       	std	Y+22, r25	; 0x16
    2e3a:	af 8b       	std	Y+23, r26	; 0x17
    2e3c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e3e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e40:	7e 89       	ldd	r23, Y+22	; 0x16
    2e42:	8f 89       	ldd	r24, Y+23	; 0x17
    2e44:	98 8d       	ldd	r25, Y+24	; 0x18
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	40 e8       	ldi	r20, 0x80	; 128
    2e4c:	5f e3       	ldi	r21, 0x3F	; 63
    2e4e:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    2e52:	88 23       	and	r24, r24
    2e54:	2c f4       	brge	.+10     	; 0x2e60 <__stack+0x1d61>
		__ticks = 1;
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	9c 8b       	std	Y+20, r25	; 0x14
    2e5c:	8b 8b       	std	Y+19, r24	; 0x13
    2e5e:	3f c0       	rjmp	.+126    	; 0x2ede <__stack+0x1ddf>
	else if (__tmp > 65535)
    2e60:	6d 89       	ldd	r22, Y+21	; 0x15
    2e62:	7e 89       	ldd	r23, Y+22	; 0x16
    2e64:	8f 89       	ldd	r24, Y+23	; 0x17
    2e66:	98 8d       	ldd	r25, Y+24	; 0x18
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	3f ef       	ldi	r19, 0xFF	; 255
    2e6c:	4f e7       	ldi	r20, 0x7F	; 127
    2e6e:	57 e4       	ldi	r21, 0x47	; 71
    2e70:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    2e74:	18 16       	cp	r1, r24
    2e76:	4c f5       	brge	.+82     	; 0x2eca <__stack+0x1dcb>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e78:	69 8d       	ldd	r22, Y+25	; 0x19
    2e7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e80:	20 e0       	ldi	r18, 0x00	; 0
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	40 e2       	ldi	r20, 0x20	; 32
    2e86:	51 e4       	ldi	r21, 0x41	; 65
    2e88:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	bc 01       	movw	r22, r24
    2e92:	cd 01       	movw	r24, r26
    2e94:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    2e98:	dc 01       	movw	r26, r24
    2e9a:	cb 01       	movw	r24, r22
    2e9c:	9c 8b       	std	Y+20, r25	; 0x14
    2e9e:	8b 8b       	std	Y+19, r24	; 0x13
    2ea0:	0f c0       	rjmp	.+30     	; 0x2ec0 <__stack+0x1dc1>
    2ea2:	80 e9       	ldi	r24, 0x90	; 144
    2ea4:	91 e0       	ldi	r25, 0x01	; 1
    2ea6:	9a 8b       	std	Y+18, r25	; 0x12
    2ea8:	89 8b       	std	Y+17, r24	; 0x11
    2eaa:	89 89       	ldd	r24, Y+17	; 0x11
    2eac:	9a 89       	ldd	r25, Y+18	; 0x12
    2eae:	01 97       	sbiw	r24, 0x01	; 1
    2eb0:	f1 f7       	brne	.-4      	; 0x2eae <__stack+0x1daf>
    2eb2:	9a 8b       	std	Y+18, r25	; 0x12
    2eb4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb6:	8b 89       	ldd	r24, Y+19	; 0x13
    2eb8:	9c 89       	ldd	r25, Y+20	; 0x14
    2eba:	01 97       	sbiw	r24, 0x01	; 1
    2ebc:	9c 8b       	std	Y+20, r25	; 0x14
    2ebe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ec0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ec2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ec4:	00 97       	sbiw	r24, 0x00	; 0
    2ec6:	69 f7       	brne	.-38     	; 0x2ea2 <__stack+0x1da3>
    2ec8:	14 c0       	rjmp	.+40     	; 0x2ef2 <__stack+0x1df3>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eca:	6d 89       	ldd	r22, Y+21	; 0x15
    2ecc:	7e 89       	ldd	r23, Y+22	; 0x16
    2ece:	8f 89       	ldd	r24, Y+23	; 0x17
    2ed0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ed2:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	9c 8b       	std	Y+20, r25	; 0x14
    2edc:	8b 8b       	std	Y+19, r24	; 0x13
    2ede:	8b 89       	ldd	r24, Y+19	; 0x13
    2ee0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ee2:	98 8b       	std	Y+16, r25	; 0x10
    2ee4:	8f 87       	std	Y+15, r24	; 0x0f
    2ee6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ee8:	98 89       	ldd	r25, Y+16	; 0x10
    2eea:	01 97       	sbiw	r24, 0x01	; 1
    2eec:	f1 f7       	brne	.-4      	; 0x2eea <__stack+0x1deb>
    2eee:	98 8b       	std	Y+16, r25	; 0x10
    2ef0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
            } 
		if  (LEFT < 250){
    2ef2:	fe 01       	movw	r30, r28
    2ef4:	ed 54       	subi	r30, 0x4D	; 77
    2ef6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ef8:	80 81       	ld	r24, Z
    2efa:	91 81       	ldd	r25, Z+1	; 0x01
    2efc:	8a 3f       	cpi	r24, 0xFA	; 250
    2efe:	91 05       	cpc	r25, r1
    2f00:	10 f0       	brcs	.+4      	; 0x2f06 <__stack+0x1e07>
    2f02:	0c 94 a9 00 	jmp	0x152	; 0x152 <main+0x84>
                // 오른쪽으로 회전
                PORTB = 0b00110000; // 01 전진 기본 설정
    2f06:	e8 e3       	ldi	r30, 0x38	; 56
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	80 e3       	ldi	r24, 0x30	; 48
    2f0c:	80 83       	st	Z, r24
	   			PORTC = 0b10000000;  //B2,3,4,5 씀
    2f0e:	e5 e3       	ldi	r30, 0x35	; 53
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	80 e8       	ldi	r24, 0x80	; 128
    2f14:	80 83       	st	Z, r24
                OCR1A = 445; // 서보모터 각도 설정 (오른쪽으로 회전)
    2f16:	ea e4       	ldi	r30, 0x4A	; 74
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	8d eb       	ldi	r24, 0xBD	; 189
    2f1c:	91 e0       	ldi	r25, 0x01	; 1
    2f1e:	91 83       	std	Z+1, r25	; 0x01
    2f20:	80 83       	st	Z, r24
                OCR0 = speed+55; // 모터 속도 설정
    2f22:	a1 e5       	ldi	r26, 0x51	; 81
    2f24:	b0 e0       	ldi	r27, 0x00	; 0
    2f26:	fe 01       	movw	r30, r28
    2f28:	e3 55       	subi	r30, 0x53	; 83
    2f2a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f2c:	80 81       	ld	r24, Z
    2f2e:	89 5c       	subi	r24, 0xC9	; 201
    2f30:	8c 93       	st	X, r24
    2f32:	80 e0       	ldi	r24, 0x00	; 0
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	a8 ec       	ldi	r26, 0xC8	; 200
    2f38:	b2 e4       	ldi	r27, 0x42	; 66
    2f3a:	8b 87       	std	Y+11, r24	; 0x0b
    2f3c:	9c 87       	std	Y+12, r25	; 0x0c
    2f3e:	ad 87       	std	Y+13, r26	; 0x0d
    2f40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f42:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f44:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f46:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f48:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f4a:	20 e0       	ldi	r18, 0x00	; 0
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	4a e7       	ldi	r20, 0x7A	; 122
    2f50:	55 e4       	ldi	r21, 0x45	; 69
    2f52:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    2f56:	dc 01       	movw	r26, r24
    2f58:	cb 01       	movw	r24, r22
    2f5a:	8f 83       	std	Y+7, r24	; 0x07
    2f5c:	98 87       	std	Y+8, r25	; 0x08
    2f5e:	a9 87       	std	Y+9, r26	; 0x09
    2f60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f62:	6f 81       	ldd	r22, Y+7	; 0x07
    2f64:	78 85       	ldd	r23, Y+8	; 0x08
    2f66:	89 85       	ldd	r24, Y+9	; 0x09
    2f68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	40 e8       	ldi	r20, 0x80	; 128
    2f70:	5f e3       	ldi	r21, 0x3F	; 63
    2f72:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    2f76:	88 23       	and	r24, r24
    2f78:	2c f4       	brge	.+10     	; 0x2f84 <__stack+0x1e85>
		__ticks = 1;
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	9e 83       	std	Y+6, r25	; 0x06
    2f80:	8d 83       	std	Y+5, r24	; 0x05
    2f82:	40 c0       	rjmp	.+128    	; 0x3004 <__stack+0x1f05>
	else if (__tmp > 65535)
    2f84:	6f 81       	ldd	r22, Y+7	; 0x07
    2f86:	78 85       	ldd	r23, Y+8	; 0x08
    2f88:	89 85       	ldd	r24, Y+9	; 0x09
    2f8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	3f ef       	ldi	r19, 0xFF	; 255
    2f90:	4f e7       	ldi	r20, 0x7F	; 127
    2f92:	57 e4       	ldi	r21, 0x47	; 71
    2f94:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    2f98:	18 16       	cp	r1, r24
    2f9a:	54 f5       	brge	.+84     	; 0x2ff0 <__stack+0x1ef1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	40 e2       	ldi	r20, 0x20	; 32
    2faa:	51 e4       	ldi	r21, 0x41	; 65
    2fac:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    2fb0:	dc 01       	movw	r26, r24
    2fb2:	cb 01       	movw	r24, r22
    2fb4:	bc 01       	movw	r22, r24
    2fb6:	cd 01       	movw	r24, r26
    2fb8:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	cb 01       	movw	r24, r22
    2fc0:	9e 83       	std	Y+6, r25	; 0x06
    2fc2:	8d 83       	std	Y+5, r24	; 0x05
    2fc4:	0f c0       	rjmp	.+30     	; 0x2fe4 <__stack+0x1ee5>
    2fc6:	80 e9       	ldi	r24, 0x90	; 144
    2fc8:	91 e0       	ldi	r25, 0x01	; 1
    2fca:	9c 83       	std	Y+4, r25	; 0x04
    2fcc:	8b 83       	std	Y+3, r24	; 0x03
    2fce:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd2:	01 97       	sbiw	r24, 0x01	; 1
    2fd4:	f1 f7       	brne	.-4      	; 0x2fd2 <__stack+0x1ed3>
    2fd6:	9c 83       	std	Y+4, r25	; 0x04
    2fd8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fda:	8d 81       	ldd	r24, Y+5	; 0x05
    2fdc:	9e 81       	ldd	r25, Y+6	; 0x06
    2fde:	01 97       	sbiw	r24, 0x01	; 1
    2fe0:	9e 83       	std	Y+6, r25	; 0x06
    2fe2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe6:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe8:	00 97       	sbiw	r24, 0x00	; 0
    2fea:	69 f7       	brne	.-38     	; 0x2fc6 <__stack+0x1ec7>
    2fec:	0c 94 a9 00 	jmp	0x152	; 0x152 <main+0x84>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ff2:	78 85       	ldd	r23, Y+8	; 0x08
    2ff4:	89 85       	ldd	r24, Y+9	; 0x09
    2ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff8:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	cb 01       	movw	r24, r22
    3000:	9e 83       	std	Y+6, r25	; 0x06
    3002:	8d 83       	std	Y+5, r24	; 0x05
    3004:	8d 81       	ldd	r24, Y+5	; 0x05
    3006:	9e 81       	ldd	r25, Y+6	; 0x06
    3008:	9a 83       	std	Y+2, r25	; 0x02
    300a:	89 83       	std	Y+1, r24	; 0x01
    300c:	89 81       	ldd	r24, Y+1	; 0x01
    300e:	9a 81       	ldd	r25, Y+2	; 0x02
    3010:	01 97       	sbiw	r24, 0x01	; 1
    3012:	f1 f7       	brne	.-4      	; 0x3010 <__stack+0x1f11>
    3014:	9a 83       	std	Y+2, r25	; 0x02
    3016:	89 83       	std	Y+1, r24	; 0x01
    3018:	0c 94 a9 00 	jmp	0x152	; 0x152 <main+0x84>

0000301c <distanceFRONT>:





unsigned distanceFRONT(int TRIG, int ECHO){
    301c:	df 93       	push	r29
    301e:	cf 93       	push	r28
    3020:	cd b7       	in	r28, 0x3d	; 61
    3022:	de b7       	in	r29, 0x3e	; 62
    3024:	e4 97       	sbiw	r28, 0x34	; 52
    3026:	0f b6       	in	r0, 0x3f	; 63
    3028:	f8 94       	cli
    302a:	de bf       	out	0x3e, r29	; 62
    302c:	0f be       	out	0x3f, r0	; 63
    302e:	cd bf       	out	0x3d, r28	; 61
    3030:	9a ab       	std	Y+50, r25	; 0x32
    3032:	89 ab       	std	Y+49, r24	; 0x31
    3034:	7c ab       	std	Y+52, r23	; 0x34
    3036:	6b ab       	std	Y+51, r22	; 0x33

   
   TCCR3B=0x03;     // Timer/Counter3 클록 4us(64분주)
    3038:	ea e8       	ldi	r30, 0x8A	; 138
    303a:	f0 e0       	ldi	r31, 0x00	; 0
    303c:	83 e0       	ldi	r24, 0x03	; 3
    303e:	80 83       	st	Z, r24

   PORTD &= ~(1<<TRIG);  // TrigL=LOW상태
    3040:	a2 e3       	ldi	r26, 0x32	; 50
    3042:	b0 e0       	ldi	r27, 0x00	; 0
    3044:	e2 e3       	ldi	r30, 0x32	; 50
    3046:	f0 e0       	ldi	r31, 0x00	; 0
    3048:	80 81       	ld	r24, Z
    304a:	28 2f       	mov	r18, r24
    304c:	81 e0       	ldi	r24, 0x01	; 1
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	09 a8       	ldd	r0, Y+49	; 0x31
    3052:	02 c0       	rjmp	.+4      	; 0x3058 <distanceFRONT+0x3c>
    3054:	88 0f       	add	r24, r24
    3056:	99 1f       	adc	r25, r25
    3058:	0a 94       	dec	r0
    305a:	e2 f7       	brpl	.-8      	; 0x3054 <distanceFRONT+0x38>
    305c:	80 95       	com	r24
    305e:	82 23       	and	r24, r18
    3060:	8c 93       	st	X, r24
    3062:	80 e0       	ldi	r24, 0x00	; 0
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	a0 e2       	ldi	r26, 0x20	; 32
    3068:	b1 e4       	ldi	r27, 0x41	; 65
    306a:	8d a7       	std	Y+45, r24	; 0x2d
    306c:	9e a7       	std	Y+46, r25	; 0x2e
    306e:	af a7       	std	Y+47, r26	; 0x2f
    3070:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3072:	6d a5       	ldd	r22, Y+45	; 0x2d
    3074:	7e a5       	ldd	r23, Y+46	; 0x2e
    3076:	8f a5       	ldd	r24, Y+47	; 0x2f
    3078:	98 a9       	ldd	r25, Y+48	; 0x30
    307a:	2b ea       	ldi	r18, 0xAB	; 171
    307c:	3a ea       	ldi	r19, 0xAA	; 170
    307e:	4a ea       	ldi	r20, 0xAA	; 170
    3080:	50 e4       	ldi	r21, 0x40	; 64
    3082:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    3086:	dc 01       	movw	r26, r24
    3088:	cb 01       	movw	r24, r22
    308a:	89 a7       	std	Y+41, r24	; 0x29
    308c:	9a a7       	std	Y+42, r25	; 0x2a
    308e:	ab a7       	std	Y+43, r26	; 0x2b
    3090:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3092:	69 a5       	ldd	r22, Y+41	; 0x29
    3094:	7a a5       	ldd	r23, Y+42	; 0x2a
    3096:	8b a5       	ldd	r24, Y+43	; 0x2b
    3098:	9c a5       	ldd	r25, Y+44	; 0x2c
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	40 e8       	ldi	r20, 0x80	; 128
    30a0:	5f e3       	ldi	r21, 0x3F	; 63
    30a2:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    30a6:	88 23       	and	r24, r24
    30a8:	1c f4       	brge	.+6      	; 0x30b0 <distanceFRONT+0x94>
		__ticks = 1;
    30aa:	81 e0       	ldi	r24, 0x01	; 1
    30ac:	88 a7       	std	Y+40, r24	; 0x28
    30ae:	91 c0       	rjmp	.+290    	; 0x31d2 <distanceFRONT+0x1b6>
	else if (__tmp > 255)
    30b0:	69 a5       	ldd	r22, Y+41	; 0x29
    30b2:	7a a5       	ldd	r23, Y+42	; 0x2a
    30b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    30b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	4f e7       	ldi	r20, 0x7F	; 127
    30be:	53 e4       	ldi	r21, 0x43	; 67
    30c0:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    30c4:	18 16       	cp	r1, r24
    30c6:	0c f0       	brlt	.+2      	; 0x30ca <distanceFRONT+0xae>
    30c8:	7b c0       	rjmp	.+246    	; 0x31c0 <distanceFRONT+0x1a4>
	{
		_delay_ms(__us / 1000.0);
    30ca:	6d a5       	ldd	r22, Y+45	; 0x2d
    30cc:	7e a5       	ldd	r23, Y+46	; 0x2e
    30ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    30d0:	98 a9       	ldd	r25, Y+48	; 0x30
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	4a e7       	ldi	r20, 0x7A	; 122
    30d8:	54 e4       	ldi	r21, 0x44	; 68
    30da:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <__divsf3>
    30de:	dc 01       	movw	r26, r24
    30e0:	cb 01       	movw	r24, r22
    30e2:	8c a3       	std	Y+36, r24	; 0x24
    30e4:	9d a3       	std	Y+37, r25	; 0x25
    30e6:	ae a3       	std	Y+38, r26	; 0x26
    30e8:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ea:	6c a1       	ldd	r22, Y+36	; 0x24
    30ec:	7d a1       	ldd	r23, Y+37	; 0x25
    30ee:	8e a1       	ldd	r24, Y+38	; 0x26
    30f0:	9f a1       	ldd	r25, Y+39	; 0x27
    30f2:	20 e0       	ldi	r18, 0x00	; 0
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	4a e7       	ldi	r20, 0x7A	; 122
    30f8:	55 e4       	ldi	r21, 0x45	; 69
    30fa:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    30fe:	dc 01       	movw	r26, r24
    3100:	cb 01       	movw	r24, r22
    3102:	88 a3       	std	Y+32, r24	; 0x20
    3104:	99 a3       	std	Y+33, r25	; 0x21
    3106:	aa a3       	std	Y+34, r26	; 0x22
    3108:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    310a:	68 a1       	ldd	r22, Y+32	; 0x20
    310c:	79 a1       	ldd	r23, Y+33	; 0x21
    310e:	8a a1       	ldd	r24, Y+34	; 0x22
    3110:	9b a1       	ldd	r25, Y+35	; 0x23
    3112:	20 e0       	ldi	r18, 0x00	; 0
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	40 e8       	ldi	r20, 0x80	; 128
    3118:	5f e3       	ldi	r21, 0x3F	; 63
    311a:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    311e:	88 23       	and	r24, r24
    3120:	2c f4       	brge	.+10     	; 0x312c <distanceFRONT+0x110>
		__ticks = 1;
    3122:	81 e0       	ldi	r24, 0x01	; 1
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	9f 8f       	std	Y+31, r25	; 0x1f
    3128:	8e 8f       	std	Y+30, r24	; 0x1e
    312a:	3f c0       	rjmp	.+126    	; 0x31aa <distanceFRONT+0x18e>
	else if (__tmp > 65535)
    312c:	68 a1       	ldd	r22, Y+32	; 0x20
    312e:	79 a1       	ldd	r23, Y+33	; 0x21
    3130:	8a a1       	ldd	r24, Y+34	; 0x22
    3132:	9b a1       	ldd	r25, Y+35	; 0x23
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	3f ef       	ldi	r19, 0xFF	; 255
    3138:	4f e7       	ldi	r20, 0x7F	; 127
    313a:	57 e4       	ldi	r21, 0x47	; 71
    313c:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    3140:	18 16       	cp	r1, r24
    3142:	4c f5       	brge	.+82     	; 0x3196 <distanceFRONT+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3144:	6c a1       	ldd	r22, Y+36	; 0x24
    3146:	7d a1       	ldd	r23, Y+37	; 0x25
    3148:	8e a1       	ldd	r24, Y+38	; 0x26
    314a:	9f a1       	ldd	r25, Y+39	; 0x27
    314c:	20 e0       	ldi	r18, 0x00	; 0
    314e:	30 e0       	ldi	r19, 0x00	; 0
    3150:	40 e2       	ldi	r20, 0x20	; 32
    3152:	51 e4       	ldi	r21, 0x41	; 65
    3154:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    3158:	dc 01       	movw	r26, r24
    315a:	cb 01       	movw	r24, r22
    315c:	bc 01       	movw	r22, r24
    315e:	cd 01       	movw	r24, r26
    3160:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    3164:	dc 01       	movw	r26, r24
    3166:	cb 01       	movw	r24, r22
    3168:	9f 8f       	std	Y+31, r25	; 0x1f
    316a:	8e 8f       	std	Y+30, r24	; 0x1e
    316c:	0f c0       	rjmp	.+30     	; 0x318c <distanceFRONT+0x170>
    316e:	80 e9       	ldi	r24, 0x90	; 144
    3170:	91 e0       	ldi	r25, 0x01	; 1
    3172:	9d 8f       	std	Y+29, r25	; 0x1d
    3174:	8c 8f       	std	Y+28, r24	; 0x1c
    3176:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3178:	9d 8d       	ldd	r25, Y+29	; 0x1d
    317a:	01 97       	sbiw	r24, 0x01	; 1
    317c:	f1 f7       	brne	.-4      	; 0x317a <distanceFRONT+0x15e>
    317e:	9d 8f       	std	Y+29, r25	; 0x1d
    3180:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3182:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3184:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3186:	01 97       	sbiw	r24, 0x01	; 1
    3188:	9f 8f       	std	Y+31, r25	; 0x1f
    318a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    318c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    318e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3190:	00 97       	sbiw	r24, 0x00	; 0
    3192:	69 f7       	brne	.-38     	; 0x316e <distanceFRONT+0x152>
    3194:	24 c0       	rjmp	.+72     	; 0x31de <distanceFRONT+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3196:	68 a1       	ldd	r22, Y+32	; 0x20
    3198:	79 a1       	ldd	r23, Y+33	; 0x21
    319a:	8a a1       	ldd	r24, Y+34	; 0x22
    319c:	9b a1       	ldd	r25, Y+35	; 0x23
    319e:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    31a2:	dc 01       	movw	r26, r24
    31a4:	cb 01       	movw	r24, r22
    31a6:	9f 8f       	std	Y+31, r25	; 0x1f
    31a8:	8e 8f       	std	Y+30, r24	; 0x1e
    31aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31ac:	9f 8d       	ldd	r25, Y+31	; 0x1f
    31ae:	9b 8f       	std	Y+27, r25	; 0x1b
    31b0:	8a 8f       	std	Y+26, r24	; 0x1a
    31b2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    31b4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    31b6:	01 97       	sbiw	r24, 0x01	; 1
    31b8:	f1 f7       	brne	.-4      	; 0x31b6 <distanceFRONT+0x19a>
    31ba:	9b 8f       	std	Y+27, r25	; 0x1b
    31bc:	8a 8f       	std	Y+26, r24	; 0x1a
    31be:	0f c0       	rjmp	.+30     	; 0x31de <distanceFRONT+0x1c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31c0:	69 a5       	ldd	r22, Y+41	; 0x29
    31c2:	7a a5       	ldd	r23, Y+42	; 0x2a
    31c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    31c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    31c8:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    31cc:	dc 01       	movw	r26, r24
    31ce:	cb 01       	movw	r24, r22
    31d0:	88 a7       	std	Y+40, r24	; 0x28
    31d2:	88 a5       	ldd	r24, Y+40	; 0x28
    31d4:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31d6:	89 8d       	ldd	r24, Y+25	; 0x19
    31d8:	8a 95       	dec	r24
    31da:	f1 f7       	brne	.-4      	; 0x31d8 <distanceFRONT+0x1bc>
    31dc:	89 8f       	std	Y+25, r24	; 0x19
   _delay_us(10);         // 10us동안 유지

   PORTD |= (1<<TRIG);   // TrigL=HIGH -> 거리 측정 명령 시작
    31de:	a2 e3       	ldi	r26, 0x32	; 50
    31e0:	b0 e0       	ldi	r27, 0x00	; 0
    31e2:	e2 e3       	ldi	r30, 0x32	; 50
    31e4:	f0 e0       	ldi	r31, 0x00	; 0
    31e6:	80 81       	ld	r24, Z
    31e8:	28 2f       	mov	r18, r24
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	09 a8       	ldd	r0, Y+49	; 0x31
    31f0:	02 c0       	rjmp	.+4      	; 0x31f6 <distanceFRONT+0x1da>
    31f2:	88 0f       	add	r24, r24
    31f4:	99 1f       	adc	r25, r25
    31f6:	0a 94       	dec	r0
    31f8:	e2 f7       	brpl	.-8      	; 0x31f2 <distanceFRONT+0x1d6>
    31fa:	82 2b       	or	r24, r18
    31fc:	8c 93       	st	X, r24
    31fe:	80 e0       	ldi	r24, 0x00	; 0
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	a0 e2       	ldi	r26, 0x20	; 32
    3204:	b1 e4       	ldi	r27, 0x41	; 65
    3206:	8d 8b       	std	Y+21, r24	; 0x15
    3208:	9e 8b       	std	Y+22, r25	; 0x16
    320a:	af 8b       	std	Y+23, r26	; 0x17
    320c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    320e:	6d 89       	ldd	r22, Y+21	; 0x15
    3210:	7e 89       	ldd	r23, Y+22	; 0x16
    3212:	8f 89       	ldd	r24, Y+23	; 0x17
    3214:	98 8d       	ldd	r25, Y+24	; 0x18
    3216:	2b ea       	ldi	r18, 0xAB	; 171
    3218:	3a ea       	ldi	r19, 0xAA	; 170
    321a:	4a ea       	ldi	r20, 0xAA	; 170
    321c:	50 e4       	ldi	r21, 0x40	; 64
    321e:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    3222:	dc 01       	movw	r26, r24
    3224:	cb 01       	movw	r24, r22
    3226:	89 8b       	std	Y+17, r24	; 0x11
    3228:	9a 8b       	std	Y+18, r25	; 0x12
    322a:	ab 8b       	std	Y+19, r26	; 0x13
    322c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    322e:	69 89       	ldd	r22, Y+17	; 0x11
    3230:	7a 89       	ldd	r23, Y+18	; 0x12
    3232:	8b 89       	ldd	r24, Y+19	; 0x13
    3234:	9c 89       	ldd	r25, Y+20	; 0x14
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	40 e8       	ldi	r20, 0x80	; 128
    323c:	5f e3       	ldi	r21, 0x3F	; 63
    323e:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    3242:	88 23       	and	r24, r24
    3244:	1c f4       	brge	.+6      	; 0x324c <distanceFRONT+0x230>
		__ticks = 1;
    3246:	81 e0       	ldi	r24, 0x01	; 1
    3248:	88 8b       	std	Y+16, r24	; 0x10
    324a:	91 c0       	rjmp	.+290    	; 0x336e <distanceFRONT+0x352>
	else if (__tmp > 255)
    324c:	69 89       	ldd	r22, Y+17	; 0x11
    324e:	7a 89       	ldd	r23, Y+18	; 0x12
    3250:	8b 89       	ldd	r24, Y+19	; 0x13
    3252:	9c 89       	ldd	r25, Y+20	; 0x14
    3254:	20 e0       	ldi	r18, 0x00	; 0
    3256:	30 e0       	ldi	r19, 0x00	; 0
    3258:	4f e7       	ldi	r20, 0x7F	; 127
    325a:	53 e4       	ldi	r21, 0x43	; 67
    325c:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    3260:	18 16       	cp	r1, r24
    3262:	0c f0       	brlt	.+2      	; 0x3266 <distanceFRONT+0x24a>
    3264:	7b c0       	rjmp	.+246    	; 0x335c <distanceFRONT+0x340>
	{
		_delay_ms(__us / 1000.0);
    3266:	6d 89       	ldd	r22, Y+21	; 0x15
    3268:	7e 89       	ldd	r23, Y+22	; 0x16
    326a:	8f 89       	ldd	r24, Y+23	; 0x17
    326c:	98 8d       	ldd	r25, Y+24	; 0x18
    326e:	20 e0       	ldi	r18, 0x00	; 0
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	4a e7       	ldi	r20, 0x7A	; 122
    3274:	54 e4       	ldi	r21, 0x44	; 68
    3276:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <__divsf3>
    327a:	dc 01       	movw	r26, r24
    327c:	cb 01       	movw	r24, r22
    327e:	8c 87       	std	Y+12, r24	; 0x0c
    3280:	9d 87       	std	Y+13, r25	; 0x0d
    3282:	ae 87       	std	Y+14, r26	; 0x0e
    3284:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3286:	6c 85       	ldd	r22, Y+12	; 0x0c
    3288:	7d 85       	ldd	r23, Y+13	; 0x0d
    328a:	8e 85       	ldd	r24, Y+14	; 0x0e
    328c:	9f 85       	ldd	r25, Y+15	; 0x0f
    328e:	20 e0       	ldi	r18, 0x00	; 0
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	4a e7       	ldi	r20, 0x7A	; 122
    3294:	55 e4       	ldi	r21, 0x45	; 69
    3296:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    329a:	dc 01       	movw	r26, r24
    329c:	cb 01       	movw	r24, r22
    329e:	88 87       	std	Y+8, r24	; 0x08
    32a0:	99 87       	std	Y+9, r25	; 0x09
    32a2:	aa 87       	std	Y+10, r26	; 0x0a
    32a4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    32a6:	68 85       	ldd	r22, Y+8	; 0x08
    32a8:	79 85       	ldd	r23, Y+9	; 0x09
    32aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    32ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    32ae:	20 e0       	ldi	r18, 0x00	; 0
    32b0:	30 e0       	ldi	r19, 0x00	; 0
    32b2:	40 e8       	ldi	r20, 0x80	; 128
    32b4:	5f e3       	ldi	r21, 0x3F	; 63
    32b6:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    32ba:	88 23       	and	r24, r24
    32bc:	2c f4       	brge	.+10     	; 0x32c8 <distanceFRONT+0x2ac>
		__ticks = 1;
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	9f 83       	std	Y+7, r25	; 0x07
    32c4:	8e 83       	std	Y+6, r24	; 0x06
    32c6:	3f c0       	rjmp	.+126    	; 0x3346 <distanceFRONT+0x32a>
	else if (__tmp > 65535)
    32c8:	68 85       	ldd	r22, Y+8	; 0x08
    32ca:	79 85       	ldd	r23, Y+9	; 0x09
    32cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    32ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    32d0:	20 e0       	ldi	r18, 0x00	; 0
    32d2:	3f ef       	ldi	r19, 0xFF	; 255
    32d4:	4f e7       	ldi	r20, 0x7F	; 127
    32d6:	57 e4       	ldi	r21, 0x47	; 71
    32d8:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    32dc:	18 16       	cp	r1, r24
    32de:	4c f5       	brge	.+82     	; 0x3332 <distanceFRONT+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32e0:	6c 85       	ldd	r22, Y+12	; 0x0c
    32e2:	7d 85       	ldd	r23, Y+13	; 0x0d
    32e4:	8e 85       	ldd	r24, Y+14	; 0x0e
    32e6:	9f 85       	ldd	r25, Y+15	; 0x0f
    32e8:	20 e0       	ldi	r18, 0x00	; 0
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	40 e2       	ldi	r20, 0x20	; 32
    32ee:	51 e4       	ldi	r21, 0x41	; 65
    32f0:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    32f4:	dc 01       	movw	r26, r24
    32f6:	cb 01       	movw	r24, r22
    32f8:	bc 01       	movw	r22, r24
    32fa:	cd 01       	movw	r24, r26
    32fc:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    3300:	dc 01       	movw	r26, r24
    3302:	cb 01       	movw	r24, r22
    3304:	9f 83       	std	Y+7, r25	; 0x07
    3306:	8e 83       	std	Y+6, r24	; 0x06
    3308:	0f c0       	rjmp	.+30     	; 0x3328 <distanceFRONT+0x30c>
    330a:	80 e9       	ldi	r24, 0x90	; 144
    330c:	91 e0       	ldi	r25, 0x01	; 1
    330e:	9d 83       	std	Y+5, r25	; 0x05
    3310:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3312:	8c 81       	ldd	r24, Y+4	; 0x04
    3314:	9d 81       	ldd	r25, Y+5	; 0x05
    3316:	01 97       	sbiw	r24, 0x01	; 1
    3318:	f1 f7       	brne	.-4      	; 0x3316 <distanceFRONT+0x2fa>
    331a:	9d 83       	std	Y+5, r25	; 0x05
    331c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    331e:	8e 81       	ldd	r24, Y+6	; 0x06
    3320:	9f 81       	ldd	r25, Y+7	; 0x07
    3322:	01 97       	sbiw	r24, 0x01	; 1
    3324:	9f 83       	std	Y+7, r25	; 0x07
    3326:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3328:	8e 81       	ldd	r24, Y+6	; 0x06
    332a:	9f 81       	ldd	r25, Y+7	; 0x07
    332c:	00 97       	sbiw	r24, 0x00	; 0
    332e:	69 f7       	brne	.-38     	; 0x330a <distanceFRONT+0x2ee>
    3330:	24 c0       	rjmp	.+72     	; 0x337a <distanceFRONT+0x35e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3332:	68 85       	ldd	r22, Y+8	; 0x08
    3334:	79 85       	ldd	r23, Y+9	; 0x09
    3336:	8a 85       	ldd	r24, Y+10	; 0x0a
    3338:	9b 85       	ldd	r25, Y+11	; 0x0b
    333a:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    333e:	dc 01       	movw	r26, r24
    3340:	cb 01       	movw	r24, r22
    3342:	9f 83       	std	Y+7, r25	; 0x07
    3344:	8e 83       	std	Y+6, r24	; 0x06
    3346:	8e 81       	ldd	r24, Y+6	; 0x06
    3348:	9f 81       	ldd	r25, Y+7	; 0x07
    334a:	9b 83       	std	Y+3, r25	; 0x03
    334c:	8a 83       	std	Y+2, r24	; 0x02
    334e:	8a 81       	ldd	r24, Y+2	; 0x02
    3350:	9b 81       	ldd	r25, Y+3	; 0x03
    3352:	01 97       	sbiw	r24, 0x01	; 1
    3354:	f1 f7       	brne	.-4      	; 0x3352 <distanceFRONT+0x336>
    3356:	9b 83       	std	Y+3, r25	; 0x03
    3358:	8a 83       	std	Y+2, r24	; 0x02
    335a:	0f c0       	rjmp	.+30     	; 0x337a <distanceFRONT+0x35e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    335c:	69 89       	ldd	r22, Y+17	; 0x11
    335e:	7a 89       	ldd	r23, Y+18	; 0x12
    3360:	8b 89       	ldd	r24, Y+19	; 0x13
    3362:	9c 89       	ldd	r25, Y+20	; 0x14
    3364:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	88 8b       	std	Y+16, r24	; 0x10
    336e:	88 89       	ldd	r24, Y+16	; 0x10
    3370:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3372:	89 81       	ldd	r24, Y+1	; 0x01
    3374:	8a 95       	dec	r24
    3376:	f1 f7       	brne	.-4      	; 0x3374 <distanceFRONT+0x358>
    3378:	89 83       	std	Y+1, r24	; 0x01
   _delay_us(10);         // 10us동안 유지

   PORTD &= ~(1<<TRIG);  // TrigL=LOW -> 거리 측정 명령 끝
    337a:	a2 e3       	ldi	r26, 0x32	; 50
    337c:	b0 e0       	ldi	r27, 0x00	; 0
    337e:	e2 e3       	ldi	r30, 0x32	; 50
    3380:	f0 e0       	ldi	r31, 0x00	; 0
    3382:	80 81       	ld	r24, Z
    3384:	28 2f       	mov	r18, r24
    3386:	81 e0       	ldi	r24, 0x01	; 1
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	09 a8       	ldd	r0, Y+49	; 0x31
    338c:	02 c0       	rjmp	.+4      	; 0x3392 <distanceFRONT+0x376>
    338e:	88 0f       	add	r24, r24
    3390:	99 1f       	adc	r25, r25
    3392:	0a 94       	dec	r0
    3394:	e2 f7       	brpl	.-8      	; 0x338e <distanceFRONT+0x372>
    3396:	80 95       	com	r24
    3398:	82 23       	and	r24, r18
    339a:	8c 93       	st	X, r24

   while(!(PIND & (1<<ECHO)));   // EchoL=HIGH가 될 때까지 대기
    339c:	e0 e3       	ldi	r30, 0x30	; 48
    339e:	f0 e0       	ldi	r31, 0x00	; 0
    33a0:	80 81       	ld	r24, Z
    33a2:	88 2f       	mov	r24, r24
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	0b a8       	ldd	r0, Y+51	; 0x33
    33a8:	02 c0       	rjmp	.+4      	; 0x33ae <distanceFRONT+0x392>
    33aa:	95 95       	asr	r25
    33ac:	87 95       	ror	r24
    33ae:	0a 94       	dec	r0
    33b0:	e2 f7       	brpl	.-8      	; 0x33aa <distanceFRONT+0x38e>
    33b2:	81 70       	andi	r24, 0x01	; 1
    33b4:	90 70       	andi	r25, 0x00	; 0
    33b6:	00 97       	sbiw	r24, 0x00	; 0
    33b8:	89 f3       	breq	.-30     	; 0x339c <distanceFRONT+0x380>
   TCNT3=0x0000;     //Timer/Counter1 값 초기화
    33ba:	e8 e8       	ldi	r30, 0x88	; 136
    33bc:	f0 e0       	ldi	r31, 0x00	; 0
    33be:	11 82       	std	Z+1, r1	; 0x01
    33c0:	10 82       	st	Z, r1

   while(PIND & (1<<ECHO));     //Echo=LOW가 될 때까지 대기
    33c2:	e0 e3       	ldi	r30, 0x30	; 48
    33c4:	f0 e0       	ldi	r31, 0x00	; 0
    33c6:	80 81       	ld	r24, Z
    33c8:	88 2f       	mov	r24, r24
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	0b a8       	ldd	r0, Y+51	; 0x33
    33ce:	02 c0       	rjmp	.+4      	; 0x33d4 <distanceFRONT+0x3b8>
    33d0:	95 95       	asr	r25
    33d2:	87 95       	ror	r24
    33d4:	0a 94       	dec	r0
    33d6:	e2 f7       	brpl	.-8      	; 0x33d0 <distanceFRONT+0x3b4>
    33d8:	81 70       	andi	r24, 0x01	; 1
    33da:	90 70       	andi	r25, 0x00	; 0
    33dc:	88 23       	and	r24, r24
    33de:	89 f7       	brne	.-30     	; 0x33c2 <distanceFRONT+0x3a6>
   TCCR3B=0x00;     //Timer/Counter1 클록 정지(클록 입력 차단,CS11~CS10=000)
    33e0:	ea e8       	ldi	r30, 0x8A	; 138
    33e2:	f0 e0       	ldi	r31, 0x00	; 0
    33e4:	10 82       	st	Z, r1

   return (unsigned int)(SOUND_VELOCITY * (TCNT3*4/2)/1000);   // 거리=속도x시간, 거리 단위는 1mm
    33e6:	e8 e8       	ldi	r30, 0x88	; 136
    33e8:	f0 e0       	ldi	r31, 0x00	; 0
    33ea:	80 81       	ld	r24, Z
    33ec:	91 81       	ldd	r25, Z+1	; 0x01
    33ee:	88 0f       	add	r24, r24
    33f0:	99 1f       	adc	r25, r25
    33f2:	88 0f       	add	r24, r24
    33f4:	99 1f       	adc	r25, r25
    33f6:	96 95       	lsr	r25
    33f8:	87 95       	ror	r24
    33fa:	cc 01       	movw	r24, r24
    33fc:	a0 e0       	ldi	r26, 0x00	; 0
    33fe:	b0 e0       	ldi	r27, 0x00	; 0
    3400:	24 e5       	ldi	r18, 0x54	; 84
    3402:	31 e0       	ldi	r19, 0x01	; 1
    3404:	40 e0       	ldi	r20, 0x00	; 0
    3406:	50 e0       	ldi	r21, 0x00	; 0
    3408:	bc 01       	movw	r22, r24
    340a:	cd 01       	movw	r24, r26
    340c:	0e 94 2b 2f 	call	0x5e56	; 0x5e56 <__mulsi3>
    3410:	dc 01       	movw	r26, r24
    3412:	cb 01       	movw	r24, r22
    3414:	28 ee       	ldi	r18, 0xE8	; 232
    3416:	33 e0       	ldi	r19, 0x03	; 3
    3418:	40 e0       	ldi	r20, 0x00	; 0
    341a:	50 e0       	ldi	r21, 0x00	; 0
    341c:	bc 01       	movw	r22, r24
    341e:	cd 01       	movw	r24, r26
    3420:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <__udivmodsi4>
    3424:	da 01       	movw	r26, r20
    3426:	c9 01       	movw	r24, r18
}
    3428:	e4 96       	adiw	r28, 0x34	; 52
    342a:	0f b6       	in	r0, 0x3f	; 63
    342c:	f8 94       	cli
    342e:	de bf       	out	0x3e, r29	; 62
    3430:	0f be       	out	0x3f, r0	; 63
    3432:	cd bf       	out	0x3d, r28	; 61
    3434:	cf 91       	pop	r28
    3436:	df 91       	pop	r29
    3438:	08 95       	ret

0000343a <distanceAFTER>:

unsigned distanceAFTER(int TRIG, int ECHO){
    343a:	df 93       	push	r29
    343c:	cf 93       	push	r28
    343e:	cd b7       	in	r28, 0x3d	; 61
    3440:	de b7       	in	r29, 0x3e	; 62
    3442:	e4 97       	sbiw	r28, 0x34	; 52
    3444:	0f b6       	in	r0, 0x3f	; 63
    3446:	f8 94       	cli
    3448:	de bf       	out	0x3e, r29	; 62
    344a:	0f be       	out	0x3f, r0	; 63
    344c:	cd bf       	out	0x3d, r28	; 61
    344e:	9a ab       	std	Y+50, r25	; 0x32
    3450:	89 ab       	std	Y+49, r24	; 0x31
    3452:	7c ab       	std	Y+52, r23	; 0x34
    3454:	6b ab       	std	Y+51, r22	; 0x33

   
   TCCR3B=0x03;     // Timer/Counter3 클록 4us(64분주)
    3456:	ea e8       	ldi	r30, 0x8A	; 138
    3458:	f0 e0       	ldi	r31, 0x00	; 0
    345a:	83 e0       	ldi	r24, 0x03	; 3
    345c:	80 83       	st	Z, r24

   PORTF &= ~(1<<TRIG);  // TrigL=LOW상태
    345e:	a2 e6       	ldi	r26, 0x62	; 98
    3460:	b0 e0       	ldi	r27, 0x00	; 0
    3462:	e2 e6       	ldi	r30, 0x62	; 98
    3464:	f0 e0       	ldi	r31, 0x00	; 0
    3466:	80 81       	ld	r24, Z
    3468:	28 2f       	mov	r18, r24
    346a:	81 e0       	ldi	r24, 0x01	; 1
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	09 a8       	ldd	r0, Y+49	; 0x31
    3470:	02 c0       	rjmp	.+4      	; 0x3476 <distanceAFTER+0x3c>
    3472:	88 0f       	add	r24, r24
    3474:	99 1f       	adc	r25, r25
    3476:	0a 94       	dec	r0
    3478:	e2 f7       	brpl	.-8      	; 0x3472 <distanceAFTER+0x38>
    347a:	80 95       	com	r24
    347c:	82 23       	and	r24, r18
    347e:	8c 93       	st	X, r24
    3480:	80 e0       	ldi	r24, 0x00	; 0
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	a0 e2       	ldi	r26, 0x20	; 32
    3486:	b1 e4       	ldi	r27, 0x41	; 65
    3488:	8d a7       	std	Y+45, r24	; 0x2d
    348a:	9e a7       	std	Y+46, r25	; 0x2e
    348c:	af a7       	std	Y+47, r26	; 0x2f
    348e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3490:	6d a5       	ldd	r22, Y+45	; 0x2d
    3492:	7e a5       	ldd	r23, Y+46	; 0x2e
    3494:	8f a5       	ldd	r24, Y+47	; 0x2f
    3496:	98 a9       	ldd	r25, Y+48	; 0x30
    3498:	2b ea       	ldi	r18, 0xAB	; 171
    349a:	3a ea       	ldi	r19, 0xAA	; 170
    349c:	4a ea       	ldi	r20, 0xAA	; 170
    349e:	50 e4       	ldi	r21, 0x40	; 64
    34a0:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    34a4:	dc 01       	movw	r26, r24
    34a6:	cb 01       	movw	r24, r22
    34a8:	89 a7       	std	Y+41, r24	; 0x29
    34aa:	9a a7       	std	Y+42, r25	; 0x2a
    34ac:	ab a7       	std	Y+43, r26	; 0x2b
    34ae:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    34b0:	69 a5       	ldd	r22, Y+41	; 0x29
    34b2:	7a a5       	ldd	r23, Y+42	; 0x2a
    34b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    34b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    34b8:	20 e0       	ldi	r18, 0x00	; 0
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	40 e8       	ldi	r20, 0x80	; 128
    34be:	5f e3       	ldi	r21, 0x3F	; 63
    34c0:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    34c4:	88 23       	and	r24, r24
    34c6:	1c f4       	brge	.+6      	; 0x34ce <distanceAFTER+0x94>
		__ticks = 1;
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	88 a7       	std	Y+40, r24	; 0x28
    34cc:	91 c0       	rjmp	.+290    	; 0x35f0 <distanceAFTER+0x1b6>
	else if (__tmp > 255)
    34ce:	69 a5       	ldd	r22, Y+41	; 0x29
    34d0:	7a a5       	ldd	r23, Y+42	; 0x2a
    34d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    34d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    34d6:	20 e0       	ldi	r18, 0x00	; 0
    34d8:	30 e0       	ldi	r19, 0x00	; 0
    34da:	4f e7       	ldi	r20, 0x7F	; 127
    34dc:	53 e4       	ldi	r21, 0x43	; 67
    34de:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    34e2:	18 16       	cp	r1, r24
    34e4:	0c f0       	brlt	.+2      	; 0x34e8 <distanceAFTER+0xae>
    34e6:	7b c0       	rjmp	.+246    	; 0x35de <distanceAFTER+0x1a4>
	{
		_delay_ms(__us / 1000.0);
    34e8:	6d a5       	ldd	r22, Y+45	; 0x2d
    34ea:	7e a5       	ldd	r23, Y+46	; 0x2e
    34ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    34ee:	98 a9       	ldd	r25, Y+48	; 0x30
    34f0:	20 e0       	ldi	r18, 0x00	; 0
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	4a e7       	ldi	r20, 0x7A	; 122
    34f6:	54 e4       	ldi	r21, 0x44	; 68
    34f8:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <__divsf3>
    34fc:	dc 01       	movw	r26, r24
    34fe:	cb 01       	movw	r24, r22
    3500:	8c a3       	std	Y+36, r24	; 0x24
    3502:	9d a3       	std	Y+37, r25	; 0x25
    3504:	ae a3       	std	Y+38, r26	; 0x26
    3506:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3508:	6c a1       	ldd	r22, Y+36	; 0x24
    350a:	7d a1       	ldd	r23, Y+37	; 0x25
    350c:	8e a1       	ldd	r24, Y+38	; 0x26
    350e:	9f a1       	ldd	r25, Y+39	; 0x27
    3510:	20 e0       	ldi	r18, 0x00	; 0
    3512:	30 e0       	ldi	r19, 0x00	; 0
    3514:	4a e7       	ldi	r20, 0x7A	; 122
    3516:	55 e4       	ldi	r21, 0x45	; 69
    3518:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    351c:	dc 01       	movw	r26, r24
    351e:	cb 01       	movw	r24, r22
    3520:	88 a3       	std	Y+32, r24	; 0x20
    3522:	99 a3       	std	Y+33, r25	; 0x21
    3524:	aa a3       	std	Y+34, r26	; 0x22
    3526:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3528:	68 a1       	ldd	r22, Y+32	; 0x20
    352a:	79 a1       	ldd	r23, Y+33	; 0x21
    352c:	8a a1       	ldd	r24, Y+34	; 0x22
    352e:	9b a1       	ldd	r25, Y+35	; 0x23
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	40 e8       	ldi	r20, 0x80	; 128
    3536:	5f e3       	ldi	r21, 0x3F	; 63
    3538:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    353c:	88 23       	and	r24, r24
    353e:	2c f4       	brge	.+10     	; 0x354a <distanceAFTER+0x110>
		__ticks = 1;
    3540:	81 e0       	ldi	r24, 0x01	; 1
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	9f 8f       	std	Y+31, r25	; 0x1f
    3546:	8e 8f       	std	Y+30, r24	; 0x1e
    3548:	3f c0       	rjmp	.+126    	; 0x35c8 <distanceAFTER+0x18e>
	else if (__tmp > 65535)
    354a:	68 a1       	ldd	r22, Y+32	; 0x20
    354c:	79 a1       	ldd	r23, Y+33	; 0x21
    354e:	8a a1       	ldd	r24, Y+34	; 0x22
    3550:	9b a1       	ldd	r25, Y+35	; 0x23
    3552:	20 e0       	ldi	r18, 0x00	; 0
    3554:	3f ef       	ldi	r19, 0xFF	; 255
    3556:	4f e7       	ldi	r20, 0x7F	; 127
    3558:	57 e4       	ldi	r21, 0x47	; 71
    355a:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    355e:	18 16       	cp	r1, r24
    3560:	4c f5       	brge	.+82     	; 0x35b4 <distanceAFTER+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3562:	6c a1       	ldd	r22, Y+36	; 0x24
    3564:	7d a1       	ldd	r23, Y+37	; 0x25
    3566:	8e a1       	ldd	r24, Y+38	; 0x26
    3568:	9f a1       	ldd	r25, Y+39	; 0x27
    356a:	20 e0       	ldi	r18, 0x00	; 0
    356c:	30 e0       	ldi	r19, 0x00	; 0
    356e:	40 e2       	ldi	r20, 0x20	; 32
    3570:	51 e4       	ldi	r21, 0x41	; 65
    3572:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    3576:	dc 01       	movw	r26, r24
    3578:	cb 01       	movw	r24, r22
    357a:	bc 01       	movw	r22, r24
    357c:	cd 01       	movw	r24, r26
    357e:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    3582:	dc 01       	movw	r26, r24
    3584:	cb 01       	movw	r24, r22
    3586:	9f 8f       	std	Y+31, r25	; 0x1f
    3588:	8e 8f       	std	Y+30, r24	; 0x1e
    358a:	0f c0       	rjmp	.+30     	; 0x35aa <distanceAFTER+0x170>
    358c:	80 e9       	ldi	r24, 0x90	; 144
    358e:	91 e0       	ldi	r25, 0x01	; 1
    3590:	9d 8f       	std	Y+29, r25	; 0x1d
    3592:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3594:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3596:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3598:	01 97       	sbiw	r24, 0x01	; 1
    359a:	f1 f7       	brne	.-4      	; 0x3598 <distanceAFTER+0x15e>
    359c:	9d 8f       	std	Y+29, r25	; 0x1d
    359e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    35a2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    35a4:	01 97       	sbiw	r24, 0x01	; 1
    35a6:	9f 8f       	std	Y+31, r25	; 0x1f
    35a8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    35ac:	9f 8d       	ldd	r25, Y+31	; 0x1f
    35ae:	00 97       	sbiw	r24, 0x00	; 0
    35b0:	69 f7       	brne	.-38     	; 0x358c <distanceAFTER+0x152>
    35b2:	24 c0       	rjmp	.+72     	; 0x35fc <distanceAFTER+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35b4:	68 a1       	ldd	r22, Y+32	; 0x20
    35b6:	79 a1       	ldd	r23, Y+33	; 0x21
    35b8:	8a a1       	ldd	r24, Y+34	; 0x22
    35ba:	9b a1       	ldd	r25, Y+35	; 0x23
    35bc:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    35c0:	dc 01       	movw	r26, r24
    35c2:	cb 01       	movw	r24, r22
    35c4:	9f 8f       	std	Y+31, r25	; 0x1f
    35c6:	8e 8f       	std	Y+30, r24	; 0x1e
    35c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    35ca:	9f 8d       	ldd	r25, Y+31	; 0x1f
    35cc:	9b 8f       	std	Y+27, r25	; 0x1b
    35ce:	8a 8f       	std	Y+26, r24	; 0x1a
    35d0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    35d2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    35d4:	01 97       	sbiw	r24, 0x01	; 1
    35d6:	f1 f7       	brne	.-4      	; 0x35d4 <distanceAFTER+0x19a>
    35d8:	9b 8f       	std	Y+27, r25	; 0x1b
    35da:	8a 8f       	std	Y+26, r24	; 0x1a
    35dc:	0f c0       	rjmp	.+30     	; 0x35fc <distanceAFTER+0x1c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    35de:	69 a5       	ldd	r22, Y+41	; 0x29
    35e0:	7a a5       	ldd	r23, Y+42	; 0x2a
    35e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    35e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    35e6:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    35ea:	dc 01       	movw	r26, r24
    35ec:	cb 01       	movw	r24, r22
    35ee:	88 a7       	std	Y+40, r24	; 0x28
    35f0:	88 a5       	ldd	r24, Y+40	; 0x28
    35f2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    35f4:	89 8d       	ldd	r24, Y+25	; 0x19
    35f6:	8a 95       	dec	r24
    35f8:	f1 f7       	brne	.-4      	; 0x35f6 <distanceAFTER+0x1bc>
    35fa:	89 8f       	std	Y+25, r24	; 0x19
   _delay_us(10);         // 10us동안 유지

   PORTF |= (1<<TRIG);   // TrigL=HIGH -> 거리 측정 명령 시작
    35fc:	a2 e6       	ldi	r26, 0x62	; 98
    35fe:	b0 e0       	ldi	r27, 0x00	; 0
    3600:	e2 e6       	ldi	r30, 0x62	; 98
    3602:	f0 e0       	ldi	r31, 0x00	; 0
    3604:	80 81       	ld	r24, Z
    3606:	28 2f       	mov	r18, r24
    3608:	81 e0       	ldi	r24, 0x01	; 1
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	09 a8       	ldd	r0, Y+49	; 0x31
    360e:	02 c0       	rjmp	.+4      	; 0x3614 <distanceAFTER+0x1da>
    3610:	88 0f       	add	r24, r24
    3612:	99 1f       	adc	r25, r25
    3614:	0a 94       	dec	r0
    3616:	e2 f7       	brpl	.-8      	; 0x3610 <distanceAFTER+0x1d6>
    3618:	82 2b       	or	r24, r18
    361a:	8c 93       	st	X, r24
    361c:	80 e0       	ldi	r24, 0x00	; 0
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	a0 e2       	ldi	r26, 0x20	; 32
    3622:	b1 e4       	ldi	r27, 0x41	; 65
    3624:	8d 8b       	std	Y+21, r24	; 0x15
    3626:	9e 8b       	std	Y+22, r25	; 0x16
    3628:	af 8b       	std	Y+23, r26	; 0x17
    362a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    362c:	6d 89       	ldd	r22, Y+21	; 0x15
    362e:	7e 89       	ldd	r23, Y+22	; 0x16
    3630:	8f 89       	ldd	r24, Y+23	; 0x17
    3632:	98 8d       	ldd	r25, Y+24	; 0x18
    3634:	2b ea       	ldi	r18, 0xAB	; 171
    3636:	3a ea       	ldi	r19, 0xAA	; 170
    3638:	4a ea       	ldi	r20, 0xAA	; 170
    363a:	50 e4       	ldi	r21, 0x40	; 64
    363c:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    3640:	dc 01       	movw	r26, r24
    3642:	cb 01       	movw	r24, r22
    3644:	89 8b       	std	Y+17, r24	; 0x11
    3646:	9a 8b       	std	Y+18, r25	; 0x12
    3648:	ab 8b       	std	Y+19, r26	; 0x13
    364a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    364c:	69 89       	ldd	r22, Y+17	; 0x11
    364e:	7a 89       	ldd	r23, Y+18	; 0x12
    3650:	8b 89       	ldd	r24, Y+19	; 0x13
    3652:	9c 89       	ldd	r25, Y+20	; 0x14
    3654:	20 e0       	ldi	r18, 0x00	; 0
    3656:	30 e0       	ldi	r19, 0x00	; 0
    3658:	40 e8       	ldi	r20, 0x80	; 128
    365a:	5f e3       	ldi	r21, 0x3F	; 63
    365c:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    3660:	88 23       	and	r24, r24
    3662:	1c f4       	brge	.+6      	; 0x366a <distanceAFTER+0x230>
		__ticks = 1;
    3664:	81 e0       	ldi	r24, 0x01	; 1
    3666:	88 8b       	std	Y+16, r24	; 0x10
    3668:	91 c0       	rjmp	.+290    	; 0x378c <distanceAFTER+0x352>
	else if (__tmp > 255)
    366a:	69 89       	ldd	r22, Y+17	; 0x11
    366c:	7a 89       	ldd	r23, Y+18	; 0x12
    366e:	8b 89       	ldd	r24, Y+19	; 0x13
    3670:	9c 89       	ldd	r25, Y+20	; 0x14
    3672:	20 e0       	ldi	r18, 0x00	; 0
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	4f e7       	ldi	r20, 0x7F	; 127
    3678:	53 e4       	ldi	r21, 0x43	; 67
    367a:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    367e:	18 16       	cp	r1, r24
    3680:	0c f0       	brlt	.+2      	; 0x3684 <distanceAFTER+0x24a>
    3682:	7b c0       	rjmp	.+246    	; 0x377a <distanceAFTER+0x340>
	{
		_delay_ms(__us / 1000.0);
    3684:	6d 89       	ldd	r22, Y+21	; 0x15
    3686:	7e 89       	ldd	r23, Y+22	; 0x16
    3688:	8f 89       	ldd	r24, Y+23	; 0x17
    368a:	98 8d       	ldd	r25, Y+24	; 0x18
    368c:	20 e0       	ldi	r18, 0x00	; 0
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	4a e7       	ldi	r20, 0x7A	; 122
    3692:	54 e4       	ldi	r21, 0x44	; 68
    3694:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <__divsf3>
    3698:	dc 01       	movw	r26, r24
    369a:	cb 01       	movw	r24, r22
    369c:	8c 87       	std	Y+12, r24	; 0x0c
    369e:	9d 87       	std	Y+13, r25	; 0x0d
    36a0:	ae 87       	std	Y+14, r26	; 0x0e
    36a2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36a4:	6c 85       	ldd	r22, Y+12	; 0x0c
    36a6:	7d 85       	ldd	r23, Y+13	; 0x0d
    36a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    36aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    36ac:	20 e0       	ldi	r18, 0x00	; 0
    36ae:	30 e0       	ldi	r19, 0x00	; 0
    36b0:	4a e7       	ldi	r20, 0x7A	; 122
    36b2:	55 e4       	ldi	r21, 0x45	; 69
    36b4:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    36b8:	dc 01       	movw	r26, r24
    36ba:	cb 01       	movw	r24, r22
    36bc:	88 87       	std	Y+8, r24	; 0x08
    36be:	99 87       	std	Y+9, r25	; 0x09
    36c0:	aa 87       	std	Y+10, r26	; 0x0a
    36c2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    36c4:	68 85       	ldd	r22, Y+8	; 0x08
    36c6:	79 85       	ldd	r23, Y+9	; 0x09
    36c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    36ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    36cc:	20 e0       	ldi	r18, 0x00	; 0
    36ce:	30 e0       	ldi	r19, 0x00	; 0
    36d0:	40 e8       	ldi	r20, 0x80	; 128
    36d2:	5f e3       	ldi	r21, 0x3F	; 63
    36d4:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    36d8:	88 23       	and	r24, r24
    36da:	2c f4       	brge	.+10     	; 0x36e6 <distanceAFTER+0x2ac>
		__ticks = 1;
    36dc:	81 e0       	ldi	r24, 0x01	; 1
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	9f 83       	std	Y+7, r25	; 0x07
    36e2:	8e 83       	std	Y+6, r24	; 0x06
    36e4:	3f c0       	rjmp	.+126    	; 0x3764 <distanceAFTER+0x32a>
	else if (__tmp > 65535)
    36e6:	68 85       	ldd	r22, Y+8	; 0x08
    36e8:	79 85       	ldd	r23, Y+9	; 0x09
    36ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    36ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    36ee:	20 e0       	ldi	r18, 0x00	; 0
    36f0:	3f ef       	ldi	r19, 0xFF	; 255
    36f2:	4f e7       	ldi	r20, 0x7F	; 127
    36f4:	57 e4       	ldi	r21, 0x47	; 71
    36f6:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    36fa:	18 16       	cp	r1, r24
    36fc:	4c f5       	brge	.+82     	; 0x3750 <distanceAFTER+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36fe:	6c 85       	ldd	r22, Y+12	; 0x0c
    3700:	7d 85       	ldd	r23, Y+13	; 0x0d
    3702:	8e 85       	ldd	r24, Y+14	; 0x0e
    3704:	9f 85       	ldd	r25, Y+15	; 0x0f
    3706:	20 e0       	ldi	r18, 0x00	; 0
    3708:	30 e0       	ldi	r19, 0x00	; 0
    370a:	40 e2       	ldi	r20, 0x20	; 32
    370c:	51 e4       	ldi	r21, 0x41	; 65
    370e:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    3712:	dc 01       	movw	r26, r24
    3714:	cb 01       	movw	r24, r22
    3716:	bc 01       	movw	r22, r24
    3718:	cd 01       	movw	r24, r26
    371a:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    371e:	dc 01       	movw	r26, r24
    3720:	cb 01       	movw	r24, r22
    3722:	9f 83       	std	Y+7, r25	; 0x07
    3724:	8e 83       	std	Y+6, r24	; 0x06
    3726:	0f c0       	rjmp	.+30     	; 0x3746 <distanceAFTER+0x30c>
    3728:	80 e9       	ldi	r24, 0x90	; 144
    372a:	91 e0       	ldi	r25, 0x01	; 1
    372c:	9d 83       	std	Y+5, r25	; 0x05
    372e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3730:	8c 81       	ldd	r24, Y+4	; 0x04
    3732:	9d 81       	ldd	r25, Y+5	; 0x05
    3734:	01 97       	sbiw	r24, 0x01	; 1
    3736:	f1 f7       	brne	.-4      	; 0x3734 <distanceAFTER+0x2fa>
    3738:	9d 83       	std	Y+5, r25	; 0x05
    373a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    373c:	8e 81       	ldd	r24, Y+6	; 0x06
    373e:	9f 81       	ldd	r25, Y+7	; 0x07
    3740:	01 97       	sbiw	r24, 0x01	; 1
    3742:	9f 83       	std	Y+7, r25	; 0x07
    3744:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3746:	8e 81       	ldd	r24, Y+6	; 0x06
    3748:	9f 81       	ldd	r25, Y+7	; 0x07
    374a:	00 97       	sbiw	r24, 0x00	; 0
    374c:	69 f7       	brne	.-38     	; 0x3728 <distanceAFTER+0x2ee>
    374e:	24 c0       	rjmp	.+72     	; 0x3798 <distanceAFTER+0x35e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3750:	68 85       	ldd	r22, Y+8	; 0x08
    3752:	79 85       	ldd	r23, Y+9	; 0x09
    3754:	8a 85       	ldd	r24, Y+10	; 0x0a
    3756:	9b 85       	ldd	r25, Y+11	; 0x0b
    3758:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    375c:	dc 01       	movw	r26, r24
    375e:	cb 01       	movw	r24, r22
    3760:	9f 83       	std	Y+7, r25	; 0x07
    3762:	8e 83       	std	Y+6, r24	; 0x06
    3764:	8e 81       	ldd	r24, Y+6	; 0x06
    3766:	9f 81       	ldd	r25, Y+7	; 0x07
    3768:	9b 83       	std	Y+3, r25	; 0x03
    376a:	8a 83       	std	Y+2, r24	; 0x02
    376c:	8a 81       	ldd	r24, Y+2	; 0x02
    376e:	9b 81       	ldd	r25, Y+3	; 0x03
    3770:	01 97       	sbiw	r24, 0x01	; 1
    3772:	f1 f7       	brne	.-4      	; 0x3770 <distanceAFTER+0x336>
    3774:	9b 83       	std	Y+3, r25	; 0x03
    3776:	8a 83       	std	Y+2, r24	; 0x02
    3778:	0f c0       	rjmp	.+30     	; 0x3798 <distanceAFTER+0x35e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    377a:	69 89       	ldd	r22, Y+17	; 0x11
    377c:	7a 89       	ldd	r23, Y+18	; 0x12
    377e:	8b 89       	ldd	r24, Y+19	; 0x13
    3780:	9c 89       	ldd	r25, Y+20	; 0x14
    3782:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    3786:	dc 01       	movw	r26, r24
    3788:	cb 01       	movw	r24, r22
    378a:	88 8b       	std	Y+16, r24	; 0x10
    378c:	88 89       	ldd	r24, Y+16	; 0x10
    378e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3790:	89 81       	ldd	r24, Y+1	; 0x01
    3792:	8a 95       	dec	r24
    3794:	f1 f7       	brne	.-4      	; 0x3792 <distanceAFTER+0x358>
    3796:	89 83       	std	Y+1, r24	; 0x01
   _delay_us(10);         // 10us동안 유지

   PORTF &= ~(1<<TRIG);  // TrigL=LOW -> 거리 측정 명령 끝
    3798:	a2 e6       	ldi	r26, 0x62	; 98
    379a:	b0 e0       	ldi	r27, 0x00	; 0
    379c:	e2 e6       	ldi	r30, 0x62	; 98
    379e:	f0 e0       	ldi	r31, 0x00	; 0
    37a0:	80 81       	ld	r24, Z
    37a2:	28 2f       	mov	r18, r24
    37a4:	81 e0       	ldi	r24, 0x01	; 1
    37a6:	90 e0       	ldi	r25, 0x00	; 0
    37a8:	09 a8       	ldd	r0, Y+49	; 0x31
    37aa:	02 c0       	rjmp	.+4      	; 0x37b0 <distanceAFTER+0x376>
    37ac:	88 0f       	add	r24, r24
    37ae:	99 1f       	adc	r25, r25
    37b0:	0a 94       	dec	r0
    37b2:	e2 f7       	brpl	.-8      	; 0x37ac <distanceAFTER+0x372>
    37b4:	80 95       	com	r24
    37b6:	82 23       	and	r24, r18
    37b8:	8c 93       	st	X, r24

   while(!(PINF & (1<<ECHO)));   // EchoL=HIGH가 될 때까지 대기
    37ba:	e0 e2       	ldi	r30, 0x20	; 32
    37bc:	f0 e0       	ldi	r31, 0x00	; 0
    37be:	80 81       	ld	r24, Z
    37c0:	88 2f       	mov	r24, r24
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	0b a8       	ldd	r0, Y+51	; 0x33
    37c6:	02 c0       	rjmp	.+4      	; 0x37cc <distanceAFTER+0x392>
    37c8:	95 95       	asr	r25
    37ca:	87 95       	ror	r24
    37cc:	0a 94       	dec	r0
    37ce:	e2 f7       	brpl	.-8      	; 0x37c8 <distanceAFTER+0x38e>
    37d0:	81 70       	andi	r24, 0x01	; 1
    37d2:	90 70       	andi	r25, 0x00	; 0
    37d4:	00 97       	sbiw	r24, 0x00	; 0
    37d6:	89 f3       	breq	.-30     	; 0x37ba <distanceAFTER+0x380>
   TCNT3=0x0000;     //Timer/Counter1 값 초기화
    37d8:	e8 e8       	ldi	r30, 0x88	; 136
    37da:	f0 e0       	ldi	r31, 0x00	; 0
    37dc:	11 82       	std	Z+1, r1	; 0x01
    37de:	10 82       	st	Z, r1

   while(PINF & (1<<ECHO));     //Echo=LOW가 될 때까지 대기
    37e0:	e0 e2       	ldi	r30, 0x20	; 32
    37e2:	f0 e0       	ldi	r31, 0x00	; 0
    37e4:	80 81       	ld	r24, Z
    37e6:	88 2f       	mov	r24, r24
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	0b a8       	ldd	r0, Y+51	; 0x33
    37ec:	02 c0       	rjmp	.+4      	; 0x37f2 <distanceAFTER+0x3b8>
    37ee:	95 95       	asr	r25
    37f0:	87 95       	ror	r24
    37f2:	0a 94       	dec	r0
    37f4:	e2 f7       	brpl	.-8      	; 0x37ee <distanceAFTER+0x3b4>
    37f6:	81 70       	andi	r24, 0x01	; 1
    37f8:	90 70       	andi	r25, 0x00	; 0
    37fa:	88 23       	and	r24, r24
    37fc:	89 f7       	brne	.-30     	; 0x37e0 <distanceAFTER+0x3a6>
   TCCR3B=0x00;     //Timer/Counter1 클록 정지(클록 입력 차단,CS11~CS10=000)
    37fe:	ea e8       	ldi	r30, 0x8A	; 138
    3800:	f0 e0       	ldi	r31, 0x00	; 0
    3802:	10 82       	st	Z, r1

   return (unsigned int)(SOUND_VELOCITY * (TCNT3*4/2)/1000);   // 거리=속도x시간, 거리 단위는 1mm
    3804:	e8 e8       	ldi	r30, 0x88	; 136
    3806:	f0 e0       	ldi	r31, 0x00	; 0
    3808:	80 81       	ld	r24, Z
    380a:	91 81       	ldd	r25, Z+1	; 0x01
    380c:	88 0f       	add	r24, r24
    380e:	99 1f       	adc	r25, r25
    3810:	88 0f       	add	r24, r24
    3812:	99 1f       	adc	r25, r25
    3814:	96 95       	lsr	r25
    3816:	87 95       	ror	r24
    3818:	cc 01       	movw	r24, r24
    381a:	a0 e0       	ldi	r26, 0x00	; 0
    381c:	b0 e0       	ldi	r27, 0x00	; 0
    381e:	24 e5       	ldi	r18, 0x54	; 84
    3820:	31 e0       	ldi	r19, 0x01	; 1
    3822:	40 e0       	ldi	r20, 0x00	; 0
    3824:	50 e0       	ldi	r21, 0x00	; 0
    3826:	bc 01       	movw	r22, r24
    3828:	cd 01       	movw	r24, r26
    382a:	0e 94 2b 2f 	call	0x5e56	; 0x5e56 <__mulsi3>
    382e:	dc 01       	movw	r26, r24
    3830:	cb 01       	movw	r24, r22
    3832:	28 ee       	ldi	r18, 0xE8	; 232
    3834:	33 e0       	ldi	r19, 0x03	; 3
    3836:	40 e0       	ldi	r20, 0x00	; 0
    3838:	50 e0       	ldi	r21, 0x00	; 0
    383a:	bc 01       	movw	r22, r24
    383c:	cd 01       	movw	r24, r26
    383e:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <__udivmodsi4>
    3842:	da 01       	movw	r26, r20
    3844:	c9 01       	movw	r24, r18
}
    3846:	e4 96       	adiw	r28, 0x34	; 52
    3848:	0f b6       	in	r0, 0x3f	; 63
    384a:	f8 94       	cli
    384c:	de bf       	out	0x3e, r29	; 62
    384e:	0f be       	out	0x3f, r0	; 63
    3850:	cd bf       	out	0x3d, r28	; 61
    3852:	cf 91       	pop	r28
    3854:	df 91       	pop	r29
    3856:	08 95       	ret

00003858 <dcmoter_port>:
#define F_CPU 16000000UL
#include <util/delay.h>
#include <avr/interrupt.h>

void dcmoter_port(void)
{
    3858:	df 93       	push	r29
    385a:	cf 93       	push	r28
    385c:	cd b7       	in	r28, 0x3d	; 61
    385e:	de b7       	in	r29, 0x3e	; 62
DDRB=0b11111011; //PB7,PB4,PB3,PC7,PB1,PB0사용  PB5는 주행서브 PB6은 크레인 서브모터  PB4는 주행dc모터 PC7PB3사용PB2고장  PB7은 크레인 DC모터 PB0PB1사용
    3860:	e7 e3       	ldi	r30, 0x37	; 55
    3862:	f0 e0       	ldi	r31, 0x00	; 0
    3864:	8b ef       	ldi	r24, 0xFB	; 251
    3866:	80 83       	st	Z, r24
PORTB=0b10011011; // 8비트 모터 전부 break
    3868:	e8 e3       	ldi	r30, 0x38	; 56
    386a:	f0 e0       	ldi	r31, 0x00	; 0
    386c:	8b e9       	ldi	r24, 0x9B	; 155
    386e:	80 83       	st	Z, r24
//DDRB= 0b00011000; //PB4,PB3사용  확인용
//PORTB= 0b00011000; //정지 확인용
DDRC=0b10000000;   // PC7사용 
    3870:	e4 e3       	ldi	r30, 0x34	; 52
    3872:	f0 e0       	ldi	r31, 0x00	; 0
    3874:	80 e8       	ldi	r24, 0x80	; 128
    3876:	80 83       	st	Z, r24
PORTC=0b10000000; // 주행 dc모터 break;
    3878:	e5 e3       	ldi	r30, 0x35	; 53
    387a:	f0 e0       	ldi	r31, 0x00	; 0
    387c:	80 e8       	ldi	r24, 0x80	; 128
    387e:	80 83       	st	Z, r24
TCCR2= 0b01101100;;  // 크레인모터 PWM  64분주 
    3880:	e5 e4       	ldi	r30, 0x45	; 69
    3882:	f0 e0       	ldi	r31, 0x00	; 0
    3884:	8c e6       	ldi	r24, 0x6C	; 108
    3886:	80 83       	st	Z, r24
TCCR0= 0b01101111;  // 차량모터 PWM  
    3888:	e3 e5       	ldi	r30, 0x53	; 83
    388a:	f0 e0       	ldi	r31, 0x00	; 0
    388c:	8f e6       	ldi	r24, 0x6F	; 111
    388e:	80 83       	st	Z, r24
OCR2=0; //크레인모터 속도
    3890:	e3 e4       	ldi	r30, 0x43	; 67
    3892:	f0 e0       	ldi	r31, 0x00	; 0
    3894:	10 82       	st	Z, r1
OCR0=0; // 차량 모터 속도
    3896:	e1 e5       	ldi	r30, 0x51	; 81
    3898:	f0 e0       	ldi	r31, 0x00	; 0
    389a:	10 82       	st	Z, r1
}
    389c:	cf 91       	pop	r28
    389e:	df 91       	pop	r29
    38a0:	08 95       	ret

000038a2 <dcmoter2_move>:


void dcmoter2_move(void) // PB7,PB1,PB0사용
{
    38a2:	df 93       	push	r29
    38a4:	cf 93       	push	r28
    38a6:	cd b7       	in	r28, 0x3d	; 61
    38a8:	de b7       	in	r29, 0x3e	; 62
    38aa:	6c 97       	sbiw	r28, 0x1c	; 28
    38ac:	0f b6       	in	r0, 0x3f	; 63
    38ae:	f8 94       	cli
    38b0:	de bf       	out	0x3e, r29	; 62
    38b2:	0f be       	out	0x3f, r0	; 63
    38b4:	cd bf       	out	0x3d, r28	; 61


PORTB= 0b10000010;//내려가기
    38b6:	e8 e3       	ldi	r30, 0x38	; 56
    38b8:	f0 e0       	ldi	r31, 0x00	; 0
    38ba:	82 e8       	ldi	r24, 0x82	; 130
    38bc:	80 83       	st	Z, r24
    38be:	80 e0       	ldi	r24, 0x00	; 0
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	aa e7       	ldi	r26, 0x7A	; 122
    38c4:	b4 e4       	ldi	r27, 0x44	; 68
    38c6:	89 8f       	std	Y+25, r24	; 0x19
    38c8:	9a 8f       	std	Y+26, r25	; 0x1a
    38ca:	ab 8f       	std	Y+27, r26	; 0x1b
    38cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38ce:	69 8d       	ldd	r22, Y+25	; 0x19
    38d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38d6:	20 e0       	ldi	r18, 0x00	; 0
    38d8:	30 e0       	ldi	r19, 0x00	; 0
    38da:	4a e7       	ldi	r20, 0x7A	; 122
    38dc:	55 e4       	ldi	r21, 0x45	; 69
    38de:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    38e2:	dc 01       	movw	r26, r24
    38e4:	cb 01       	movw	r24, r22
    38e6:	8d 8b       	std	Y+21, r24	; 0x15
    38e8:	9e 8b       	std	Y+22, r25	; 0x16
    38ea:	af 8b       	std	Y+23, r26	; 0x17
    38ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    38ee:	6d 89       	ldd	r22, Y+21	; 0x15
    38f0:	7e 89       	ldd	r23, Y+22	; 0x16
    38f2:	8f 89       	ldd	r24, Y+23	; 0x17
    38f4:	98 8d       	ldd	r25, Y+24	; 0x18
    38f6:	20 e0       	ldi	r18, 0x00	; 0
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	40 e8       	ldi	r20, 0x80	; 128
    38fc:	5f e3       	ldi	r21, 0x3F	; 63
    38fe:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    3902:	88 23       	and	r24, r24
    3904:	2c f4       	brge	.+10     	; 0x3910 <dcmoter2_move+0x6e>
		__ticks = 1;
    3906:	81 e0       	ldi	r24, 0x01	; 1
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	9c 8b       	std	Y+20, r25	; 0x14
    390c:	8b 8b       	std	Y+19, r24	; 0x13
    390e:	3f c0       	rjmp	.+126    	; 0x398e <dcmoter2_move+0xec>
	else if (__tmp > 65535)
    3910:	6d 89       	ldd	r22, Y+21	; 0x15
    3912:	7e 89       	ldd	r23, Y+22	; 0x16
    3914:	8f 89       	ldd	r24, Y+23	; 0x17
    3916:	98 8d       	ldd	r25, Y+24	; 0x18
    3918:	20 e0       	ldi	r18, 0x00	; 0
    391a:	3f ef       	ldi	r19, 0xFF	; 255
    391c:	4f e7       	ldi	r20, 0x7F	; 127
    391e:	57 e4       	ldi	r21, 0x47	; 71
    3920:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    3924:	18 16       	cp	r1, r24
    3926:	4c f5       	brge	.+82     	; 0x397a <dcmoter2_move+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3928:	69 8d       	ldd	r22, Y+25	; 0x19
    392a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    392c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    392e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	30 e0       	ldi	r19, 0x00	; 0
    3934:	40 e2       	ldi	r20, 0x20	; 32
    3936:	51 e4       	ldi	r21, 0x41	; 65
    3938:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    393c:	dc 01       	movw	r26, r24
    393e:	cb 01       	movw	r24, r22
    3940:	bc 01       	movw	r22, r24
    3942:	cd 01       	movw	r24, r26
    3944:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    3948:	dc 01       	movw	r26, r24
    394a:	cb 01       	movw	r24, r22
    394c:	9c 8b       	std	Y+20, r25	; 0x14
    394e:	8b 8b       	std	Y+19, r24	; 0x13
    3950:	0f c0       	rjmp	.+30     	; 0x3970 <dcmoter2_move+0xce>
    3952:	80 e9       	ldi	r24, 0x90	; 144
    3954:	91 e0       	ldi	r25, 0x01	; 1
    3956:	9a 8b       	std	Y+18, r25	; 0x12
    3958:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    395a:	89 89       	ldd	r24, Y+17	; 0x11
    395c:	9a 89       	ldd	r25, Y+18	; 0x12
    395e:	01 97       	sbiw	r24, 0x01	; 1
    3960:	f1 f7       	brne	.-4      	; 0x395e <dcmoter2_move+0xbc>
    3962:	9a 8b       	std	Y+18, r25	; 0x12
    3964:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3966:	8b 89       	ldd	r24, Y+19	; 0x13
    3968:	9c 89       	ldd	r25, Y+20	; 0x14
    396a:	01 97       	sbiw	r24, 0x01	; 1
    396c:	9c 8b       	std	Y+20, r25	; 0x14
    396e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3970:	8b 89       	ldd	r24, Y+19	; 0x13
    3972:	9c 89       	ldd	r25, Y+20	; 0x14
    3974:	00 97       	sbiw	r24, 0x00	; 0
    3976:	69 f7       	brne	.-38     	; 0x3952 <dcmoter2_move+0xb0>
    3978:	14 c0       	rjmp	.+40     	; 0x39a2 <dcmoter2_move+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    397a:	6d 89       	ldd	r22, Y+21	; 0x15
    397c:	7e 89       	ldd	r23, Y+22	; 0x16
    397e:	8f 89       	ldd	r24, Y+23	; 0x17
    3980:	98 8d       	ldd	r25, Y+24	; 0x18
    3982:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    3986:	dc 01       	movw	r26, r24
    3988:	cb 01       	movw	r24, r22
    398a:	9c 8b       	std	Y+20, r25	; 0x14
    398c:	8b 8b       	std	Y+19, r24	; 0x13
    398e:	8b 89       	ldd	r24, Y+19	; 0x13
    3990:	9c 89       	ldd	r25, Y+20	; 0x14
    3992:	98 8b       	std	Y+16, r25	; 0x10
    3994:	8f 87       	std	Y+15, r24	; 0x0f
    3996:	8f 85       	ldd	r24, Y+15	; 0x0f
    3998:	98 89       	ldd	r25, Y+16	; 0x10
    399a:	01 97       	sbiw	r24, 0x01	; 1
    399c:	f1 f7       	brne	.-4      	; 0x399a <dcmoter2_move+0xf8>
    399e:	98 8b       	std	Y+16, r25	; 0x10
    39a0:	8f 87       	std	Y+15, r24	; 0x0f

_delay_ms(1000);
PORTB= 0b10010001; //올라가기
    39a2:	e8 e3       	ldi	r30, 0x38	; 56
    39a4:	f0 e0       	ldi	r31, 0x00	; 0
    39a6:	81 e9       	ldi	r24, 0x91	; 145
    39a8:	80 83       	st	Z, r24
    39aa:	80 e0       	ldi	r24, 0x00	; 0
    39ac:	90 e0       	ldi	r25, 0x00	; 0
    39ae:	aa e7       	ldi	r26, 0x7A	; 122
    39b0:	b4 e4       	ldi	r27, 0x44	; 68
    39b2:	8b 87       	std	Y+11, r24	; 0x0b
    39b4:	9c 87       	std	Y+12, r25	; 0x0c
    39b6:	ad 87       	std	Y+13, r26	; 0x0d
    39b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    39bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    39be:	8d 85       	ldd	r24, Y+13	; 0x0d
    39c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    39c2:	20 e0       	ldi	r18, 0x00	; 0
    39c4:	30 e0       	ldi	r19, 0x00	; 0
    39c6:	4a e7       	ldi	r20, 0x7A	; 122
    39c8:	55 e4       	ldi	r21, 0x45	; 69
    39ca:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    39ce:	dc 01       	movw	r26, r24
    39d0:	cb 01       	movw	r24, r22
    39d2:	8f 83       	std	Y+7, r24	; 0x07
    39d4:	98 87       	std	Y+8, r25	; 0x08
    39d6:	a9 87       	std	Y+9, r26	; 0x09
    39d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39da:	6f 81       	ldd	r22, Y+7	; 0x07
    39dc:	78 85       	ldd	r23, Y+8	; 0x08
    39de:	89 85       	ldd	r24, Y+9	; 0x09
    39e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    39e2:	20 e0       	ldi	r18, 0x00	; 0
    39e4:	30 e0       	ldi	r19, 0x00	; 0
    39e6:	40 e8       	ldi	r20, 0x80	; 128
    39e8:	5f e3       	ldi	r21, 0x3F	; 63
    39ea:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    39ee:	88 23       	and	r24, r24
    39f0:	2c f4       	brge	.+10     	; 0x39fc <dcmoter2_move+0x15a>
		__ticks = 1;
    39f2:	81 e0       	ldi	r24, 0x01	; 1
    39f4:	90 e0       	ldi	r25, 0x00	; 0
    39f6:	9e 83       	std	Y+6, r25	; 0x06
    39f8:	8d 83       	std	Y+5, r24	; 0x05
    39fa:	3f c0       	rjmp	.+126    	; 0x3a7a <dcmoter2_move+0x1d8>
	else if (__tmp > 65535)
    39fc:	6f 81       	ldd	r22, Y+7	; 0x07
    39fe:	78 85       	ldd	r23, Y+8	; 0x08
    3a00:	89 85       	ldd	r24, Y+9	; 0x09
    3a02:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a04:	20 e0       	ldi	r18, 0x00	; 0
    3a06:	3f ef       	ldi	r19, 0xFF	; 255
    3a08:	4f e7       	ldi	r20, 0x7F	; 127
    3a0a:	57 e4       	ldi	r21, 0x47	; 71
    3a0c:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    3a10:	18 16       	cp	r1, r24
    3a12:	4c f5       	brge	.+82     	; 0x3a66 <dcmoter2_move+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a14:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a16:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a18:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a1c:	20 e0       	ldi	r18, 0x00	; 0
    3a1e:	30 e0       	ldi	r19, 0x00	; 0
    3a20:	40 e2       	ldi	r20, 0x20	; 32
    3a22:	51 e4       	ldi	r21, 0x41	; 65
    3a24:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    3a28:	dc 01       	movw	r26, r24
    3a2a:	cb 01       	movw	r24, r22
    3a2c:	bc 01       	movw	r22, r24
    3a2e:	cd 01       	movw	r24, r26
    3a30:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    3a34:	dc 01       	movw	r26, r24
    3a36:	cb 01       	movw	r24, r22
    3a38:	9e 83       	std	Y+6, r25	; 0x06
    3a3a:	8d 83       	std	Y+5, r24	; 0x05
    3a3c:	0f c0       	rjmp	.+30     	; 0x3a5c <dcmoter2_move+0x1ba>
    3a3e:	80 e9       	ldi	r24, 0x90	; 144
    3a40:	91 e0       	ldi	r25, 0x01	; 1
    3a42:	9c 83       	std	Y+4, r25	; 0x04
    3a44:	8b 83       	std	Y+3, r24	; 0x03
    3a46:	8b 81       	ldd	r24, Y+3	; 0x03
    3a48:	9c 81       	ldd	r25, Y+4	; 0x04
    3a4a:	01 97       	sbiw	r24, 0x01	; 1
    3a4c:	f1 f7       	brne	.-4      	; 0x3a4a <dcmoter2_move+0x1a8>
    3a4e:	9c 83       	std	Y+4, r25	; 0x04
    3a50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a52:	8d 81       	ldd	r24, Y+5	; 0x05
    3a54:	9e 81       	ldd	r25, Y+6	; 0x06
    3a56:	01 97       	sbiw	r24, 0x01	; 1
    3a58:	9e 83       	std	Y+6, r25	; 0x06
    3a5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a60:	00 97       	sbiw	r24, 0x00	; 0
    3a62:	69 f7       	brne	.-38     	; 0x3a3e <dcmoter2_move+0x19c>
    3a64:	14 c0       	rjmp	.+40     	; 0x3a8e <dcmoter2_move+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a66:	6f 81       	ldd	r22, Y+7	; 0x07
    3a68:	78 85       	ldd	r23, Y+8	; 0x08
    3a6a:	89 85       	ldd	r24, Y+9	; 0x09
    3a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a6e:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    3a72:	dc 01       	movw	r26, r24
    3a74:	cb 01       	movw	r24, r22
    3a76:	9e 83       	std	Y+6, r25	; 0x06
    3a78:	8d 83       	std	Y+5, r24	; 0x05
    3a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a7e:	9a 83       	std	Y+2, r25	; 0x02
    3a80:	89 83       	std	Y+1, r24	; 0x01
    3a82:	89 81       	ldd	r24, Y+1	; 0x01
    3a84:	9a 81       	ldd	r25, Y+2	; 0x02
    3a86:	01 97       	sbiw	r24, 0x01	; 1
    3a88:	f1 f7       	brne	.-4      	; 0x3a86 <dcmoter2_move+0x1e4>
    3a8a:	9a 83       	std	Y+2, r25	; 0x02
    3a8c:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(1000);
}
    3a8e:	6c 96       	adiw	r28, 0x1c	; 28
    3a90:	0f b6       	in	r0, 0x3f	; 63
    3a92:	f8 94       	cli
    3a94:	de bf       	out	0x3e, r29	; 62
    3a96:	0f be       	out	0x3f, r0	; 63
    3a98:	cd bf       	out	0x3d, r28	; 61
    3a9a:	cf 91       	pop	r28
    3a9c:	df 91       	pop	r29
    3a9e:	08 95       	ret

00003aa0 <dcmoter0_move>:


void dcmoter0_move(void) // PB4,PB3,PB2사용
{
    3aa0:	df 93       	push	r29
    3aa2:	cf 93       	push	r28
    3aa4:	cd b7       	in	r28, 0x3d	; 61
    3aa6:	de b7       	in	r29, 0x3e	; 62
    3aa8:	6c 97       	sbiw	r28, 0x1c	; 28
    3aaa:	0f b6       	in	r0, 0x3f	; 63
    3aac:	f8 94       	cli
    3aae:	de bf       	out	0x3e, r29	; 62
    3ab0:	0f be       	out	0x3f, r0	; 63
    3ab2:	cd bf       	out	0x3d, r28	; 61

PORTB= 0b00010100;//정회전 
    3ab4:	e8 e3       	ldi	r30, 0x38	; 56
    3ab6:	f0 e0       	ldi	r31, 0x00	; 0
    3ab8:	84 e1       	ldi	r24, 0x14	; 20
    3aba:	80 83       	st	Z, r24
    3abc:	80 e0       	ldi	r24, 0x00	; 0
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	aa e7       	ldi	r26, 0x7A	; 122
    3ac2:	b4 e4       	ldi	r27, 0x44	; 68
    3ac4:	89 8f       	std	Y+25, r24	; 0x19
    3ac6:	9a 8f       	std	Y+26, r25	; 0x1a
    3ac8:	ab 8f       	std	Y+27, r26	; 0x1b
    3aca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3acc:	69 8d       	ldd	r22, Y+25	; 0x19
    3ace:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ad0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ad2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ad4:	20 e0       	ldi	r18, 0x00	; 0
    3ad6:	30 e0       	ldi	r19, 0x00	; 0
    3ad8:	4a e7       	ldi	r20, 0x7A	; 122
    3ada:	55 e4       	ldi	r21, 0x45	; 69
    3adc:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    3ae0:	dc 01       	movw	r26, r24
    3ae2:	cb 01       	movw	r24, r22
    3ae4:	8d 8b       	std	Y+21, r24	; 0x15
    3ae6:	9e 8b       	std	Y+22, r25	; 0x16
    3ae8:	af 8b       	std	Y+23, r26	; 0x17
    3aea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3aec:	6d 89       	ldd	r22, Y+21	; 0x15
    3aee:	7e 89       	ldd	r23, Y+22	; 0x16
    3af0:	8f 89       	ldd	r24, Y+23	; 0x17
    3af2:	98 8d       	ldd	r25, Y+24	; 0x18
    3af4:	20 e0       	ldi	r18, 0x00	; 0
    3af6:	30 e0       	ldi	r19, 0x00	; 0
    3af8:	40 e8       	ldi	r20, 0x80	; 128
    3afa:	5f e3       	ldi	r21, 0x3F	; 63
    3afc:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    3b00:	88 23       	and	r24, r24
    3b02:	2c f4       	brge	.+10     	; 0x3b0e <dcmoter0_move+0x6e>
		__ticks = 1;
    3b04:	81 e0       	ldi	r24, 0x01	; 1
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	9c 8b       	std	Y+20, r25	; 0x14
    3b0a:	8b 8b       	std	Y+19, r24	; 0x13
    3b0c:	3f c0       	rjmp	.+126    	; 0x3b8c <dcmoter0_move+0xec>
	else if (__tmp > 65535)
    3b0e:	6d 89       	ldd	r22, Y+21	; 0x15
    3b10:	7e 89       	ldd	r23, Y+22	; 0x16
    3b12:	8f 89       	ldd	r24, Y+23	; 0x17
    3b14:	98 8d       	ldd	r25, Y+24	; 0x18
    3b16:	20 e0       	ldi	r18, 0x00	; 0
    3b18:	3f ef       	ldi	r19, 0xFF	; 255
    3b1a:	4f e7       	ldi	r20, 0x7F	; 127
    3b1c:	57 e4       	ldi	r21, 0x47	; 71
    3b1e:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    3b22:	18 16       	cp	r1, r24
    3b24:	4c f5       	brge	.+82     	; 0x3b78 <dcmoter0_move+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b26:	69 8d       	ldd	r22, Y+25	; 0x19
    3b28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b2e:	20 e0       	ldi	r18, 0x00	; 0
    3b30:	30 e0       	ldi	r19, 0x00	; 0
    3b32:	40 e2       	ldi	r20, 0x20	; 32
    3b34:	51 e4       	ldi	r21, 0x41	; 65
    3b36:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    3b3a:	dc 01       	movw	r26, r24
    3b3c:	cb 01       	movw	r24, r22
    3b3e:	bc 01       	movw	r22, r24
    3b40:	cd 01       	movw	r24, r26
    3b42:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    3b46:	dc 01       	movw	r26, r24
    3b48:	cb 01       	movw	r24, r22
    3b4a:	9c 8b       	std	Y+20, r25	; 0x14
    3b4c:	8b 8b       	std	Y+19, r24	; 0x13
    3b4e:	0f c0       	rjmp	.+30     	; 0x3b6e <dcmoter0_move+0xce>
    3b50:	80 e9       	ldi	r24, 0x90	; 144
    3b52:	91 e0       	ldi	r25, 0x01	; 1
    3b54:	9a 8b       	std	Y+18, r25	; 0x12
    3b56:	89 8b       	std	Y+17, r24	; 0x11
    3b58:	89 89       	ldd	r24, Y+17	; 0x11
    3b5a:	9a 89       	ldd	r25, Y+18	; 0x12
    3b5c:	01 97       	sbiw	r24, 0x01	; 1
    3b5e:	f1 f7       	brne	.-4      	; 0x3b5c <dcmoter0_move+0xbc>
    3b60:	9a 8b       	std	Y+18, r25	; 0x12
    3b62:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b64:	8b 89       	ldd	r24, Y+19	; 0x13
    3b66:	9c 89       	ldd	r25, Y+20	; 0x14
    3b68:	01 97       	sbiw	r24, 0x01	; 1
    3b6a:	9c 8b       	std	Y+20, r25	; 0x14
    3b6c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b6e:	8b 89       	ldd	r24, Y+19	; 0x13
    3b70:	9c 89       	ldd	r25, Y+20	; 0x14
    3b72:	00 97       	sbiw	r24, 0x00	; 0
    3b74:	69 f7       	brne	.-38     	; 0x3b50 <dcmoter0_move+0xb0>
    3b76:	14 c0       	rjmp	.+40     	; 0x3ba0 <dcmoter0_move+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b78:	6d 89       	ldd	r22, Y+21	; 0x15
    3b7a:	7e 89       	ldd	r23, Y+22	; 0x16
    3b7c:	8f 89       	ldd	r24, Y+23	; 0x17
    3b7e:	98 8d       	ldd	r25, Y+24	; 0x18
    3b80:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    3b84:	dc 01       	movw	r26, r24
    3b86:	cb 01       	movw	r24, r22
    3b88:	9c 8b       	std	Y+20, r25	; 0x14
    3b8a:	8b 8b       	std	Y+19, r24	; 0x13
    3b8c:	8b 89       	ldd	r24, Y+19	; 0x13
    3b8e:	9c 89       	ldd	r25, Y+20	; 0x14
    3b90:	98 8b       	std	Y+16, r25	; 0x10
    3b92:	8f 87       	std	Y+15, r24	; 0x0f
    3b94:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b96:	98 89       	ldd	r25, Y+16	; 0x10
    3b98:	01 97       	sbiw	r24, 0x01	; 1
    3b9a:	f1 f7       	brne	.-4      	; 0x3b98 <dcmoter0_move+0xf8>
    3b9c:	98 8b       	std	Y+16, r25	; 0x10
    3b9e:	8f 87       	std	Y+15, r24	; 0x0f

_delay_ms(1000);
PORTB= 0b00011000; //역회전 
    3ba0:	e8 e3       	ldi	r30, 0x38	; 56
    3ba2:	f0 e0       	ldi	r31, 0x00	; 0
    3ba4:	88 e1       	ldi	r24, 0x18	; 24
    3ba6:	80 83       	st	Z, r24
    3ba8:	80 e0       	ldi	r24, 0x00	; 0
    3baa:	90 e0       	ldi	r25, 0x00	; 0
    3bac:	aa e7       	ldi	r26, 0x7A	; 122
    3bae:	b4 e4       	ldi	r27, 0x44	; 68
    3bb0:	8b 87       	std	Y+11, r24	; 0x0b
    3bb2:	9c 87       	std	Y+12, r25	; 0x0c
    3bb4:	ad 87       	std	Y+13, r26	; 0x0d
    3bb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bba:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bc0:	20 e0       	ldi	r18, 0x00	; 0
    3bc2:	30 e0       	ldi	r19, 0x00	; 0
    3bc4:	4a e7       	ldi	r20, 0x7A	; 122
    3bc6:	55 e4       	ldi	r21, 0x45	; 69
    3bc8:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    3bcc:	dc 01       	movw	r26, r24
    3bce:	cb 01       	movw	r24, r22
    3bd0:	8f 83       	std	Y+7, r24	; 0x07
    3bd2:	98 87       	std	Y+8, r25	; 0x08
    3bd4:	a9 87       	std	Y+9, r26	; 0x09
    3bd6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bd8:	6f 81       	ldd	r22, Y+7	; 0x07
    3bda:	78 85       	ldd	r23, Y+8	; 0x08
    3bdc:	89 85       	ldd	r24, Y+9	; 0x09
    3bde:	9a 85       	ldd	r25, Y+10	; 0x0a
    3be0:	20 e0       	ldi	r18, 0x00	; 0
    3be2:	30 e0       	ldi	r19, 0x00	; 0
    3be4:	40 e8       	ldi	r20, 0x80	; 128
    3be6:	5f e3       	ldi	r21, 0x3F	; 63
    3be8:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    3bec:	88 23       	and	r24, r24
    3bee:	2c f4       	brge	.+10     	; 0x3bfa <dcmoter0_move+0x15a>
		__ticks = 1;
    3bf0:	81 e0       	ldi	r24, 0x01	; 1
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	9e 83       	std	Y+6, r25	; 0x06
    3bf6:	8d 83       	std	Y+5, r24	; 0x05
    3bf8:	3f c0       	rjmp	.+126    	; 0x3c78 <dcmoter0_move+0x1d8>
	else if (__tmp > 65535)
    3bfa:	6f 81       	ldd	r22, Y+7	; 0x07
    3bfc:	78 85       	ldd	r23, Y+8	; 0x08
    3bfe:	89 85       	ldd	r24, Y+9	; 0x09
    3c00:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c02:	20 e0       	ldi	r18, 0x00	; 0
    3c04:	3f ef       	ldi	r19, 0xFF	; 255
    3c06:	4f e7       	ldi	r20, 0x7F	; 127
    3c08:	57 e4       	ldi	r21, 0x47	; 71
    3c0a:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    3c0e:	18 16       	cp	r1, r24
    3c10:	4c f5       	brge	.+82     	; 0x3c64 <dcmoter0_move+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c12:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c14:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c16:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c18:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c1a:	20 e0       	ldi	r18, 0x00	; 0
    3c1c:	30 e0       	ldi	r19, 0x00	; 0
    3c1e:	40 e2       	ldi	r20, 0x20	; 32
    3c20:	51 e4       	ldi	r21, 0x41	; 65
    3c22:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    3c26:	dc 01       	movw	r26, r24
    3c28:	cb 01       	movw	r24, r22
    3c2a:	bc 01       	movw	r22, r24
    3c2c:	cd 01       	movw	r24, r26
    3c2e:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    3c32:	dc 01       	movw	r26, r24
    3c34:	cb 01       	movw	r24, r22
    3c36:	9e 83       	std	Y+6, r25	; 0x06
    3c38:	8d 83       	std	Y+5, r24	; 0x05
    3c3a:	0f c0       	rjmp	.+30     	; 0x3c5a <dcmoter0_move+0x1ba>
    3c3c:	80 e9       	ldi	r24, 0x90	; 144
    3c3e:	91 e0       	ldi	r25, 0x01	; 1
    3c40:	9c 83       	std	Y+4, r25	; 0x04
    3c42:	8b 83       	std	Y+3, r24	; 0x03
    3c44:	8b 81       	ldd	r24, Y+3	; 0x03
    3c46:	9c 81       	ldd	r25, Y+4	; 0x04
    3c48:	01 97       	sbiw	r24, 0x01	; 1
    3c4a:	f1 f7       	brne	.-4      	; 0x3c48 <dcmoter0_move+0x1a8>
    3c4c:	9c 83       	std	Y+4, r25	; 0x04
    3c4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c50:	8d 81       	ldd	r24, Y+5	; 0x05
    3c52:	9e 81       	ldd	r25, Y+6	; 0x06
    3c54:	01 97       	sbiw	r24, 0x01	; 1
    3c56:	9e 83       	std	Y+6, r25	; 0x06
    3c58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c5c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c5e:	00 97       	sbiw	r24, 0x00	; 0
    3c60:	69 f7       	brne	.-38     	; 0x3c3c <dcmoter0_move+0x19c>
    3c62:	14 c0       	rjmp	.+40     	; 0x3c8c <dcmoter0_move+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c64:	6f 81       	ldd	r22, Y+7	; 0x07
    3c66:	78 85       	ldd	r23, Y+8	; 0x08
    3c68:	89 85       	ldd	r24, Y+9	; 0x09
    3c6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c6c:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    3c70:	dc 01       	movw	r26, r24
    3c72:	cb 01       	movw	r24, r22
    3c74:	9e 83       	std	Y+6, r25	; 0x06
    3c76:	8d 83       	std	Y+5, r24	; 0x05
    3c78:	8d 81       	ldd	r24, Y+5	; 0x05
    3c7a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c7c:	9a 83       	std	Y+2, r25	; 0x02
    3c7e:	89 83       	std	Y+1, r24	; 0x01
    3c80:	89 81       	ldd	r24, Y+1	; 0x01
    3c82:	9a 81       	ldd	r25, Y+2	; 0x02
    3c84:	01 97       	sbiw	r24, 0x01	; 1
    3c86:	f1 f7       	brne	.-4      	; 0x3c84 <dcmoter0_move+0x1e4>
    3c88:	9a 83       	std	Y+2, r25	; 0x02
    3c8a:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(1000);
}
    3c8c:	6c 96       	adiw	r28, 0x1c	; 28
    3c8e:	0f b6       	in	r0, 0x3f	; 63
    3c90:	f8 94       	cli
    3c92:	de bf       	out	0x3e, r29	; 62
    3c94:	0f be       	out	0x3f, r0	; 63
    3c96:	cd bf       	out	0x3d, r28	; 61
    3c98:	cf 91       	pop	r28
    3c9a:	df 91       	pop	r29
    3c9c:	08 95       	ret

00003c9e <slowsubport>:
#include <avr/interrupt.h>
#include "uart.h"
#define SOUND_VELOCITY 340UL
unsigned int u;
void slowsubport(void) //공용 그냥 서브모터 설정이랑 같음
{
    3c9e:	df 93       	push	r29
    3ca0:	cf 93       	push	r28
    3ca2:	cd b7       	in	r28, 0x3d	; 61
    3ca4:	de b7       	in	r29, 0x3e	; 62
 TCCR1A = 0b10100010; // 1010OCRA OCRB만 사용 00 OCRC사용안함 FAST PWM 
    3ca6:	ef e4       	ldi	r30, 0x4F	; 79
    3ca8:	f0 e0       	ldi	r31, 0x00	; 0
    3caa:	82 ea       	ldi	r24, 0xA2	; 162
    3cac:	80 83       	st	Z, r24

 TCCR1B=0x1b; //FAST PWM
    3cae:	ee e4       	ldi	r30, 0x4E	; 78
    3cb0:	f0 e0       	ldi	r31, 0x00	; 0
    3cb2:	8b e1       	ldi	r24, 0x1B	; 27
    3cb4:	80 83       	st	Z, r24

 ICR1=4999;     //TOP
    3cb6:	e6 e4       	ldi	r30, 0x46	; 70
    3cb8:	f0 e0       	ldi	r31, 0x00	; 0
    3cba:	87 e8       	ldi	r24, 0x87	; 135
    3cbc:	93 e1       	ldi	r25, 0x13	; 19
    3cbe:	91 83       	std	Z+1, r25	; 0x01
    3cc0:	80 83       	st	Z, r24

 OCR1A=385;   //0도
    3cc2:	ea e4       	ldi	r30, 0x4A	; 74
    3cc4:	f0 e0       	ldi	r31, 0x00	; 0
    3cc6:	81 e8       	ldi	r24, 0x81	; 129
    3cc8:	91 e0       	ldi	r25, 0x01	; 1
    3cca:	91 83       	std	Z+1, r25	; 0x01
    3ccc:	80 83       	st	Z, r24
 OCR1B=385;   //0도
    3cce:	e8 e4       	ldi	r30, 0x48	; 72
    3cd0:	f0 e0       	ldi	r31, 0x00	; 0
    3cd2:	81 e8       	ldi	r24, 0x81	; 129
    3cd4:	91 e0       	ldi	r25, 0x01	; 1
    3cd6:	91 83       	std	Z+1, r25	; 0x01
    3cd8:	80 83       	st	Z, r24
}
    3cda:	cf 91       	pop	r28
    3cdc:	df 91       	pop	r29
    3cde:	08 95       	ret

00003ce0 <movefind1>:

void movefind1(void)
{
    3ce0:	df 93       	push	r29
    3ce2:	cf 93       	push	r28
    3ce4:	cd b7       	in	r28, 0x3d	; 61
    3ce6:	de b7       	in	r29, 0x3e	; 62
    3ce8:	a0 97       	sbiw	r28, 0x20	; 32
    3cea:	0f b6       	in	r0, 0x3f	; 63
    3cec:	f8 94       	cli
    3cee:	de bf       	out	0x3e, r29	; 62
    3cf0:	0f be       	out	0x3f, r0	; 63
    3cf2:	cd bf       	out	0x3d, r28	; 61
uart_init();
    3cf4:	0e 94 02 28 	call	0x5004	; 0x5004 <uart_init>
unsigned short find = sonic1();
    3cf8:	0e 94 6f 21 	call	0x42de	; 0x42de <sonic1>
    3cfc:	98 a3       	std	Y+32, r25	; 0x20
    3cfe:	8f 8f       	std	Y+31, r24	; 0x1f
    3d00:	80 e0       	ldi	r24, 0x00	; 0
    3d02:	90 e0       	ldi	r25, 0x00	; 0
    3d04:	a0 e8       	ldi	r26, 0x80	; 128
    3d06:	bf e3       	ldi	r27, 0x3F	; 63
    3d08:	89 8f       	std	Y+25, r24	; 0x19
    3d0a:	9a 8f       	std	Y+26, r25	; 0x1a
    3d0c:	ab 8f       	std	Y+27, r26	; 0x1b
    3d0e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d10:	69 8d       	ldd	r22, Y+25	; 0x19
    3d12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d18:	20 e0       	ldi	r18, 0x00	; 0
    3d1a:	30 e0       	ldi	r19, 0x00	; 0
    3d1c:	4a e7       	ldi	r20, 0x7A	; 122
    3d1e:	55 e4       	ldi	r21, 0x45	; 69
    3d20:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    3d24:	dc 01       	movw	r26, r24
    3d26:	cb 01       	movw	r24, r22
    3d28:	8d 8b       	std	Y+21, r24	; 0x15
    3d2a:	9e 8b       	std	Y+22, r25	; 0x16
    3d2c:	af 8b       	std	Y+23, r26	; 0x17
    3d2e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d30:	6d 89       	ldd	r22, Y+21	; 0x15
    3d32:	7e 89       	ldd	r23, Y+22	; 0x16
    3d34:	8f 89       	ldd	r24, Y+23	; 0x17
    3d36:	98 8d       	ldd	r25, Y+24	; 0x18
    3d38:	20 e0       	ldi	r18, 0x00	; 0
    3d3a:	30 e0       	ldi	r19, 0x00	; 0
    3d3c:	40 e8       	ldi	r20, 0x80	; 128
    3d3e:	5f e3       	ldi	r21, 0x3F	; 63
    3d40:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    3d44:	88 23       	and	r24, r24
    3d46:	2c f4       	brge	.+10     	; 0x3d52 <movefind1+0x72>
		__ticks = 1;
    3d48:	81 e0       	ldi	r24, 0x01	; 1
    3d4a:	90 e0       	ldi	r25, 0x00	; 0
    3d4c:	9c 8b       	std	Y+20, r25	; 0x14
    3d4e:	8b 8b       	std	Y+19, r24	; 0x13
    3d50:	3f c0       	rjmp	.+126    	; 0x3dd0 <movefind1+0xf0>
	else if (__tmp > 65535)
    3d52:	6d 89       	ldd	r22, Y+21	; 0x15
    3d54:	7e 89       	ldd	r23, Y+22	; 0x16
    3d56:	8f 89       	ldd	r24, Y+23	; 0x17
    3d58:	98 8d       	ldd	r25, Y+24	; 0x18
    3d5a:	20 e0       	ldi	r18, 0x00	; 0
    3d5c:	3f ef       	ldi	r19, 0xFF	; 255
    3d5e:	4f e7       	ldi	r20, 0x7F	; 127
    3d60:	57 e4       	ldi	r21, 0x47	; 71
    3d62:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    3d66:	18 16       	cp	r1, r24
    3d68:	4c f5       	brge	.+82     	; 0x3dbc <movefind1+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d6a:	69 8d       	ldd	r22, Y+25	; 0x19
    3d6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d72:	20 e0       	ldi	r18, 0x00	; 0
    3d74:	30 e0       	ldi	r19, 0x00	; 0
    3d76:	40 e2       	ldi	r20, 0x20	; 32
    3d78:	51 e4       	ldi	r21, 0x41	; 65
    3d7a:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    3d7e:	dc 01       	movw	r26, r24
    3d80:	cb 01       	movw	r24, r22
    3d82:	bc 01       	movw	r22, r24
    3d84:	cd 01       	movw	r24, r26
    3d86:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    3d8a:	dc 01       	movw	r26, r24
    3d8c:	cb 01       	movw	r24, r22
    3d8e:	9c 8b       	std	Y+20, r25	; 0x14
    3d90:	8b 8b       	std	Y+19, r24	; 0x13
    3d92:	0f c0       	rjmp	.+30     	; 0x3db2 <movefind1+0xd2>
    3d94:	80 e9       	ldi	r24, 0x90	; 144
    3d96:	91 e0       	ldi	r25, 0x01	; 1
    3d98:	9a 8b       	std	Y+18, r25	; 0x12
    3d9a:	89 8b       	std	Y+17, r24	; 0x11
    3d9c:	89 89       	ldd	r24, Y+17	; 0x11
    3d9e:	9a 89       	ldd	r25, Y+18	; 0x12
    3da0:	01 97       	sbiw	r24, 0x01	; 1
    3da2:	f1 f7       	brne	.-4      	; 0x3da0 <movefind1+0xc0>
    3da4:	9a 8b       	std	Y+18, r25	; 0x12
    3da6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3da8:	8b 89       	ldd	r24, Y+19	; 0x13
    3daa:	9c 89       	ldd	r25, Y+20	; 0x14
    3dac:	01 97       	sbiw	r24, 0x01	; 1
    3dae:	9c 8b       	std	Y+20, r25	; 0x14
    3db0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3db2:	8b 89       	ldd	r24, Y+19	; 0x13
    3db4:	9c 89       	ldd	r25, Y+20	; 0x14
    3db6:	00 97       	sbiw	r24, 0x00	; 0
    3db8:	69 f7       	brne	.-38     	; 0x3d94 <movefind1+0xb4>
    3dba:	14 c0       	rjmp	.+40     	; 0x3de4 <movefind1+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dbc:	6d 89       	ldd	r22, Y+21	; 0x15
    3dbe:	7e 89       	ldd	r23, Y+22	; 0x16
    3dc0:	8f 89       	ldd	r24, Y+23	; 0x17
    3dc2:	98 8d       	ldd	r25, Y+24	; 0x18
    3dc4:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    3dc8:	dc 01       	movw	r26, r24
    3dca:	cb 01       	movw	r24, r22
    3dcc:	9c 8b       	std	Y+20, r25	; 0x14
    3dce:	8b 8b       	std	Y+19, r24	; 0x13
    3dd0:	8b 89       	ldd	r24, Y+19	; 0x13
    3dd2:	9c 89       	ldd	r25, Y+20	; 0x14
    3dd4:	98 8b       	std	Y+16, r25	; 0x10
    3dd6:	8f 87       	std	Y+15, r24	; 0x0f
    3dd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dda:	98 89       	ldd	r25, Y+16	; 0x10
    3ddc:	01 97       	sbiw	r24, 0x01	; 1
    3dde:	f1 f7       	brne	.-4      	; 0x3ddc <movefind1+0xfc>
    3de0:	98 8b       	std	Y+16, r25	; 0x10
    3de2:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(1);
unsigned int A_P=375;
    3de4:	87 e7       	ldi	r24, 0x77	; 119
    3de6:	91 e0       	ldi	r25, 0x01	; 1
    3de8:	9e 8f       	std	Y+30, r25	; 0x1e
    3dea:	8d 8f       	std	Y+29, r24	; 0x1d
while(1)

{ 
printf("find is = %d \r\n" );
    3dec:	00 d0       	rcall	.+0      	; 0x3dee <movefind1+0x10e>
    3dee:	ed b7       	in	r30, 0x3d	; 61
    3df0:	fe b7       	in	r31, 0x3e	; 62
    3df2:	31 96       	adiw	r30, 0x01	; 1
    3df4:	85 e5       	ldi	r24, 0x55	; 85
    3df6:	91 e0       	ldi	r25, 0x01	; 1
    3df8:	91 83       	std	Z+1, r25	; 0x01
    3dfa:	80 83       	st	Z, r24
    3dfc:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <printf>
    3e00:	0f 90       	pop	r0
    3e02:	0f 90       	pop	r0
          OCR1B=A_P;
    3e04:	e8 e4       	ldi	r30, 0x48	; 72
    3e06:	f0 e0       	ldi	r31, 0x00	; 0
    3e08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3e0c:	91 83       	std	Z+1, r25	; 0x01
    3e0e:	80 83       	st	Z, r24
    3e10:	80 e0       	ldi	r24, 0x00	; 0
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	aa ef       	ldi	r26, 0xFA	; 250
    3e16:	b3 e4       	ldi	r27, 0x43	; 67
    3e18:	8b 87       	std	Y+11, r24	; 0x0b
    3e1a:	9c 87       	std	Y+12, r25	; 0x0c
    3e1c:	ad 87       	std	Y+13, r26	; 0x0d
    3e1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e20:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e22:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e24:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e26:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e28:	20 e0       	ldi	r18, 0x00	; 0
    3e2a:	30 e0       	ldi	r19, 0x00	; 0
    3e2c:	4a e7       	ldi	r20, 0x7A	; 122
    3e2e:	55 e4       	ldi	r21, 0x45	; 69
    3e30:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    3e34:	dc 01       	movw	r26, r24
    3e36:	cb 01       	movw	r24, r22
    3e38:	8f 83       	std	Y+7, r24	; 0x07
    3e3a:	98 87       	std	Y+8, r25	; 0x08
    3e3c:	a9 87       	std	Y+9, r26	; 0x09
    3e3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e40:	6f 81       	ldd	r22, Y+7	; 0x07
    3e42:	78 85       	ldd	r23, Y+8	; 0x08
    3e44:	89 85       	ldd	r24, Y+9	; 0x09
    3e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e48:	20 e0       	ldi	r18, 0x00	; 0
    3e4a:	30 e0       	ldi	r19, 0x00	; 0
    3e4c:	40 e8       	ldi	r20, 0x80	; 128
    3e4e:	5f e3       	ldi	r21, 0x3F	; 63
    3e50:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    3e54:	88 23       	and	r24, r24
    3e56:	2c f4       	brge	.+10     	; 0x3e62 <movefind1+0x182>
		__ticks = 1;
    3e58:	81 e0       	ldi	r24, 0x01	; 1
    3e5a:	90 e0       	ldi	r25, 0x00	; 0
    3e5c:	9e 83       	std	Y+6, r25	; 0x06
    3e5e:	8d 83       	std	Y+5, r24	; 0x05
    3e60:	3f c0       	rjmp	.+126    	; 0x3ee0 <movefind1+0x200>
	else if (__tmp > 65535)
    3e62:	6f 81       	ldd	r22, Y+7	; 0x07
    3e64:	78 85       	ldd	r23, Y+8	; 0x08
    3e66:	89 85       	ldd	r24, Y+9	; 0x09
    3e68:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e6a:	20 e0       	ldi	r18, 0x00	; 0
    3e6c:	3f ef       	ldi	r19, 0xFF	; 255
    3e6e:	4f e7       	ldi	r20, 0x7F	; 127
    3e70:	57 e4       	ldi	r21, 0x47	; 71
    3e72:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    3e76:	18 16       	cp	r1, r24
    3e78:	4c f5       	brge	.+82     	; 0x3ecc <movefind1+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e80:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e82:	20 e0       	ldi	r18, 0x00	; 0
    3e84:	30 e0       	ldi	r19, 0x00	; 0
    3e86:	40 e2       	ldi	r20, 0x20	; 32
    3e88:	51 e4       	ldi	r21, 0x41	; 65
    3e8a:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    3e8e:	dc 01       	movw	r26, r24
    3e90:	cb 01       	movw	r24, r22
    3e92:	bc 01       	movw	r22, r24
    3e94:	cd 01       	movw	r24, r26
    3e96:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    3e9a:	dc 01       	movw	r26, r24
    3e9c:	cb 01       	movw	r24, r22
    3e9e:	9e 83       	std	Y+6, r25	; 0x06
    3ea0:	8d 83       	std	Y+5, r24	; 0x05
    3ea2:	0f c0       	rjmp	.+30     	; 0x3ec2 <movefind1+0x1e2>
    3ea4:	80 e9       	ldi	r24, 0x90	; 144
    3ea6:	91 e0       	ldi	r25, 0x01	; 1
    3ea8:	9c 83       	std	Y+4, r25	; 0x04
    3eaa:	8b 83       	std	Y+3, r24	; 0x03
    3eac:	8b 81       	ldd	r24, Y+3	; 0x03
    3eae:	9c 81       	ldd	r25, Y+4	; 0x04
    3eb0:	01 97       	sbiw	r24, 0x01	; 1
    3eb2:	f1 f7       	brne	.-4      	; 0x3eb0 <movefind1+0x1d0>
    3eb4:	9c 83       	std	Y+4, r25	; 0x04
    3eb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    3eba:	9e 81       	ldd	r25, Y+6	; 0x06
    3ebc:	01 97       	sbiw	r24, 0x01	; 1
    3ebe:	9e 83       	std	Y+6, r25	; 0x06
    3ec0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ec6:	00 97       	sbiw	r24, 0x00	; 0
    3ec8:	69 f7       	brne	.-38     	; 0x3ea4 <movefind1+0x1c4>
    3eca:	14 c0       	rjmp	.+40     	; 0x3ef4 <movefind1+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    3ece:	78 85       	ldd	r23, Y+8	; 0x08
    3ed0:	89 85       	ldd	r24, Y+9	; 0x09
    3ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ed4:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    3ed8:	dc 01       	movw	r26, r24
    3eda:	cb 01       	movw	r24, r22
    3edc:	9e 83       	std	Y+6, r25	; 0x06
    3ede:	8d 83       	std	Y+5, r24	; 0x05
    3ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ee4:	9a 83       	std	Y+2, r25	; 0x02
    3ee6:	89 83       	std	Y+1, r24	; 0x01
    3ee8:	89 81       	ldd	r24, Y+1	; 0x01
    3eea:	9a 81       	ldd	r25, Y+2	; 0x02
    3eec:	01 97       	sbiw	r24, 0x01	; 1
    3eee:	f1 f7       	brne	.-4      	; 0x3eec <movefind1+0x20c>
    3ef0:	9a 83       	std	Y+2, r25	; 0x02
    3ef2:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(500);
    if (find< 1200)
    3ef4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ef6:	98 a1       	ldd	r25, Y+32	; 0x20
    3ef8:	24 e0       	ldi	r18, 0x04	; 4
    3efa:	80 3b       	cpi	r24, 0xB0	; 176
    3efc:	92 07       	cpc	r25, r18
    3efe:	60 f4       	brcc	.+24     	; 0x3f18 <movefind1+0x238>
	{
          A_P=A_P-20;
    3f00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f02:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f04:	44 97       	sbiw	r24, 0x14	; 20
    3f06:	9e 8f       	std	Y+30, r25	; 0x1e
    3f08:	8d 8f       	std	Y+29, r24	; 0x1d
          OCR1B=A_P;
    3f0a:	e8 e4       	ldi	r30, 0x48	; 72
    3f0c:	f0 e0       	ldi	r31, 0x00	; 0
    3f0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f10:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f12:	91 83       	std	Z+1, r25	; 0x01
    3f14:	80 83       	st	Z, r24
    3f16:	0b c0       	rjmp	.+22     	; 0x3f2e <movefind1+0x24e>
		   _delay_ms(500);

	}


 	if (A_P<150)
    3f18:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f1a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f1c:	86 39       	cpi	r24, 0x96	; 150
    3f1e:	91 05       	cpc	r25, r1
    3f20:	30 f0       	brcs	.+12     	; 0x3f2e <movefind1+0x24e>

	  break;


 	}	
		A_P=A_P-5;
    3f22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f24:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f26:	05 97       	sbiw	r24, 0x05	; 5
    3f28:	9e 8f       	std	Y+30, r25	; 0x1e
    3f2a:	8d 8f       	std	Y+29, r24	; 0x1d
    3f2c:	5f cf       	rjmp	.-322    	; 0x3dec <movefind1+0x10c>
		  

}


}
    3f2e:	a0 96       	adiw	r28, 0x20	; 32
    3f30:	0f b6       	in	r0, 0x3f	; 63
    3f32:	f8 94       	cli
    3f34:	de bf       	out	0x3e, r29	; 62
    3f36:	0f be       	out	0x3f, r0	; 63
    3f38:	cd bf       	out	0x3d, r28	; 61
    3f3a:	cf 91       	pop	r28
    3f3c:	df 91       	pop	r29
    3f3e:	08 95       	ret

00003f40 <movefind2>:

void movefind2(void)
{
    3f40:	df 93       	push	r29
    3f42:	cf 93       	push	r28
    3f44:	cd b7       	in	r28, 0x3d	; 61
    3f46:	de b7       	in	r29, 0x3e	; 62
    3f48:	60 97       	sbiw	r28, 0x10	; 16
    3f4a:	0f b6       	in	r0, 0x3f	; 63
    3f4c:	f8 94       	cli
    3f4e:	de bf       	out	0x3e, r29	; 62
    3f50:	0f be       	out	0x3f, r0	; 63
    3f52:	cd bf       	out	0x3d, r28	; 61
unsigned int A_P;
while(1)

{ 

          OCR1B=A_P;
    3f54:	e8 e4       	ldi	r30, 0x48	; 72
    3f56:	f0 e0       	ldi	r31, 0x00	; 0
    3f58:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f5a:	98 89       	ldd	r25, Y+16	; 0x10
    3f5c:	91 83       	std	Z+1, r25	; 0x01
    3f5e:	80 83       	st	Z, r24

 	if (A_P>375)
    3f60:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f62:	98 89       	ldd	r25, Y+16	; 0x10
    3f64:	21 e0       	ldi	r18, 0x01	; 1
    3f66:	88 37       	cpi	r24, 0x78	; 120
    3f68:	92 07       	cpc	r25, r18
    3f6a:	08 f0       	brcs	.+2      	; 0x3f6e <movefind2+0x2e>
    3f6c:	78 c0       	rjmp	.+240    	; 0x405e <movefind2+0x11e>

	  break;


 	}	
		A_P=A_P+5;
    3f6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f70:	98 89       	ldd	r25, Y+16	; 0x10
    3f72:	05 96       	adiw	r24, 0x05	; 5
    3f74:	98 8b       	std	Y+16, r25	; 0x10
    3f76:	8f 87       	std	Y+15, r24	; 0x0f
    3f78:	80 e0       	ldi	r24, 0x00	; 0
    3f7a:	90 e0       	ldi	r25, 0x00	; 0
    3f7c:	aa ef       	ldi	r26, 0xFA	; 250
    3f7e:	b3 e4       	ldi	r27, 0x43	; 67
    3f80:	8b 87       	std	Y+11, r24	; 0x0b
    3f82:	9c 87       	std	Y+12, r25	; 0x0c
    3f84:	ad 87       	std	Y+13, r26	; 0x0d
    3f86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f88:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f90:	20 e0       	ldi	r18, 0x00	; 0
    3f92:	30 e0       	ldi	r19, 0x00	; 0
    3f94:	4a e7       	ldi	r20, 0x7A	; 122
    3f96:	55 e4       	ldi	r21, 0x45	; 69
    3f98:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    3f9c:	dc 01       	movw	r26, r24
    3f9e:	cb 01       	movw	r24, r22
    3fa0:	8f 83       	std	Y+7, r24	; 0x07
    3fa2:	98 87       	std	Y+8, r25	; 0x08
    3fa4:	a9 87       	std	Y+9, r26	; 0x09
    3fa6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3fa8:	6f 81       	ldd	r22, Y+7	; 0x07
    3faa:	78 85       	ldd	r23, Y+8	; 0x08
    3fac:	89 85       	ldd	r24, Y+9	; 0x09
    3fae:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fb0:	20 e0       	ldi	r18, 0x00	; 0
    3fb2:	30 e0       	ldi	r19, 0x00	; 0
    3fb4:	40 e8       	ldi	r20, 0x80	; 128
    3fb6:	5f e3       	ldi	r21, 0x3F	; 63
    3fb8:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    3fbc:	88 23       	and	r24, r24
    3fbe:	2c f4       	brge	.+10     	; 0x3fca <movefind2+0x8a>
		__ticks = 1;
    3fc0:	81 e0       	ldi	r24, 0x01	; 1
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	9e 83       	std	Y+6, r25	; 0x06
    3fc6:	8d 83       	std	Y+5, r24	; 0x05
    3fc8:	3f c0       	rjmp	.+126    	; 0x4048 <movefind2+0x108>
	else if (__tmp > 65535)
    3fca:	6f 81       	ldd	r22, Y+7	; 0x07
    3fcc:	78 85       	ldd	r23, Y+8	; 0x08
    3fce:	89 85       	ldd	r24, Y+9	; 0x09
    3fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fd2:	20 e0       	ldi	r18, 0x00	; 0
    3fd4:	3f ef       	ldi	r19, 0xFF	; 255
    3fd6:	4f e7       	ldi	r20, 0x7F	; 127
    3fd8:	57 e4       	ldi	r21, 0x47	; 71
    3fda:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    3fde:	18 16       	cp	r1, r24
    3fe0:	4c f5       	brge	.+82     	; 0x4034 <movefind2+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fe2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fe4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fe6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fe8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fea:	20 e0       	ldi	r18, 0x00	; 0
    3fec:	30 e0       	ldi	r19, 0x00	; 0
    3fee:	40 e2       	ldi	r20, 0x20	; 32
    3ff0:	51 e4       	ldi	r21, 0x41	; 65
    3ff2:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    3ff6:	dc 01       	movw	r26, r24
    3ff8:	cb 01       	movw	r24, r22
    3ffa:	bc 01       	movw	r22, r24
    3ffc:	cd 01       	movw	r24, r26
    3ffe:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    4002:	dc 01       	movw	r26, r24
    4004:	cb 01       	movw	r24, r22
    4006:	9e 83       	std	Y+6, r25	; 0x06
    4008:	8d 83       	std	Y+5, r24	; 0x05
    400a:	0f c0       	rjmp	.+30     	; 0x402a <movefind2+0xea>
    400c:	80 e9       	ldi	r24, 0x90	; 144
    400e:	91 e0       	ldi	r25, 0x01	; 1
    4010:	9c 83       	std	Y+4, r25	; 0x04
    4012:	8b 83       	std	Y+3, r24	; 0x03
    4014:	8b 81       	ldd	r24, Y+3	; 0x03
    4016:	9c 81       	ldd	r25, Y+4	; 0x04
    4018:	01 97       	sbiw	r24, 0x01	; 1
    401a:	f1 f7       	brne	.-4      	; 0x4018 <movefind2+0xd8>
    401c:	9c 83       	std	Y+4, r25	; 0x04
    401e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4020:	8d 81       	ldd	r24, Y+5	; 0x05
    4022:	9e 81       	ldd	r25, Y+6	; 0x06
    4024:	01 97       	sbiw	r24, 0x01	; 1
    4026:	9e 83       	std	Y+6, r25	; 0x06
    4028:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    402a:	8d 81       	ldd	r24, Y+5	; 0x05
    402c:	9e 81       	ldd	r25, Y+6	; 0x06
    402e:	00 97       	sbiw	r24, 0x00	; 0
    4030:	69 f7       	brne	.-38     	; 0x400c <movefind2+0xcc>
    4032:	90 cf       	rjmp	.-224    	; 0x3f54 <movefind2+0x14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4034:	6f 81       	ldd	r22, Y+7	; 0x07
    4036:	78 85       	ldd	r23, Y+8	; 0x08
    4038:	89 85       	ldd	r24, Y+9	; 0x09
    403a:	9a 85       	ldd	r25, Y+10	; 0x0a
    403c:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    4040:	dc 01       	movw	r26, r24
    4042:	cb 01       	movw	r24, r22
    4044:	9e 83       	std	Y+6, r25	; 0x06
    4046:	8d 83       	std	Y+5, r24	; 0x05
    4048:	8d 81       	ldd	r24, Y+5	; 0x05
    404a:	9e 81       	ldd	r25, Y+6	; 0x06
    404c:	9a 83       	std	Y+2, r25	; 0x02
    404e:	89 83       	std	Y+1, r24	; 0x01
    4050:	89 81       	ldd	r24, Y+1	; 0x01
    4052:	9a 81       	ldd	r25, Y+2	; 0x02
    4054:	01 97       	sbiw	r24, 0x01	; 1
    4056:	f1 f7       	brne	.-4      	; 0x4054 <movefind2+0x114>
    4058:	9a 83       	std	Y+2, r25	; 0x02
    405a:	89 83       	std	Y+1, r24	; 0x01
    405c:	7b cf       	rjmp	.-266    	; 0x3f54 <movefind2+0x14>
		  _delay_ms(500);

}


}
    405e:	60 96       	adiw	r28, 0x10	; 16
    4060:	0f b6       	in	r0, 0x3f	; 63
    4062:	f8 94       	cli
    4064:	de bf       	out	0x3e, r29	; 62
    4066:	0f be       	out	0x3f, r0	; 63
    4068:	cd bf       	out	0x3d, r28	; 61
    406a:	cf 91       	pop	r28
    406c:	df 91       	pop	r29
    406e:	08 95       	ret

00004070 <moveslow1>:


void moveslow1(void)
{
    4070:	df 93       	push	r29
    4072:	cf 93       	push	r28
    4074:	cd b7       	in	r28, 0x3d	; 61
    4076:	de b7       	in	r29, 0x3e	; 62
    4078:	60 97       	sbiw	r28, 0x10	; 16
    407a:	0f b6       	in	r0, 0x3f	; 63
    407c:	f8 94       	cli
    407e:	de bf       	out	0x3e, r29	; 62
    4080:	0f be       	out	0x3f, r0	; 63
    4082:	cd bf       	out	0x3d, r28	; 61

unsigned int u=385;
    4084:	81 e8       	ldi	r24, 0x81	; 129
    4086:	91 e0       	ldi	r25, 0x01	; 1
    4088:	98 8b       	std	Y+16, r25	; 0x10
    408a:	8f 87       	std	Y+15, r24	; 0x0f
while(1)

{ 

          OCR1B=u;
    408c:	e8 e4       	ldi	r30, 0x48	; 72
    408e:	f0 e0       	ldi	r31, 0x00	; 0
    4090:	8f 85       	ldd	r24, Y+15	; 0x0f
    4092:	98 89       	ldd	r25, Y+16	; 0x10
    4094:	91 83       	std	Z+1, r25	; 0x01
    4096:	80 83       	st	Z, r24
 	if (u<160)
    4098:	8f 85       	ldd	r24, Y+15	; 0x0f
    409a:	98 89       	ldd	r25, Y+16	; 0x10
    409c:	80 3a       	cpi	r24, 0xA0	; 160
    409e:	91 05       	cpc	r25, r1
    40a0:	08 f4       	brcc	.+2      	; 0x40a4 <moveslow1+0x34>
    40a2:	78 c0       	rjmp	.+240    	; 0x4194 <moveslow1+0x124>

	  break;


 	}	
		u=u-5;
    40a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    40a6:	98 89       	ldd	r25, Y+16	; 0x10
    40a8:	05 97       	sbiw	r24, 0x05	; 5
    40aa:	98 8b       	std	Y+16, r25	; 0x10
    40ac:	8f 87       	std	Y+15, r24	; 0x0f
    40ae:	80 e0       	ldi	r24, 0x00	; 0
    40b0:	90 e0       	ldi	r25, 0x00	; 0
    40b2:	aa ef       	ldi	r26, 0xFA	; 250
    40b4:	b3 e4       	ldi	r27, 0x43	; 67
    40b6:	8b 87       	std	Y+11, r24	; 0x0b
    40b8:	9c 87       	std	Y+12, r25	; 0x0c
    40ba:	ad 87       	std	Y+13, r26	; 0x0d
    40bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40be:	6b 85       	ldd	r22, Y+11	; 0x0b
    40c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    40c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    40c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    40c6:	20 e0       	ldi	r18, 0x00	; 0
    40c8:	30 e0       	ldi	r19, 0x00	; 0
    40ca:	4a e7       	ldi	r20, 0x7A	; 122
    40cc:	55 e4       	ldi	r21, 0x45	; 69
    40ce:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    40d2:	dc 01       	movw	r26, r24
    40d4:	cb 01       	movw	r24, r22
    40d6:	8f 83       	std	Y+7, r24	; 0x07
    40d8:	98 87       	std	Y+8, r25	; 0x08
    40da:	a9 87       	std	Y+9, r26	; 0x09
    40dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    40de:	6f 81       	ldd	r22, Y+7	; 0x07
    40e0:	78 85       	ldd	r23, Y+8	; 0x08
    40e2:	89 85       	ldd	r24, Y+9	; 0x09
    40e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    40e6:	20 e0       	ldi	r18, 0x00	; 0
    40e8:	30 e0       	ldi	r19, 0x00	; 0
    40ea:	40 e8       	ldi	r20, 0x80	; 128
    40ec:	5f e3       	ldi	r21, 0x3F	; 63
    40ee:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    40f2:	88 23       	and	r24, r24
    40f4:	2c f4       	brge	.+10     	; 0x4100 <moveslow1+0x90>
		__ticks = 1;
    40f6:	81 e0       	ldi	r24, 0x01	; 1
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	9e 83       	std	Y+6, r25	; 0x06
    40fc:	8d 83       	std	Y+5, r24	; 0x05
    40fe:	3f c0       	rjmp	.+126    	; 0x417e <moveslow1+0x10e>
	else if (__tmp > 65535)
    4100:	6f 81       	ldd	r22, Y+7	; 0x07
    4102:	78 85       	ldd	r23, Y+8	; 0x08
    4104:	89 85       	ldd	r24, Y+9	; 0x09
    4106:	9a 85       	ldd	r25, Y+10	; 0x0a
    4108:	20 e0       	ldi	r18, 0x00	; 0
    410a:	3f ef       	ldi	r19, 0xFF	; 255
    410c:	4f e7       	ldi	r20, 0x7F	; 127
    410e:	57 e4       	ldi	r21, 0x47	; 71
    4110:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    4114:	18 16       	cp	r1, r24
    4116:	4c f5       	brge	.+82     	; 0x416a <moveslow1+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4118:	6b 85       	ldd	r22, Y+11	; 0x0b
    411a:	7c 85       	ldd	r23, Y+12	; 0x0c
    411c:	8d 85       	ldd	r24, Y+13	; 0x0d
    411e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4120:	20 e0       	ldi	r18, 0x00	; 0
    4122:	30 e0       	ldi	r19, 0x00	; 0
    4124:	40 e2       	ldi	r20, 0x20	; 32
    4126:	51 e4       	ldi	r21, 0x41	; 65
    4128:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    412c:	dc 01       	movw	r26, r24
    412e:	cb 01       	movw	r24, r22
    4130:	bc 01       	movw	r22, r24
    4132:	cd 01       	movw	r24, r26
    4134:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    4138:	dc 01       	movw	r26, r24
    413a:	cb 01       	movw	r24, r22
    413c:	9e 83       	std	Y+6, r25	; 0x06
    413e:	8d 83       	std	Y+5, r24	; 0x05
    4140:	0f c0       	rjmp	.+30     	; 0x4160 <moveslow1+0xf0>
    4142:	80 e9       	ldi	r24, 0x90	; 144
    4144:	91 e0       	ldi	r25, 0x01	; 1
    4146:	9c 83       	std	Y+4, r25	; 0x04
    4148:	8b 83       	std	Y+3, r24	; 0x03
    414a:	8b 81       	ldd	r24, Y+3	; 0x03
    414c:	9c 81       	ldd	r25, Y+4	; 0x04
    414e:	01 97       	sbiw	r24, 0x01	; 1
    4150:	f1 f7       	brne	.-4      	; 0x414e <moveslow1+0xde>
    4152:	9c 83       	std	Y+4, r25	; 0x04
    4154:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4156:	8d 81       	ldd	r24, Y+5	; 0x05
    4158:	9e 81       	ldd	r25, Y+6	; 0x06
    415a:	01 97       	sbiw	r24, 0x01	; 1
    415c:	9e 83       	std	Y+6, r25	; 0x06
    415e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4160:	8d 81       	ldd	r24, Y+5	; 0x05
    4162:	9e 81       	ldd	r25, Y+6	; 0x06
    4164:	00 97       	sbiw	r24, 0x00	; 0
    4166:	69 f7       	brne	.-38     	; 0x4142 <moveslow1+0xd2>
    4168:	91 cf       	rjmp	.-222    	; 0x408c <moveslow1+0x1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    416a:	6f 81       	ldd	r22, Y+7	; 0x07
    416c:	78 85       	ldd	r23, Y+8	; 0x08
    416e:	89 85       	ldd	r24, Y+9	; 0x09
    4170:	9a 85       	ldd	r25, Y+10	; 0x0a
    4172:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    4176:	dc 01       	movw	r26, r24
    4178:	cb 01       	movw	r24, r22
    417a:	9e 83       	std	Y+6, r25	; 0x06
    417c:	8d 83       	std	Y+5, r24	; 0x05
    417e:	8d 81       	ldd	r24, Y+5	; 0x05
    4180:	9e 81       	ldd	r25, Y+6	; 0x06
    4182:	9a 83       	std	Y+2, r25	; 0x02
    4184:	89 83       	std	Y+1, r24	; 0x01
    4186:	89 81       	ldd	r24, Y+1	; 0x01
    4188:	9a 81       	ldd	r25, Y+2	; 0x02
    418a:	01 97       	sbiw	r24, 0x01	; 1
    418c:	f1 f7       	brne	.-4      	; 0x418a <moveslow1+0x11a>
    418e:	9a 83       	std	Y+2, r25	; 0x02
    4190:	89 83       	std	Y+1, r24	; 0x01
    4192:	7c cf       	rjmp	.-264    	; 0x408c <moveslow1+0x1c>
		  _delay_ms(500);

}

}
    4194:	60 96       	adiw	r28, 0x10	; 16
    4196:	0f b6       	in	r0, 0x3f	; 63
    4198:	f8 94       	cli
    419a:	de bf       	out	0x3e, r29	; 62
    419c:	0f be       	out	0x3f, r0	; 63
    419e:	cd bf       	out	0x3d, r28	; 61
    41a0:	cf 91       	pop	r28
    41a2:	df 91       	pop	r29
    41a4:	08 95       	ret

000041a6 <moveslow2>:

void moveslow2(void)
{
    41a6:	df 93       	push	r29
    41a8:	cf 93       	push	r28
    41aa:	cd b7       	in	r28, 0x3d	; 61
    41ac:	de b7       	in	r29, 0x3e	; 62
    41ae:	60 97       	sbiw	r28, 0x10	; 16
    41b0:	0f b6       	in	r0, 0x3f	; 63
    41b2:	f8 94       	cli
    41b4:	de bf       	out	0x3e, r29	; 62
    41b6:	0f be       	out	0x3f, r0	; 63
    41b8:	cd bf       	out	0x3d, r28	; 61

unsigned int u=160;
    41ba:	80 ea       	ldi	r24, 0xA0	; 160
    41bc:	90 e0       	ldi	r25, 0x00	; 0
    41be:	98 8b       	std	Y+16, r25	; 0x10
    41c0:	8f 87       	std	Y+15, r24	; 0x0f
while(1)

{ 

          OCR1B=u;
    41c2:	e8 e4       	ldi	r30, 0x48	; 72
    41c4:	f0 e0       	ldi	r31, 0x00	; 0
    41c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    41c8:	98 89       	ldd	r25, Y+16	; 0x10
    41ca:	91 83       	std	Z+1, r25	; 0x01
    41cc:	80 83       	st	Z, r24
 	if (u>385)
    41ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    41d0:	98 89       	ldd	r25, Y+16	; 0x10
    41d2:	21 e0       	ldi	r18, 0x01	; 1
    41d4:	82 38       	cpi	r24, 0x82	; 130
    41d6:	92 07       	cpc	r25, r18
    41d8:	08 f0       	brcs	.+2      	; 0x41dc <moveslow2+0x36>
    41da:	78 c0       	rjmp	.+240    	; 0x42cc <moveslow2+0x126>

	  break;


 	}	
		u=u+15;
    41dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    41de:	98 89       	ldd	r25, Y+16	; 0x10
    41e0:	0f 96       	adiw	r24, 0x0f	; 15
    41e2:	98 8b       	std	Y+16, r25	; 0x10
    41e4:	8f 87       	std	Y+15, r24	; 0x0f
    41e6:	80 e0       	ldi	r24, 0x00	; 0
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	aa ef       	ldi	r26, 0xFA	; 250
    41ec:	b3 e4       	ldi	r27, 0x43	; 67
    41ee:	8b 87       	std	Y+11, r24	; 0x0b
    41f0:	9c 87       	std	Y+12, r25	; 0x0c
    41f2:	ad 87       	std	Y+13, r26	; 0x0d
    41f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    41f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    41fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    41fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    41fe:	20 e0       	ldi	r18, 0x00	; 0
    4200:	30 e0       	ldi	r19, 0x00	; 0
    4202:	4a e7       	ldi	r20, 0x7A	; 122
    4204:	55 e4       	ldi	r21, 0x45	; 69
    4206:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    420a:	dc 01       	movw	r26, r24
    420c:	cb 01       	movw	r24, r22
    420e:	8f 83       	std	Y+7, r24	; 0x07
    4210:	98 87       	std	Y+8, r25	; 0x08
    4212:	a9 87       	std	Y+9, r26	; 0x09
    4214:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4216:	6f 81       	ldd	r22, Y+7	; 0x07
    4218:	78 85       	ldd	r23, Y+8	; 0x08
    421a:	89 85       	ldd	r24, Y+9	; 0x09
    421c:	9a 85       	ldd	r25, Y+10	; 0x0a
    421e:	20 e0       	ldi	r18, 0x00	; 0
    4220:	30 e0       	ldi	r19, 0x00	; 0
    4222:	40 e8       	ldi	r20, 0x80	; 128
    4224:	5f e3       	ldi	r21, 0x3F	; 63
    4226:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    422a:	88 23       	and	r24, r24
    422c:	2c f4       	brge	.+10     	; 0x4238 <moveslow2+0x92>
		__ticks = 1;
    422e:	81 e0       	ldi	r24, 0x01	; 1
    4230:	90 e0       	ldi	r25, 0x00	; 0
    4232:	9e 83       	std	Y+6, r25	; 0x06
    4234:	8d 83       	std	Y+5, r24	; 0x05
    4236:	3f c0       	rjmp	.+126    	; 0x42b6 <moveslow2+0x110>
	else if (__tmp > 65535)
    4238:	6f 81       	ldd	r22, Y+7	; 0x07
    423a:	78 85       	ldd	r23, Y+8	; 0x08
    423c:	89 85       	ldd	r24, Y+9	; 0x09
    423e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4240:	20 e0       	ldi	r18, 0x00	; 0
    4242:	3f ef       	ldi	r19, 0xFF	; 255
    4244:	4f e7       	ldi	r20, 0x7F	; 127
    4246:	57 e4       	ldi	r21, 0x47	; 71
    4248:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    424c:	18 16       	cp	r1, r24
    424e:	4c f5       	brge	.+82     	; 0x42a2 <moveslow2+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4250:	6b 85       	ldd	r22, Y+11	; 0x0b
    4252:	7c 85       	ldd	r23, Y+12	; 0x0c
    4254:	8d 85       	ldd	r24, Y+13	; 0x0d
    4256:	9e 85       	ldd	r25, Y+14	; 0x0e
    4258:	20 e0       	ldi	r18, 0x00	; 0
    425a:	30 e0       	ldi	r19, 0x00	; 0
    425c:	40 e2       	ldi	r20, 0x20	; 32
    425e:	51 e4       	ldi	r21, 0x41	; 65
    4260:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    4264:	dc 01       	movw	r26, r24
    4266:	cb 01       	movw	r24, r22
    4268:	bc 01       	movw	r22, r24
    426a:	cd 01       	movw	r24, r26
    426c:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    4270:	dc 01       	movw	r26, r24
    4272:	cb 01       	movw	r24, r22
    4274:	9e 83       	std	Y+6, r25	; 0x06
    4276:	8d 83       	std	Y+5, r24	; 0x05
    4278:	0f c0       	rjmp	.+30     	; 0x4298 <moveslow2+0xf2>
    427a:	80 e9       	ldi	r24, 0x90	; 144
    427c:	91 e0       	ldi	r25, 0x01	; 1
    427e:	9c 83       	std	Y+4, r25	; 0x04
    4280:	8b 83       	std	Y+3, r24	; 0x03
    4282:	8b 81       	ldd	r24, Y+3	; 0x03
    4284:	9c 81       	ldd	r25, Y+4	; 0x04
    4286:	01 97       	sbiw	r24, 0x01	; 1
    4288:	f1 f7       	brne	.-4      	; 0x4286 <moveslow2+0xe0>
    428a:	9c 83       	std	Y+4, r25	; 0x04
    428c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    428e:	8d 81       	ldd	r24, Y+5	; 0x05
    4290:	9e 81       	ldd	r25, Y+6	; 0x06
    4292:	01 97       	sbiw	r24, 0x01	; 1
    4294:	9e 83       	std	Y+6, r25	; 0x06
    4296:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4298:	8d 81       	ldd	r24, Y+5	; 0x05
    429a:	9e 81       	ldd	r25, Y+6	; 0x06
    429c:	00 97       	sbiw	r24, 0x00	; 0
    429e:	69 f7       	brne	.-38     	; 0x427a <moveslow2+0xd4>
    42a0:	90 cf       	rjmp	.-224    	; 0x41c2 <moveslow2+0x1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42a2:	6f 81       	ldd	r22, Y+7	; 0x07
    42a4:	78 85       	ldd	r23, Y+8	; 0x08
    42a6:	89 85       	ldd	r24, Y+9	; 0x09
    42a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    42aa:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    42ae:	dc 01       	movw	r26, r24
    42b0:	cb 01       	movw	r24, r22
    42b2:	9e 83       	std	Y+6, r25	; 0x06
    42b4:	8d 83       	std	Y+5, r24	; 0x05
    42b6:	8d 81       	ldd	r24, Y+5	; 0x05
    42b8:	9e 81       	ldd	r25, Y+6	; 0x06
    42ba:	9a 83       	std	Y+2, r25	; 0x02
    42bc:	89 83       	std	Y+1, r24	; 0x01
    42be:	89 81       	ldd	r24, Y+1	; 0x01
    42c0:	9a 81       	ldd	r25, Y+2	; 0x02
    42c2:	01 97       	sbiw	r24, 0x01	; 1
    42c4:	f1 f7       	brne	.-4      	; 0x42c2 <moveslow2+0x11c>
    42c6:	9a 83       	std	Y+2, r25	; 0x02
    42c8:	89 83       	std	Y+1, r24	; 0x01
    42ca:	7b cf       	rjmp	.-266    	; 0x41c2 <moveslow2+0x1c>
		  _delay_ms(500);

}

}
    42cc:	60 96       	adiw	r28, 0x10	; 16
    42ce:	0f b6       	in	r0, 0x3f	; 63
    42d0:	f8 94       	cli
    42d2:	de bf       	out	0x3e, r29	; 62
    42d4:	0f be       	out	0x3f, r0	; 63
    42d6:	cd bf       	out	0x3d, r28	; 61
    42d8:	cf 91       	pop	r28
    42da:	df 91       	pop	r29
    42dc:	08 95       	ret

000042de <sonic1>:
#include <util/delay.h>
#include <avr/interrupt.h>
#define SOUND_VELOCITY 340UL


unsigned short sonic1(){
    42de:	df 93       	push	r29
    42e0:	cf 93       	push	r28
    42e2:	cd b7       	in	r28, 0x3d	; 61
    42e4:	de b7       	in	r29, 0x3e	; 62
    42e6:	e6 97       	sbiw	r28, 0x36	; 54
    42e8:	0f b6       	in	r0, 0x3f	; 63
    42ea:	f8 94       	cli
    42ec:	de bf       	out	0x3e, r29	; 62
    42ee:	0f be       	out	0x3f, r0	; 63
    42f0:	cd bf       	out	0x3d, r28	; 61
unsigned int distance1;
	int TRIG = 6;
    42f2:	86 e0       	ldi	r24, 0x06	; 6
    42f4:	90 e0       	ldi	r25, 0x00	; 0
    42f6:	9c ab       	std	Y+52, r25	; 0x34
    42f8:	8b ab       	std	Y+51, r24	; 0x33
 	int ECHO = 7;
    42fa:	87 e0       	ldi	r24, 0x07	; 7
    42fc:	90 e0       	ldi	r25, 0x00	; 0
    42fe:	9a ab       	std	Y+50, r25	; 0x32
    4300:	89 ab       	std	Y+49, r24	; 0x31
//	int SOUND_VELOCITY = 3400;
	DDRE = ((DDRE | (1<<TRIG)) & ~(1<<ECHO));
    4302:	a2 e2       	ldi	r26, 0x22	; 34
    4304:	b0 e0       	ldi	r27, 0x00	; 0
    4306:	e2 e2       	ldi	r30, 0x22	; 34
    4308:	f0 e0       	ldi	r31, 0x00	; 0
    430a:	80 81       	ld	r24, Z
    430c:	28 2f       	mov	r18, r24
    430e:	81 e0       	ldi	r24, 0x01	; 1
    4310:	90 e0       	ldi	r25, 0x00	; 0
    4312:	0b a8       	ldd	r0, Y+51	; 0x33
    4314:	02 c0       	rjmp	.+4      	; 0x431a <sonic1+0x3c>
    4316:	88 0f       	add	r24, r24
    4318:	99 1f       	adc	r25, r25
    431a:	0a 94       	dec	r0
    431c:	e2 f7       	brpl	.-8      	; 0x4316 <sonic1+0x38>
    431e:	28 2b       	or	r18, r24
    4320:	81 e0       	ldi	r24, 0x01	; 1
    4322:	90 e0       	ldi	r25, 0x00	; 0
    4324:	09 a8       	ldd	r0, Y+49	; 0x31
    4326:	02 c0       	rjmp	.+4      	; 0x432c <sonic1+0x4e>
    4328:	88 0f       	add	r24, r24
    432a:	99 1f       	adc	r25, r25
    432c:	0a 94       	dec	r0
    432e:	e2 f7       	brpl	.-8      	; 0x4328 <sonic1+0x4a>
    4330:	80 95       	com	r24
    4332:	82 23       	and	r24, r18
    4334:	8c 93       	st	X, r24
	

		
		TCCR3B = 0x03;
    4336:	ea e8       	ldi	r30, 0x8A	; 138
    4338:	f0 e0       	ldi	r31, 0x00	; 0
    433a:	83 e0       	ldi	r24, 0x03	; 3
    433c:	80 83       	st	Z, r24
		PORTE &= ~(1<<TRIG);
    433e:	a3 e2       	ldi	r26, 0x23	; 35
    4340:	b0 e0       	ldi	r27, 0x00	; 0
    4342:	e3 e2       	ldi	r30, 0x23	; 35
    4344:	f0 e0       	ldi	r31, 0x00	; 0
    4346:	80 81       	ld	r24, Z
    4348:	28 2f       	mov	r18, r24
    434a:	81 e0       	ldi	r24, 0x01	; 1
    434c:	90 e0       	ldi	r25, 0x00	; 0
    434e:	0b a8       	ldd	r0, Y+51	; 0x33
    4350:	02 c0       	rjmp	.+4      	; 0x4356 <sonic1+0x78>
    4352:	88 0f       	add	r24, r24
    4354:	99 1f       	adc	r25, r25
    4356:	0a 94       	dec	r0
    4358:	e2 f7       	brpl	.-8      	; 0x4352 <sonic1+0x74>
    435a:	80 95       	com	r24
    435c:	82 23       	and	r24, r18
    435e:	8c 93       	st	X, r24
    4360:	80 e0       	ldi	r24, 0x00	; 0
    4362:	90 e0       	ldi	r25, 0x00	; 0
    4364:	a0 e2       	ldi	r26, 0x20	; 32
    4366:	b1 e4       	ldi	r27, 0x41	; 65
    4368:	8d a7       	std	Y+45, r24	; 0x2d
    436a:	9e a7       	std	Y+46, r25	; 0x2e
    436c:	af a7       	std	Y+47, r26	; 0x2f
    436e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4370:	6d a5       	ldd	r22, Y+45	; 0x2d
    4372:	7e a5       	ldd	r23, Y+46	; 0x2e
    4374:	8f a5       	ldd	r24, Y+47	; 0x2f
    4376:	98 a9       	ldd	r25, Y+48	; 0x30
    4378:	2b ea       	ldi	r18, 0xAB	; 171
    437a:	3a ea       	ldi	r19, 0xAA	; 170
    437c:	4a ea       	ldi	r20, 0xAA	; 170
    437e:	50 e4       	ldi	r21, 0x40	; 64
    4380:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    4384:	dc 01       	movw	r26, r24
    4386:	cb 01       	movw	r24, r22
    4388:	89 a7       	std	Y+41, r24	; 0x29
    438a:	9a a7       	std	Y+42, r25	; 0x2a
    438c:	ab a7       	std	Y+43, r26	; 0x2b
    438e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    4390:	69 a5       	ldd	r22, Y+41	; 0x29
    4392:	7a a5       	ldd	r23, Y+42	; 0x2a
    4394:	8b a5       	ldd	r24, Y+43	; 0x2b
    4396:	9c a5       	ldd	r25, Y+44	; 0x2c
    4398:	20 e0       	ldi	r18, 0x00	; 0
    439a:	30 e0       	ldi	r19, 0x00	; 0
    439c:	40 e8       	ldi	r20, 0x80	; 128
    439e:	5f e3       	ldi	r21, 0x3F	; 63
    43a0:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    43a4:	88 23       	and	r24, r24
    43a6:	1c f4       	brge	.+6      	; 0x43ae <sonic1+0xd0>
		__ticks = 1;
    43a8:	81 e0       	ldi	r24, 0x01	; 1
    43aa:	88 a7       	std	Y+40, r24	; 0x28
    43ac:	91 c0       	rjmp	.+290    	; 0x44d0 <sonic1+0x1f2>
	else if (__tmp > 255)
    43ae:	69 a5       	ldd	r22, Y+41	; 0x29
    43b0:	7a a5       	ldd	r23, Y+42	; 0x2a
    43b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    43b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    43b6:	20 e0       	ldi	r18, 0x00	; 0
    43b8:	30 e0       	ldi	r19, 0x00	; 0
    43ba:	4f e7       	ldi	r20, 0x7F	; 127
    43bc:	53 e4       	ldi	r21, 0x43	; 67
    43be:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    43c2:	18 16       	cp	r1, r24
    43c4:	0c f0       	brlt	.+2      	; 0x43c8 <sonic1+0xea>
    43c6:	7b c0       	rjmp	.+246    	; 0x44be <sonic1+0x1e0>
	{
		_delay_ms(__us / 1000.0);
    43c8:	6d a5       	ldd	r22, Y+45	; 0x2d
    43ca:	7e a5       	ldd	r23, Y+46	; 0x2e
    43cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    43ce:	98 a9       	ldd	r25, Y+48	; 0x30
    43d0:	20 e0       	ldi	r18, 0x00	; 0
    43d2:	30 e0       	ldi	r19, 0x00	; 0
    43d4:	4a e7       	ldi	r20, 0x7A	; 122
    43d6:	54 e4       	ldi	r21, 0x44	; 68
    43d8:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <__divsf3>
    43dc:	dc 01       	movw	r26, r24
    43de:	cb 01       	movw	r24, r22
    43e0:	8c a3       	std	Y+36, r24	; 0x24
    43e2:	9d a3       	std	Y+37, r25	; 0x25
    43e4:	ae a3       	std	Y+38, r26	; 0x26
    43e6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43e8:	6c a1       	ldd	r22, Y+36	; 0x24
    43ea:	7d a1       	ldd	r23, Y+37	; 0x25
    43ec:	8e a1       	ldd	r24, Y+38	; 0x26
    43ee:	9f a1       	ldd	r25, Y+39	; 0x27
    43f0:	20 e0       	ldi	r18, 0x00	; 0
    43f2:	30 e0       	ldi	r19, 0x00	; 0
    43f4:	4a e7       	ldi	r20, 0x7A	; 122
    43f6:	55 e4       	ldi	r21, 0x45	; 69
    43f8:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    43fc:	dc 01       	movw	r26, r24
    43fe:	cb 01       	movw	r24, r22
    4400:	88 a3       	std	Y+32, r24	; 0x20
    4402:	99 a3       	std	Y+33, r25	; 0x21
    4404:	aa a3       	std	Y+34, r26	; 0x22
    4406:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    4408:	68 a1       	ldd	r22, Y+32	; 0x20
    440a:	79 a1       	ldd	r23, Y+33	; 0x21
    440c:	8a a1       	ldd	r24, Y+34	; 0x22
    440e:	9b a1       	ldd	r25, Y+35	; 0x23
    4410:	20 e0       	ldi	r18, 0x00	; 0
    4412:	30 e0       	ldi	r19, 0x00	; 0
    4414:	40 e8       	ldi	r20, 0x80	; 128
    4416:	5f e3       	ldi	r21, 0x3F	; 63
    4418:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    441c:	88 23       	and	r24, r24
    441e:	2c f4       	brge	.+10     	; 0x442a <sonic1+0x14c>
		__ticks = 1;
    4420:	81 e0       	ldi	r24, 0x01	; 1
    4422:	90 e0       	ldi	r25, 0x00	; 0
    4424:	9f 8f       	std	Y+31, r25	; 0x1f
    4426:	8e 8f       	std	Y+30, r24	; 0x1e
    4428:	3f c0       	rjmp	.+126    	; 0x44a8 <sonic1+0x1ca>
	else if (__tmp > 65535)
    442a:	68 a1       	ldd	r22, Y+32	; 0x20
    442c:	79 a1       	ldd	r23, Y+33	; 0x21
    442e:	8a a1       	ldd	r24, Y+34	; 0x22
    4430:	9b a1       	ldd	r25, Y+35	; 0x23
    4432:	20 e0       	ldi	r18, 0x00	; 0
    4434:	3f ef       	ldi	r19, 0xFF	; 255
    4436:	4f e7       	ldi	r20, 0x7F	; 127
    4438:	57 e4       	ldi	r21, 0x47	; 71
    443a:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    443e:	18 16       	cp	r1, r24
    4440:	4c f5       	brge	.+82     	; 0x4494 <sonic1+0x1b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4442:	6c a1       	ldd	r22, Y+36	; 0x24
    4444:	7d a1       	ldd	r23, Y+37	; 0x25
    4446:	8e a1       	ldd	r24, Y+38	; 0x26
    4448:	9f a1       	ldd	r25, Y+39	; 0x27
    444a:	20 e0       	ldi	r18, 0x00	; 0
    444c:	30 e0       	ldi	r19, 0x00	; 0
    444e:	40 e2       	ldi	r20, 0x20	; 32
    4450:	51 e4       	ldi	r21, 0x41	; 65
    4452:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    4456:	dc 01       	movw	r26, r24
    4458:	cb 01       	movw	r24, r22
    445a:	bc 01       	movw	r22, r24
    445c:	cd 01       	movw	r24, r26
    445e:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    4462:	dc 01       	movw	r26, r24
    4464:	cb 01       	movw	r24, r22
    4466:	9f 8f       	std	Y+31, r25	; 0x1f
    4468:	8e 8f       	std	Y+30, r24	; 0x1e
    446a:	0f c0       	rjmp	.+30     	; 0x448a <sonic1+0x1ac>
    446c:	80 e9       	ldi	r24, 0x90	; 144
    446e:	91 e0       	ldi	r25, 0x01	; 1
    4470:	9d 8f       	std	Y+29, r25	; 0x1d
    4472:	8c 8f       	std	Y+28, r24	; 0x1c
    4474:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4476:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4478:	01 97       	sbiw	r24, 0x01	; 1
    447a:	f1 f7       	brne	.-4      	; 0x4478 <sonic1+0x19a>
    447c:	9d 8f       	std	Y+29, r25	; 0x1d
    447e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4480:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4482:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4484:	01 97       	sbiw	r24, 0x01	; 1
    4486:	9f 8f       	std	Y+31, r25	; 0x1f
    4488:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    448a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    448c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    448e:	00 97       	sbiw	r24, 0x00	; 0
    4490:	69 f7       	brne	.-38     	; 0x446c <sonic1+0x18e>
    4492:	24 c0       	rjmp	.+72     	; 0x44dc <sonic1+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4494:	68 a1       	ldd	r22, Y+32	; 0x20
    4496:	79 a1       	ldd	r23, Y+33	; 0x21
    4498:	8a a1       	ldd	r24, Y+34	; 0x22
    449a:	9b a1       	ldd	r25, Y+35	; 0x23
    449c:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    44a0:	dc 01       	movw	r26, r24
    44a2:	cb 01       	movw	r24, r22
    44a4:	9f 8f       	std	Y+31, r25	; 0x1f
    44a6:	8e 8f       	std	Y+30, r24	; 0x1e
    44a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    44aa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    44ac:	9b 8f       	std	Y+27, r25	; 0x1b
    44ae:	8a 8f       	std	Y+26, r24	; 0x1a
    44b0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    44b2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    44b4:	01 97       	sbiw	r24, 0x01	; 1
    44b6:	f1 f7       	brne	.-4      	; 0x44b4 <sonic1+0x1d6>
    44b8:	9b 8f       	std	Y+27, r25	; 0x1b
    44ba:	8a 8f       	std	Y+26, r24	; 0x1a
    44bc:	0f c0       	rjmp	.+30     	; 0x44dc <sonic1+0x1fe>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    44be:	69 a5       	ldd	r22, Y+41	; 0x29
    44c0:	7a a5       	ldd	r23, Y+42	; 0x2a
    44c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    44c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    44c6:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    44ca:	dc 01       	movw	r26, r24
    44cc:	cb 01       	movw	r24, r22
    44ce:	88 a7       	std	Y+40, r24	; 0x28
    44d0:	88 a5       	ldd	r24, Y+40	; 0x28
    44d2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    44d4:	89 8d       	ldd	r24, Y+25	; 0x19
    44d6:	8a 95       	dec	r24
    44d8:	f1 f7       	brne	.-4      	; 0x44d6 <sonic1+0x1f8>
    44da:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(10);
		PORTE |= (1<<TRIG);
    44dc:	a3 e2       	ldi	r26, 0x23	; 35
    44de:	b0 e0       	ldi	r27, 0x00	; 0
    44e0:	e3 e2       	ldi	r30, 0x23	; 35
    44e2:	f0 e0       	ldi	r31, 0x00	; 0
    44e4:	80 81       	ld	r24, Z
    44e6:	28 2f       	mov	r18, r24
    44e8:	81 e0       	ldi	r24, 0x01	; 1
    44ea:	90 e0       	ldi	r25, 0x00	; 0
    44ec:	0b a8       	ldd	r0, Y+51	; 0x33
    44ee:	02 c0       	rjmp	.+4      	; 0x44f4 <sonic1+0x216>
    44f0:	88 0f       	add	r24, r24
    44f2:	99 1f       	adc	r25, r25
    44f4:	0a 94       	dec	r0
    44f6:	e2 f7       	brpl	.-8      	; 0x44f0 <sonic1+0x212>
    44f8:	82 2b       	or	r24, r18
    44fa:	8c 93       	st	X, r24
    44fc:	80 e0       	ldi	r24, 0x00	; 0
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	a0 e2       	ldi	r26, 0x20	; 32
    4502:	b1 e4       	ldi	r27, 0x41	; 65
    4504:	8d 8b       	std	Y+21, r24	; 0x15
    4506:	9e 8b       	std	Y+22, r25	; 0x16
    4508:	af 8b       	std	Y+23, r26	; 0x17
    450a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    450c:	6d 89       	ldd	r22, Y+21	; 0x15
    450e:	7e 89       	ldd	r23, Y+22	; 0x16
    4510:	8f 89       	ldd	r24, Y+23	; 0x17
    4512:	98 8d       	ldd	r25, Y+24	; 0x18
    4514:	2b ea       	ldi	r18, 0xAB	; 171
    4516:	3a ea       	ldi	r19, 0xAA	; 170
    4518:	4a ea       	ldi	r20, 0xAA	; 170
    451a:	50 e4       	ldi	r21, 0x40	; 64
    451c:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    4520:	dc 01       	movw	r26, r24
    4522:	cb 01       	movw	r24, r22
    4524:	89 8b       	std	Y+17, r24	; 0x11
    4526:	9a 8b       	std	Y+18, r25	; 0x12
    4528:	ab 8b       	std	Y+19, r26	; 0x13
    452a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    452c:	69 89       	ldd	r22, Y+17	; 0x11
    452e:	7a 89       	ldd	r23, Y+18	; 0x12
    4530:	8b 89       	ldd	r24, Y+19	; 0x13
    4532:	9c 89       	ldd	r25, Y+20	; 0x14
    4534:	20 e0       	ldi	r18, 0x00	; 0
    4536:	30 e0       	ldi	r19, 0x00	; 0
    4538:	40 e8       	ldi	r20, 0x80	; 128
    453a:	5f e3       	ldi	r21, 0x3F	; 63
    453c:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    4540:	88 23       	and	r24, r24
    4542:	1c f4       	brge	.+6      	; 0x454a <sonic1+0x26c>
		__ticks = 1;
    4544:	81 e0       	ldi	r24, 0x01	; 1
    4546:	88 8b       	std	Y+16, r24	; 0x10
    4548:	91 c0       	rjmp	.+290    	; 0x466c <sonic1+0x38e>
	else if (__tmp > 255)
    454a:	69 89       	ldd	r22, Y+17	; 0x11
    454c:	7a 89       	ldd	r23, Y+18	; 0x12
    454e:	8b 89       	ldd	r24, Y+19	; 0x13
    4550:	9c 89       	ldd	r25, Y+20	; 0x14
    4552:	20 e0       	ldi	r18, 0x00	; 0
    4554:	30 e0       	ldi	r19, 0x00	; 0
    4556:	4f e7       	ldi	r20, 0x7F	; 127
    4558:	53 e4       	ldi	r21, 0x43	; 67
    455a:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    455e:	18 16       	cp	r1, r24
    4560:	0c f0       	brlt	.+2      	; 0x4564 <sonic1+0x286>
    4562:	7b c0       	rjmp	.+246    	; 0x465a <sonic1+0x37c>
	{
		_delay_ms(__us / 1000.0);
    4564:	6d 89       	ldd	r22, Y+21	; 0x15
    4566:	7e 89       	ldd	r23, Y+22	; 0x16
    4568:	8f 89       	ldd	r24, Y+23	; 0x17
    456a:	98 8d       	ldd	r25, Y+24	; 0x18
    456c:	20 e0       	ldi	r18, 0x00	; 0
    456e:	30 e0       	ldi	r19, 0x00	; 0
    4570:	4a e7       	ldi	r20, 0x7A	; 122
    4572:	54 e4       	ldi	r21, 0x44	; 68
    4574:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <__divsf3>
    4578:	dc 01       	movw	r26, r24
    457a:	cb 01       	movw	r24, r22
    457c:	8c 87       	std	Y+12, r24	; 0x0c
    457e:	9d 87       	std	Y+13, r25	; 0x0d
    4580:	ae 87       	std	Y+14, r26	; 0x0e
    4582:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4584:	6c 85       	ldd	r22, Y+12	; 0x0c
    4586:	7d 85       	ldd	r23, Y+13	; 0x0d
    4588:	8e 85       	ldd	r24, Y+14	; 0x0e
    458a:	9f 85       	ldd	r25, Y+15	; 0x0f
    458c:	20 e0       	ldi	r18, 0x00	; 0
    458e:	30 e0       	ldi	r19, 0x00	; 0
    4590:	4a e7       	ldi	r20, 0x7A	; 122
    4592:	55 e4       	ldi	r21, 0x45	; 69
    4594:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    4598:	dc 01       	movw	r26, r24
    459a:	cb 01       	movw	r24, r22
    459c:	88 87       	std	Y+8, r24	; 0x08
    459e:	99 87       	std	Y+9, r25	; 0x09
    45a0:	aa 87       	std	Y+10, r26	; 0x0a
    45a2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    45a4:	68 85       	ldd	r22, Y+8	; 0x08
    45a6:	79 85       	ldd	r23, Y+9	; 0x09
    45a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    45aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    45ac:	20 e0       	ldi	r18, 0x00	; 0
    45ae:	30 e0       	ldi	r19, 0x00	; 0
    45b0:	40 e8       	ldi	r20, 0x80	; 128
    45b2:	5f e3       	ldi	r21, 0x3F	; 63
    45b4:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    45b8:	88 23       	and	r24, r24
    45ba:	2c f4       	brge	.+10     	; 0x45c6 <sonic1+0x2e8>
		__ticks = 1;
    45bc:	81 e0       	ldi	r24, 0x01	; 1
    45be:	90 e0       	ldi	r25, 0x00	; 0
    45c0:	9f 83       	std	Y+7, r25	; 0x07
    45c2:	8e 83       	std	Y+6, r24	; 0x06
    45c4:	3f c0       	rjmp	.+126    	; 0x4644 <sonic1+0x366>
	else if (__tmp > 65535)
    45c6:	68 85       	ldd	r22, Y+8	; 0x08
    45c8:	79 85       	ldd	r23, Y+9	; 0x09
    45ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    45cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    45ce:	20 e0       	ldi	r18, 0x00	; 0
    45d0:	3f ef       	ldi	r19, 0xFF	; 255
    45d2:	4f e7       	ldi	r20, 0x7F	; 127
    45d4:	57 e4       	ldi	r21, 0x47	; 71
    45d6:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    45da:	18 16       	cp	r1, r24
    45dc:	4c f5       	brge	.+82     	; 0x4630 <sonic1+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45de:	6c 85       	ldd	r22, Y+12	; 0x0c
    45e0:	7d 85       	ldd	r23, Y+13	; 0x0d
    45e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    45e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    45e6:	20 e0       	ldi	r18, 0x00	; 0
    45e8:	30 e0       	ldi	r19, 0x00	; 0
    45ea:	40 e2       	ldi	r20, 0x20	; 32
    45ec:	51 e4       	ldi	r21, 0x41	; 65
    45ee:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    45f2:	dc 01       	movw	r26, r24
    45f4:	cb 01       	movw	r24, r22
    45f6:	bc 01       	movw	r22, r24
    45f8:	cd 01       	movw	r24, r26
    45fa:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    45fe:	dc 01       	movw	r26, r24
    4600:	cb 01       	movw	r24, r22
    4602:	9f 83       	std	Y+7, r25	; 0x07
    4604:	8e 83       	std	Y+6, r24	; 0x06
    4606:	0f c0       	rjmp	.+30     	; 0x4626 <sonic1+0x348>
    4608:	80 e9       	ldi	r24, 0x90	; 144
    460a:	91 e0       	ldi	r25, 0x01	; 1
    460c:	9d 83       	std	Y+5, r25	; 0x05
    460e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4610:	8c 81       	ldd	r24, Y+4	; 0x04
    4612:	9d 81       	ldd	r25, Y+5	; 0x05
    4614:	01 97       	sbiw	r24, 0x01	; 1
    4616:	f1 f7       	brne	.-4      	; 0x4614 <sonic1+0x336>
    4618:	9d 83       	std	Y+5, r25	; 0x05
    461a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    461c:	8e 81       	ldd	r24, Y+6	; 0x06
    461e:	9f 81       	ldd	r25, Y+7	; 0x07
    4620:	01 97       	sbiw	r24, 0x01	; 1
    4622:	9f 83       	std	Y+7, r25	; 0x07
    4624:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4626:	8e 81       	ldd	r24, Y+6	; 0x06
    4628:	9f 81       	ldd	r25, Y+7	; 0x07
    462a:	00 97       	sbiw	r24, 0x00	; 0
    462c:	69 f7       	brne	.-38     	; 0x4608 <sonic1+0x32a>
    462e:	24 c0       	rjmp	.+72     	; 0x4678 <sonic1+0x39a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4630:	68 85       	ldd	r22, Y+8	; 0x08
    4632:	79 85       	ldd	r23, Y+9	; 0x09
    4634:	8a 85       	ldd	r24, Y+10	; 0x0a
    4636:	9b 85       	ldd	r25, Y+11	; 0x0b
    4638:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    463c:	dc 01       	movw	r26, r24
    463e:	cb 01       	movw	r24, r22
    4640:	9f 83       	std	Y+7, r25	; 0x07
    4642:	8e 83       	std	Y+6, r24	; 0x06
    4644:	8e 81       	ldd	r24, Y+6	; 0x06
    4646:	9f 81       	ldd	r25, Y+7	; 0x07
    4648:	9b 83       	std	Y+3, r25	; 0x03
    464a:	8a 83       	std	Y+2, r24	; 0x02
    464c:	8a 81       	ldd	r24, Y+2	; 0x02
    464e:	9b 81       	ldd	r25, Y+3	; 0x03
    4650:	01 97       	sbiw	r24, 0x01	; 1
    4652:	f1 f7       	brne	.-4      	; 0x4650 <sonic1+0x372>
    4654:	9b 83       	std	Y+3, r25	; 0x03
    4656:	8a 83       	std	Y+2, r24	; 0x02
    4658:	0f c0       	rjmp	.+30     	; 0x4678 <sonic1+0x39a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    465a:	69 89       	ldd	r22, Y+17	; 0x11
    465c:	7a 89       	ldd	r23, Y+18	; 0x12
    465e:	8b 89       	ldd	r24, Y+19	; 0x13
    4660:	9c 89       	ldd	r25, Y+20	; 0x14
    4662:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    4666:	dc 01       	movw	r26, r24
    4668:	cb 01       	movw	r24, r22
    466a:	88 8b       	std	Y+16, r24	; 0x10
    466c:	88 89       	ldd	r24, Y+16	; 0x10
    466e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4670:	89 81       	ldd	r24, Y+1	; 0x01
    4672:	8a 95       	dec	r24
    4674:	f1 f7       	brne	.-4      	; 0x4672 <sonic1+0x394>
    4676:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(10);
		PORTE &= ~(1<<TRIG);
    4678:	a3 e2       	ldi	r26, 0x23	; 35
    467a:	b0 e0       	ldi	r27, 0x00	; 0
    467c:	e3 e2       	ldi	r30, 0x23	; 35
    467e:	f0 e0       	ldi	r31, 0x00	; 0
    4680:	80 81       	ld	r24, Z
    4682:	28 2f       	mov	r18, r24
    4684:	81 e0       	ldi	r24, 0x01	; 1
    4686:	90 e0       	ldi	r25, 0x00	; 0
    4688:	0b a8       	ldd	r0, Y+51	; 0x33
    468a:	02 c0       	rjmp	.+4      	; 0x4690 <sonic1+0x3b2>
    468c:	88 0f       	add	r24, r24
    468e:	99 1f       	adc	r25, r25
    4690:	0a 94       	dec	r0
    4692:	e2 f7       	brpl	.-8      	; 0x468c <sonic1+0x3ae>
    4694:	80 95       	com	r24
    4696:	82 23       	and	r24, r18
    4698:	8c 93       	st	X, r24
		while(!(PINE & (1<<ECHO)));
    469a:	e1 e2       	ldi	r30, 0x21	; 33
    469c:	f0 e0       	ldi	r31, 0x00	; 0
    469e:	80 81       	ld	r24, Z
    46a0:	88 2f       	mov	r24, r24
    46a2:	90 e0       	ldi	r25, 0x00	; 0
    46a4:	09 a8       	ldd	r0, Y+49	; 0x31
    46a6:	02 c0       	rjmp	.+4      	; 0x46ac <sonic1+0x3ce>
    46a8:	95 95       	asr	r25
    46aa:	87 95       	ror	r24
    46ac:	0a 94       	dec	r0
    46ae:	e2 f7       	brpl	.-8      	; 0x46a8 <sonic1+0x3ca>
    46b0:	81 70       	andi	r24, 0x01	; 1
    46b2:	90 70       	andi	r25, 0x00	; 0
    46b4:	00 97       	sbiw	r24, 0x00	; 0
    46b6:	89 f3       	breq	.-30     	; 0x469a <sonic1+0x3bc>
		TCNT3 = 0x0000;
    46b8:	e8 e8       	ldi	r30, 0x88	; 136
    46ba:	f0 e0       	ldi	r31, 0x00	; 0
    46bc:	11 82       	std	Z+1, r1	; 0x01
    46be:	10 82       	st	Z, r1
		while(PINE & (1<<ECHO));
    46c0:	e1 e2       	ldi	r30, 0x21	; 33
    46c2:	f0 e0       	ldi	r31, 0x00	; 0
    46c4:	80 81       	ld	r24, Z
    46c6:	88 2f       	mov	r24, r24
    46c8:	90 e0       	ldi	r25, 0x00	; 0
    46ca:	09 a8       	ldd	r0, Y+49	; 0x31
    46cc:	02 c0       	rjmp	.+4      	; 0x46d2 <sonic1+0x3f4>
    46ce:	95 95       	asr	r25
    46d0:	87 95       	ror	r24
    46d2:	0a 94       	dec	r0
    46d4:	e2 f7       	brpl	.-8      	; 0x46ce <sonic1+0x3f0>
    46d6:	81 70       	andi	r24, 0x01	; 1
    46d8:	90 70       	andi	r25, 0x00	; 0
    46da:	88 23       	and	r24, r24
    46dc:	89 f7       	brne	.-30     	; 0x46c0 <sonic1+0x3e2>
		TCCR3B = 0x00;
    46de:	ea e8       	ldi	r30, 0x8A	; 138
    46e0:	f0 e0       	ldi	r31, 0x00	; 0
    46e2:	10 82       	st	Z, r1
		distance1 = (unsigned int)(SOUND_VELOCITY * (TCNT3 * 4 / 2) / 1000);
    46e4:	e8 e8       	ldi	r30, 0x88	; 136
    46e6:	f0 e0       	ldi	r31, 0x00	; 0
    46e8:	80 81       	ld	r24, Z
    46ea:	91 81       	ldd	r25, Z+1	; 0x01
    46ec:	88 0f       	add	r24, r24
    46ee:	99 1f       	adc	r25, r25
    46f0:	88 0f       	add	r24, r24
    46f2:	99 1f       	adc	r25, r25
    46f4:	96 95       	lsr	r25
    46f6:	87 95       	ror	r24
    46f8:	cc 01       	movw	r24, r24
    46fa:	a0 e0       	ldi	r26, 0x00	; 0
    46fc:	b0 e0       	ldi	r27, 0x00	; 0
    46fe:	24 e5       	ldi	r18, 0x54	; 84
    4700:	31 e0       	ldi	r19, 0x01	; 1
    4702:	40 e0       	ldi	r20, 0x00	; 0
    4704:	50 e0       	ldi	r21, 0x00	; 0
    4706:	bc 01       	movw	r22, r24
    4708:	cd 01       	movw	r24, r26
    470a:	0e 94 2b 2f 	call	0x5e56	; 0x5e56 <__mulsi3>
    470e:	dc 01       	movw	r26, r24
    4710:	cb 01       	movw	r24, r22
    4712:	28 ee       	ldi	r18, 0xE8	; 232
    4714:	33 e0       	ldi	r19, 0x03	; 3
    4716:	40 e0       	ldi	r20, 0x00	; 0
    4718:	50 e0       	ldi	r21, 0x00	; 0
    471a:	bc 01       	movw	r22, r24
    471c:	cd 01       	movw	r24, r26
    471e:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <__udivmodsi4>
    4722:	da 01       	movw	r26, r20
    4724:	c9 01       	movw	r24, r18
    4726:	9e ab       	std	Y+54, r25	; 0x36
    4728:	8d ab       	std	Y+53, r24	; 0x35

		//음파의 속도는 340m/s 이므로 1cm를 이동하는데 약 29us.
		// 4/2 = 왕복거리
		return distance1;
    472a:	8d a9       	ldd	r24, Y+53	; 0x35
    472c:	9e a9       	ldd	r25, Y+54	; 0x36

		
}
    472e:	e6 96       	adiw	r28, 0x36	; 54
    4730:	0f b6       	in	r0, 0x3f	; 63
    4732:	f8 94       	cli
    4734:	de bf       	out	0x3e, r29	; 62
    4736:	0f be       	out	0x3f, r0	; 63
    4738:	cd bf       	out	0x3d, r28	; 61
    473a:	cf 91       	pop	r28
    473c:	df 91       	pop	r29
    473e:	08 95       	ret

00004740 <sonic2>:

unsigned short sonic2(){//우측  
    4740:	df 93       	push	r29
    4742:	cf 93       	push	r28
    4744:	cd b7       	in	r28, 0x3d	; 61
    4746:	de b7       	in	r29, 0x3e	; 62
    4748:	e6 97       	sbiw	r28, 0x36	; 54
    474a:	0f b6       	in	r0, 0x3f	; 63
    474c:	f8 94       	cli
    474e:	de bf       	out	0x3e, r29	; 62
    4750:	0f be       	out	0x3f, r0	; 63
    4752:	cd bf       	out	0x3d, r28	; 61
unsigned int distance2;
	int TRIG = 4;
    4754:	84 e0       	ldi	r24, 0x04	; 4
    4756:	90 e0       	ldi	r25, 0x00	; 0
    4758:	9c ab       	std	Y+52, r25	; 0x34
    475a:	8b ab       	std	Y+51, r24	; 0x33
 	int ECHO = 5;
    475c:	85 e0       	ldi	r24, 0x05	; 5
    475e:	90 e0       	ldi	r25, 0x00	; 0
    4760:	9a ab       	std	Y+50, r25	; 0x32
    4762:	89 ab       	std	Y+49, r24	; 0x31
//	int SOUND_VELOCITY = 3400;
	DDRE = ((DDRE | (1<<TRIG)) & ~(1<<ECHO));
    4764:	a2 e2       	ldi	r26, 0x22	; 34
    4766:	b0 e0       	ldi	r27, 0x00	; 0
    4768:	e2 e2       	ldi	r30, 0x22	; 34
    476a:	f0 e0       	ldi	r31, 0x00	; 0
    476c:	80 81       	ld	r24, Z
    476e:	28 2f       	mov	r18, r24
    4770:	81 e0       	ldi	r24, 0x01	; 1
    4772:	90 e0       	ldi	r25, 0x00	; 0
    4774:	0b a8       	ldd	r0, Y+51	; 0x33
    4776:	02 c0       	rjmp	.+4      	; 0x477c <sonic2+0x3c>
    4778:	88 0f       	add	r24, r24
    477a:	99 1f       	adc	r25, r25
    477c:	0a 94       	dec	r0
    477e:	e2 f7       	brpl	.-8      	; 0x4778 <sonic2+0x38>
    4780:	28 2b       	or	r18, r24
    4782:	81 e0       	ldi	r24, 0x01	; 1
    4784:	90 e0       	ldi	r25, 0x00	; 0
    4786:	09 a8       	ldd	r0, Y+49	; 0x31
    4788:	02 c0       	rjmp	.+4      	; 0x478e <sonic2+0x4e>
    478a:	88 0f       	add	r24, r24
    478c:	99 1f       	adc	r25, r25
    478e:	0a 94       	dec	r0
    4790:	e2 f7       	brpl	.-8      	; 0x478a <sonic2+0x4a>
    4792:	80 95       	com	r24
    4794:	82 23       	and	r24, r18
    4796:	8c 93       	st	X, r24
	
		
		TCCR3B = 0x03;
    4798:	ea e8       	ldi	r30, 0x8A	; 138
    479a:	f0 e0       	ldi	r31, 0x00	; 0
    479c:	83 e0       	ldi	r24, 0x03	; 3
    479e:	80 83       	st	Z, r24
		PORTE &= ~(1<<TRIG);
    47a0:	a3 e2       	ldi	r26, 0x23	; 35
    47a2:	b0 e0       	ldi	r27, 0x00	; 0
    47a4:	e3 e2       	ldi	r30, 0x23	; 35
    47a6:	f0 e0       	ldi	r31, 0x00	; 0
    47a8:	80 81       	ld	r24, Z
    47aa:	28 2f       	mov	r18, r24
    47ac:	81 e0       	ldi	r24, 0x01	; 1
    47ae:	90 e0       	ldi	r25, 0x00	; 0
    47b0:	0b a8       	ldd	r0, Y+51	; 0x33
    47b2:	02 c0       	rjmp	.+4      	; 0x47b8 <sonic2+0x78>
    47b4:	88 0f       	add	r24, r24
    47b6:	99 1f       	adc	r25, r25
    47b8:	0a 94       	dec	r0
    47ba:	e2 f7       	brpl	.-8      	; 0x47b4 <sonic2+0x74>
    47bc:	80 95       	com	r24
    47be:	82 23       	and	r24, r18
    47c0:	8c 93       	st	X, r24
    47c2:	80 e0       	ldi	r24, 0x00	; 0
    47c4:	90 e0       	ldi	r25, 0x00	; 0
    47c6:	a0 e2       	ldi	r26, 0x20	; 32
    47c8:	b1 e4       	ldi	r27, 0x41	; 65
    47ca:	8d a7       	std	Y+45, r24	; 0x2d
    47cc:	9e a7       	std	Y+46, r25	; 0x2e
    47ce:	af a7       	std	Y+47, r26	; 0x2f
    47d0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    47d2:	6d a5       	ldd	r22, Y+45	; 0x2d
    47d4:	7e a5       	ldd	r23, Y+46	; 0x2e
    47d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    47d8:	98 a9       	ldd	r25, Y+48	; 0x30
    47da:	2b ea       	ldi	r18, 0xAB	; 171
    47dc:	3a ea       	ldi	r19, 0xAA	; 170
    47de:	4a ea       	ldi	r20, 0xAA	; 170
    47e0:	50 e4       	ldi	r21, 0x40	; 64
    47e2:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    47e6:	dc 01       	movw	r26, r24
    47e8:	cb 01       	movw	r24, r22
    47ea:	89 a7       	std	Y+41, r24	; 0x29
    47ec:	9a a7       	std	Y+42, r25	; 0x2a
    47ee:	ab a7       	std	Y+43, r26	; 0x2b
    47f0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    47f2:	69 a5       	ldd	r22, Y+41	; 0x29
    47f4:	7a a5       	ldd	r23, Y+42	; 0x2a
    47f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    47f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    47fa:	20 e0       	ldi	r18, 0x00	; 0
    47fc:	30 e0       	ldi	r19, 0x00	; 0
    47fe:	40 e8       	ldi	r20, 0x80	; 128
    4800:	5f e3       	ldi	r21, 0x3F	; 63
    4802:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    4806:	88 23       	and	r24, r24
    4808:	1c f4       	brge	.+6      	; 0x4810 <sonic2+0xd0>
		__ticks = 1;
    480a:	81 e0       	ldi	r24, 0x01	; 1
    480c:	88 a7       	std	Y+40, r24	; 0x28
    480e:	91 c0       	rjmp	.+290    	; 0x4932 <sonic2+0x1f2>
	else if (__tmp > 255)
    4810:	69 a5       	ldd	r22, Y+41	; 0x29
    4812:	7a a5       	ldd	r23, Y+42	; 0x2a
    4814:	8b a5       	ldd	r24, Y+43	; 0x2b
    4816:	9c a5       	ldd	r25, Y+44	; 0x2c
    4818:	20 e0       	ldi	r18, 0x00	; 0
    481a:	30 e0       	ldi	r19, 0x00	; 0
    481c:	4f e7       	ldi	r20, 0x7F	; 127
    481e:	53 e4       	ldi	r21, 0x43	; 67
    4820:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    4824:	18 16       	cp	r1, r24
    4826:	0c f0       	brlt	.+2      	; 0x482a <sonic2+0xea>
    4828:	7b c0       	rjmp	.+246    	; 0x4920 <sonic2+0x1e0>
	{
		_delay_ms(__us / 1000.0);
    482a:	6d a5       	ldd	r22, Y+45	; 0x2d
    482c:	7e a5       	ldd	r23, Y+46	; 0x2e
    482e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4830:	98 a9       	ldd	r25, Y+48	; 0x30
    4832:	20 e0       	ldi	r18, 0x00	; 0
    4834:	30 e0       	ldi	r19, 0x00	; 0
    4836:	4a e7       	ldi	r20, 0x7A	; 122
    4838:	54 e4       	ldi	r21, 0x44	; 68
    483a:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <__divsf3>
    483e:	dc 01       	movw	r26, r24
    4840:	cb 01       	movw	r24, r22
    4842:	8c a3       	std	Y+36, r24	; 0x24
    4844:	9d a3       	std	Y+37, r25	; 0x25
    4846:	ae a3       	std	Y+38, r26	; 0x26
    4848:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    484a:	6c a1       	ldd	r22, Y+36	; 0x24
    484c:	7d a1       	ldd	r23, Y+37	; 0x25
    484e:	8e a1       	ldd	r24, Y+38	; 0x26
    4850:	9f a1       	ldd	r25, Y+39	; 0x27
    4852:	20 e0       	ldi	r18, 0x00	; 0
    4854:	30 e0       	ldi	r19, 0x00	; 0
    4856:	4a e7       	ldi	r20, 0x7A	; 122
    4858:	55 e4       	ldi	r21, 0x45	; 69
    485a:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    485e:	dc 01       	movw	r26, r24
    4860:	cb 01       	movw	r24, r22
    4862:	88 a3       	std	Y+32, r24	; 0x20
    4864:	99 a3       	std	Y+33, r25	; 0x21
    4866:	aa a3       	std	Y+34, r26	; 0x22
    4868:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    486a:	68 a1       	ldd	r22, Y+32	; 0x20
    486c:	79 a1       	ldd	r23, Y+33	; 0x21
    486e:	8a a1       	ldd	r24, Y+34	; 0x22
    4870:	9b a1       	ldd	r25, Y+35	; 0x23
    4872:	20 e0       	ldi	r18, 0x00	; 0
    4874:	30 e0       	ldi	r19, 0x00	; 0
    4876:	40 e8       	ldi	r20, 0x80	; 128
    4878:	5f e3       	ldi	r21, 0x3F	; 63
    487a:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    487e:	88 23       	and	r24, r24
    4880:	2c f4       	brge	.+10     	; 0x488c <sonic2+0x14c>
		__ticks = 1;
    4882:	81 e0       	ldi	r24, 0x01	; 1
    4884:	90 e0       	ldi	r25, 0x00	; 0
    4886:	9f 8f       	std	Y+31, r25	; 0x1f
    4888:	8e 8f       	std	Y+30, r24	; 0x1e
    488a:	3f c0       	rjmp	.+126    	; 0x490a <sonic2+0x1ca>
	else if (__tmp > 65535)
    488c:	68 a1       	ldd	r22, Y+32	; 0x20
    488e:	79 a1       	ldd	r23, Y+33	; 0x21
    4890:	8a a1       	ldd	r24, Y+34	; 0x22
    4892:	9b a1       	ldd	r25, Y+35	; 0x23
    4894:	20 e0       	ldi	r18, 0x00	; 0
    4896:	3f ef       	ldi	r19, 0xFF	; 255
    4898:	4f e7       	ldi	r20, 0x7F	; 127
    489a:	57 e4       	ldi	r21, 0x47	; 71
    489c:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    48a0:	18 16       	cp	r1, r24
    48a2:	4c f5       	brge	.+82     	; 0x48f6 <sonic2+0x1b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48a4:	6c a1       	ldd	r22, Y+36	; 0x24
    48a6:	7d a1       	ldd	r23, Y+37	; 0x25
    48a8:	8e a1       	ldd	r24, Y+38	; 0x26
    48aa:	9f a1       	ldd	r25, Y+39	; 0x27
    48ac:	20 e0       	ldi	r18, 0x00	; 0
    48ae:	30 e0       	ldi	r19, 0x00	; 0
    48b0:	40 e2       	ldi	r20, 0x20	; 32
    48b2:	51 e4       	ldi	r21, 0x41	; 65
    48b4:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    48b8:	dc 01       	movw	r26, r24
    48ba:	cb 01       	movw	r24, r22
    48bc:	bc 01       	movw	r22, r24
    48be:	cd 01       	movw	r24, r26
    48c0:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    48c4:	dc 01       	movw	r26, r24
    48c6:	cb 01       	movw	r24, r22
    48c8:	9f 8f       	std	Y+31, r25	; 0x1f
    48ca:	8e 8f       	std	Y+30, r24	; 0x1e
    48cc:	0f c0       	rjmp	.+30     	; 0x48ec <sonic2+0x1ac>
    48ce:	80 e9       	ldi	r24, 0x90	; 144
    48d0:	91 e0       	ldi	r25, 0x01	; 1
    48d2:	9d 8f       	std	Y+29, r25	; 0x1d
    48d4:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    48d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    48d8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    48da:	01 97       	sbiw	r24, 0x01	; 1
    48dc:	f1 f7       	brne	.-4      	; 0x48da <sonic2+0x19a>
    48de:	9d 8f       	std	Y+29, r25	; 0x1d
    48e0:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    48e4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    48e6:	01 97       	sbiw	r24, 0x01	; 1
    48e8:	9f 8f       	std	Y+31, r25	; 0x1f
    48ea:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48ec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    48ee:	9f 8d       	ldd	r25, Y+31	; 0x1f
    48f0:	00 97       	sbiw	r24, 0x00	; 0
    48f2:	69 f7       	brne	.-38     	; 0x48ce <sonic2+0x18e>
    48f4:	24 c0       	rjmp	.+72     	; 0x493e <sonic2+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48f6:	68 a1       	ldd	r22, Y+32	; 0x20
    48f8:	79 a1       	ldd	r23, Y+33	; 0x21
    48fa:	8a a1       	ldd	r24, Y+34	; 0x22
    48fc:	9b a1       	ldd	r25, Y+35	; 0x23
    48fe:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    4902:	dc 01       	movw	r26, r24
    4904:	cb 01       	movw	r24, r22
    4906:	9f 8f       	std	Y+31, r25	; 0x1f
    4908:	8e 8f       	std	Y+30, r24	; 0x1e
    490a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    490c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    490e:	9b 8f       	std	Y+27, r25	; 0x1b
    4910:	8a 8f       	std	Y+26, r24	; 0x1a
    4912:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4914:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4916:	01 97       	sbiw	r24, 0x01	; 1
    4918:	f1 f7       	brne	.-4      	; 0x4916 <sonic2+0x1d6>
    491a:	9b 8f       	std	Y+27, r25	; 0x1b
    491c:	8a 8f       	std	Y+26, r24	; 0x1a
    491e:	0f c0       	rjmp	.+30     	; 0x493e <sonic2+0x1fe>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4920:	69 a5       	ldd	r22, Y+41	; 0x29
    4922:	7a a5       	ldd	r23, Y+42	; 0x2a
    4924:	8b a5       	ldd	r24, Y+43	; 0x2b
    4926:	9c a5       	ldd	r25, Y+44	; 0x2c
    4928:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    492c:	dc 01       	movw	r26, r24
    492e:	cb 01       	movw	r24, r22
    4930:	88 a7       	std	Y+40, r24	; 0x28
    4932:	88 a5       	ldd	r24, Y+40	; 0x28
    4934:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4936:	89 8d       	ldd	r24, Y+25	; 0x19
    4938:	8a 95       	dec	r24
    493a:	f1 f7       	brne	.-4      	; 0x4938 <sonic2+0x1f8>
    493c:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(10);
		PORTE |= (1<<TRIG);
    493e:	a3 e2       	ldi	r26, 0x23	; 35
    4940:	b0 e0       	ldi	r27, 0x00	; 0
    4942:	e3 e2       	ldi	r30, 0x23	; 35
    4944:	f0 e0       	ldi	r31, 0x00	; 0
    4946:	80 81       	ld	r24, Z
    4948:	28 2f       	mov	r18, r24
    494a:	81 e0       	ldi	r24, 0x01	; 1
    494c:	90 e0       	ldi	r25, 0x00	; 0
    494e:	0b a8       	ldd	r0, Y+51	; 0x33
    4950:	02 c0       	rjmp	.+4      	; 0x4956 <sonic2+0x216>
    4952:	88 0f       	add	r24, r24
    4954:	99 1f       	adc	r25, r25
    4956:	0a 94       	dec	r0
    4958:	e2 f7       	brpl	.-8      	; 0x4952 <sonic2+0x212>
    495a:	82 2b       	or	r24, r18
    495c:	8c 93       	st	X, r24
    495e:	80 e0       	ldi	r24, 0x00	; 0
    4960:	90 e0       	ldi	r25, 0x00	; 0
    4962:	a0 e2       	ldi	r26, 0x20	; 32
    4964:	b1 e4       	ldi	r27, 0x41	; 65
    4966:	8d 8b       	std	Y+21, r24	; 0x15
    4968:	9e 8b       	std	Y+22, r25	; 0x16
    496a:	af 8b       	std	Y+23, r26	; 0x17
    496c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    496e:	6d 89       	ldd	r22, Y+21	; 0x15
    4970:	7e 89       	ldd	r23, Y+22	; 0x16
    4972:	8f 89       	ldd	r24, Y+23	; 0x17
    4974:	98 8d       	ldd	r25, Y+24	; 0x18
    4976:	2b ea       	ldi	r18, 0xAB	; 171
    4978:	3a ea       	ldi	r19, 0xAA	; 170
    497a:	4a ea       	ldi	r20, 0xAA	; 170
    497c:	50 e4       	ldi	r21, 0x40	; 64
    497e:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    4982:	dc 01       	movw	r26, r24
    4984:	cb 01       	movw	r24, r22
    4986:	89 8b       	std	Y+17, r24	; 0x11
    4988:	9a 8b       	std	Y+18, r25	; 0x12
    498a:	ab 8b       	std	Y+19, r26	; 0x13
    498c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    498e:	69 89       	ldd	r22, Y+17	; 0x11
    4990:	7a 89       	ldd	r23, Y+18	; 0x12
    4992:	8b 89       	ldd	r24, Y+19	; 0x13
    4994:	9c 89       	ldd	r25, Y+20	; 0x14
    4996:	20 e0       	ldi	r18, 0x00	; 0
    4998:	30 e0       	ldi	r19, 0x00	; 0
    499a:	40 e8       	ldi	r20, 0x80	; 128
    499c:	5f e3       	ldi	r21, 0x3F	; 63
    499e:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    49a2:	88 23       	and	r24, r24
    49a4:	1c f4       	brge	.+6      	; 0x49ac <sonic2+0x26c>
		__ticks = 1;
    49a6:	81 e0       	ldi	r24, 0x01	; 1
    49a8:	88 8b       	std	Y+16, r24	; 0x10
    49aa:	91 c0       	rjmp	.+290    	; 0x4ace <sonic2+0x38e>
	else if (__tmp > 255)
    49ac:	69 89       	ldd	r22, Y+17	; 0x11
    49ae:	7a 89       	ldd	r23, Y+18	; 0x12
    49b0:	8b 89       	ldd	r24, Y+19	; 0x13
    49b2:	9c 89       	ldd	r25, Y+20	; 0x14
    49b4:	20 e0       	ldi	r18, 0x00	; 0
    49b6:	30 e0       	ldi	r19, 0x00	; 0
    49b8:	4f e7       	ldi	r20, 0x7F	; 127
    49ba:	53 e4       	ldi	r21, 0x43	; 67
    49bc:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    49c0:	18 16       	cp	r1, r24
    49c2:	0c f0       	brlt	.+2      	; 0x49c6 <sonic2+0x286>
    49c4:	7b c0       	rjmp	.+246    	; 0x4abc <sonic2+0x37c>
	{
		_delay_ms(__us / 1000.0);
    49c6:	6d 89       	ldd	r22, Y+21	; 0x15
    49c8:	7e 89       	ldd	r23, Y+22	; 0x16
    49ca:	8f 89       	ldd	r24, Y+23	; 0x17
    49cc:	98 8d       	ldd	r25, Y+24	; 0x18
    49ce:	20 e0       	ldi	r18, 0x00	; 0
    49d0:	30 e0       	ldi	r19, 0x00	; 0
    49d2:	4a e7       	ldi	r20, 0x7A	; 122
    49d4:	54 e4       	ldi	r21, 0x44	; 68
    49d6:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <__divsf3>
    49da:	dc 01       	movw	r26, r24
    49dc:	cb 01       	movw	r24, r22
    49de:	8c 87       	std	Y+12, r24	; 0x0c
    49e0:	9d 87       	std	Y+13, r25	; 0x0d
    49e2:	ae 87       	std	Y+14, r26	; 0x0e
    49e4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49e6:	6c 85       	ldd	r22, Y+12	; 0x0c
    49e8:	7d 85       	ldd	r23, Y+13	; 0x0d
    49ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    49ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    49ee:	20 e0       	ldi	r18, 0x00	; 0
    49f0:	30 e0       	ldi	r19, 0x00	; 0
    49f2:	4a e7       	ldi	r20, 0x7A	; 122
    49f4:	55 e4       	ldi	r21, 0x45	; 69
    49f6:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    49fa:	dc 01       	movw	r26, r24
    49fc:	cb 01       	movw	r24, r22
    49fe:	88 87       	std	Y+8, r24	; 0x08
    4a00:	99 87       	std	Y+9, r25	; 0x09
    4a02:	aa 87       	std	Y+10, r26	; 0x0a
    4a04:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4a06:	68 85       	ldd	r22, Y+8	; 0x08
    4a08:	79 85       	ldd	r23, Y+9	; 0x09
    4a0a:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a0c:	9b 85       	ldd	r25, Y+11	; 0x0b
    4a0e:	20 e0       	ldi	r18, 0x00	; 0
    4a10:	30 e0       	ldi	r19, 0x00	; 0
    4a12:	40 e8       	ldi	r20, 0x80	; 128
    4a14:	5f e3       	ldi	r21, 0x3F	; 63
    4a16:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    4a1a:	88 23       	and	r24, r24
    4a1c:	2c f4       	brge	.+10     	; 0x4a28 <sonic2+0x2e8>
		__ticks = 1;
    4a1e:	81 e0       	ldi	r24, 0x01	; 1
    4a20:	90 e0       	ldi	r25, 0x00	; 0
    4a22:	9f 83       	std	Y+7, r25	; 0x07
    4a24:	8e 83       	std	Y+6, r24	; 0x06
    4a26:	3f c0       	rjmp	.+126    	; 0x4aa6 <sonic2+0x366>
	else if (__tmp > 65535)
    4a28:	68 85       	ldd	r22, Y+8	; 0x08
    4a2a:	79 85       	ldd	r23, Y+9	; 0x09
    4a2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4a30:	20 e0       	ldi	r18, 0x00	; 0
    4a32:	3f ef       	ldi	r19, 0xFF	; 255
    4a34:	4f e7       	ldi	r20, 0x7F	; 127
    4a36:	57 e4       	ldi	r21, 0x47	; 71
    4a38:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    4a3c:	18 16       	cp	r1, r24
    4a3e:	4c f5       	brge	.+82     	; 0x4a92 <sonic2+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a40:	6c 85       	ldd	r22, Y+12	; 0x0c
    4a42:	7d 85       	ldd	r23, Y+13	; 0x0d
    4a44:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a46:	9f 85       	ldd	r25, Y+15	; 0x0f
    4a48:	20 e0       	ldi	r18, 0x00	; 0
    4a4a:	30 e0       	ldi	r19, 0x00	; 0
    4a4c:	40 e2       	ldi	r20, 0x20	; 32
    4a4e:	51 e4       	ldi	r21, 0x41	; 65
    4a50:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    4a54:	dc 01       	movw	r26, r24
    4a56:	cb 01       	movw	r24, r22
    4a58:	bc 01       	movw	r22, r24
    4a5a:	cd 01       	movw	r24, r26
    4a5c:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    4a60:	dc 01       	movw	r26, r24
    4a62:	cb 01       	movw	r24, r22
    4a64:	9f 83       	std	Y+7, r25	; 0x07
    4a66:	8e 83       	std	Y+6, r24	; 0x06
    4a68:	0f c0       	rjmp	.+30     	; 0x4a88 <sonic2+0x348>
    4a6a:	80 e9       	ldi	r24, 0x90	; 144
    4a6c:	91 e0       	ldi	r25, 0x01	; 1
    4a6e:	9d 83       	std	Y+5, r25	; 0x05
    4a70:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4a72:	8c 81       	ldd	r24, Y+4	; 0x04
    4a74:	9d 81       	ldd	r25, Y+5	; 0x05
    4a76:	01 97       	sbiw	r24, 0x01	; 1
    4a78:	f1 f7       	brne	.-4      	; 0x4a76 <sonic2+0x336>
    4a7a:	9d 83       	std	Y+5, r25	; 0x05
    4a7c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a7e:	8e 81       	ldd	r24, Y+6	; 0x06
    4a80:	9f 81       	ldd	r25, Y+7	; 0x07
    4a82:	01 97       	sbiw	r24, 0x01	; 1
    4a84:	9f 83       	std	Y+7, r25	; 0x07
    4a86:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a88:	8e 81       	ldd	r24, Y+6	; 0x06
    4a8a:	9f 81       	ldd	r25, Y+7	; 0x07
    4a8c:	00 97       	sbiw	r24, 0x00	; 0
    4a8e:	69 f7       	brne	.-38     	; 0x4a6a <sonic2+0x32a>
    4a90:	24 c0       	rjmp	.+72     	; 0x4ada <sonic2+0x39a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a92:	68 85       	ldd	r22, Y+8	; 0x08
    4a94:	79 85       	ldd	r23, Y+9	; 0x09
    4a96:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a98:	9b 85       	ldd	r25, Y+11	; 0x0b
    4a9a:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    4a9e:	dc 01       	movw	r26, r24
    4aa0:	cb 01       	movw	r24, r22
    4aa2:	9f 83       	std	Y+7, r25	; 0x07
    4aa4:	8e 83       	std	Y+6, r24	; 0x06
    4aa6:	8e 81       	ldd	r24, Y+6	; 0x06
    4aa8:	9f 81       	ldd	r25, Y+7	; 0x07
    4aaa:	9b 83       	std	Y+3, r25	; 0x03
    4aac:	8a 83       	std	Y+2, r24	; 0x02
    4aae:	8a 81       	ldd	r24, Y+2	; 0x02
    4ab0:	9b 81       	ldd	r25, Y+3	; 0x03
    4ab2:	01 97       	sbiw	r24, 0x01	; 1
    4ab4:	f1 f7       	brne	.-4      	; 0x4ab2 <sonic2+0x372>
    4ab6:	9b 83       	std	Y+3, r25	; 0x03
    4ab8:	8a 83       	std	Y+2, r24	; 0x02
    4aba:	0f c0       	rjmp	.+30     	; 0x4ada <sonic2+0x39a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4abc:	69 89       	ldd	r22, Y+17	; 0x11
    4abe:	7a 89       	ldd	r23, Y+18	; 0x12
    4ac0:	8b 89       	ldd	r24, Y+19	; 0x13
    4ac2:	9c 89       	ldd	r25, Y+20	; 0x14
    4ac4:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    4ac8:	dc 01       	movw	r26, r24
    4aca:	cb 01       	movw	r24, r22
    4acc:	88 8b       	std	Y+16, r24	; 0x10
    4ace:	88 89       	ldd	r24, Y+16	; 0x10
    4ad0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4ad2:	89 81       	ldd	r24, Y+1	; 0x01
    4ad4:	8a 95       	dec	r24
    4ad6:	f1 f7       	brne	.-4      	; 0x4ad4 <sonic2+0x394>
    4ad8:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(10);
		PORTE &= ~(1<<TRIG);
    4ada:	a3 e2       	ldi	r26, 0x23	; 35
    4adc:	b0 e0       	ldi	r27, 0x00	; 0
    4ade:	e3 e2       	ldi	r30, 0x23	; 35
    4ae0:	f0 e0       	ldi	r31, 0x00	; 0
    4ae2:	80 81       	ld	r24, Z
    4ae4:	28 2f       	mov	r18, r24
    4ae6:	81 e0       	ldi	r24, 0x01	; 1
    4ae8:	90 e0       	ldi	r25, 0x00	; 0
    4aea:	0b a8       	ldd	r0, Y+51	; 0x33
    4aec:	02 c0       	rjmp	.+4      	; 0x4af2 <sonic2+0x3b2>
    4aee:	88 0f       	add	r24, r24
    4af0:	99 1f       	adc	r25, r25
    4af2:	0a 94       	dec	r0
    4af4:	e2 f7       	brpl	.-8      	; 0x4aee <sonic2+0x3ae>
    4af6:	80 95       	com	r24
    4af8:	82 23       	and	r24, r18
    4afa:	8c 93       	st	X, r24
		while(!(PINE & (1<<ECHO)));
    4afc:	e1 e2       	ldi	r30, 0x21	; 33
    4afe:	f0 e0       	ldi	r31, 0x00	; 0
    4b00:	80 81       	ld	r24, Z
    4b02:	88 2f       	mov	r24, r24
    4b04:	90 e0       	ldi	r25, 0x00	; 0
    4b06:	09 a8       	ldd	r0, Y+49	; 0x31
    4b08:	02 c0       	rjmp	.+4      	; 0x4b0e <sonic2+0x3ce>
    4b0a:	95 95       	asr	r25
    4b0c:	87 95       	ror	r24
    4b0e:	0a 94       	dec	r0
    4b10:	e2 f7       	brpl	.-8      	; 0x4b0a <sonic2+0x3ca>
    4b12:	81 70       	andi	r24, 0x01	; 1
    4b14:	90 70       	andi	r25, 0x00	; 0
    4b16:	00 97       	sbiw	r24, 0x00	; 0
    4b18:	89 f3       	breq	.-30     	; 0x4afc <sonic2+0x3bc>
		TCNT3 = 0x0000;
    4b1a:	e8 e8       	ldi	r30, 0x88	; 136
    4b1c:	f0 e0       	ldi	r31, 0x00	; 0
    4b1e:	11 82       	std	Z+1, r1	; 0x01
    4b20:	10 82       	st	Z, r1
		while(PINE & (1<<ECHO));
    4b22:	e1 e2       	ldi	r30, 0x21	; 33
    4b24:	f0 e0       	ldi	r31, 0x00	; 0
    4b26:	80 81       	ld	r24, Z
    4b28:	88 2f       	mov	r24, r24
    4b2a:	90 e0       	ldi	r25, 0x00	; 0
    4b2c:	09 a8       	ldd	r0, Y+49	; 0x31
    4b2e:	02 c0       	rjmp	.+4      	; 0x4b34 <sonic2+0x3f4>
    4b30:	95 95       	asr	r25
    4b32:	87 95       	ror	r24
    4b34:	0a 94       	dec	r0
    4b36:	e2 f7       	brpl	.-8      	; 0x4b30 <sonic2+0x3f0>
    4b38:	81 70       	andi	r24, 0x01	; 1
    4b3a:	90 70       	andi	r25, 0x00	; 0
    4b3c:	88 23       	and	r24, r24
    4b3e:	89 f7       	brne	.-30     	; 0x4b22 <sonic2+0x3e2>
		TCCR3B = 0x00;
    4b40:	ea e8       	ldi	r30, 0x8A	; 138
    4b42:	f0 e0       	ldi	r31, 0x00	; 0
    4b44:	10 82       	st	Z, r1
		distance2 = (unsigned int)(SOUND_VELOCITY * (TCNT3 * 4 / 2) / 1000);
    4b46:	e8 e8       	ldi	r30, 0x88	; 136
    4b48:	f0 e0       	ldi	r31, 0x00	; 0
    4b4a:	80 81       	ld	r24, Z
    4b4c:	91 81       	ldd	r25, Z+1	; 0x01
    4b4e:	88 0f       	add	r24, r24
    4b50:	99 1f       	adc	r25, r25
    4b52:	88 0f       	add	r24, r24
    4b54:	99 1f       	adc	r25, r25
    4b56:	96 95       	lsr	r25
    4b58:	87 95       	ror	r24
    4b5a:	cc 01       	movw	r24, r24
    4b5c:	a0 e0       	ldi	r26, 0x00	; 0
    4b5e:	b0 e0       	ldi	r27, 0x00	; 0
    4b60:	24 e5       	ldi	r18, 0x54	; 84
    4b62:	31 e0       	ldi	r19, 0x01	; 1
    4b64:	40 e0       	ldi	r20, 0x00	; 0
    4b66:	50 e0       	ldi	r21, 0x00	; 0
    4b68:	bc 01       	movw	r22, r24
    4b6a:	cd 01       	movw	r24, r26
    4b6c:	0e 94 2b 2f 	call	0x5e56	; 0x5e56 <__mulsi3>
    4b70:	dc 01       	movw	r26, r24
    4b72:	cb 01       	movw	r24, r22
    4b74:	28 ee       	ldi	r18, 0xE8	; 232
    4b76:	33 e0       	ldi	r19, 0x03	; 3
    4b78:	40 e0       	ldi	r20, 0x00	; 0
    4b7a:	50 e0       	ldi	r21, 0x00	; 0
    4b7c:	bc 01       	movw	r22, r24
    4b7e:	cd 01       	movw	r24, r26
    4b80:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <__udivmodsi4>
    4b84:	da 01       	movw	r26, r20
    4b86:	c9 01       	movw	r24, r18
    4b88:	9e ab       	std	Y+54, r25	; 0x36
    4b8a:	8d ab       	std	Y+53, r24	; 0x35

		//음파의 속도는 340m/s 이므로 1cm를 이동하는데 약 29us.
		// 4/2 = 왕복거리
		return distance2;
    4b8c:	8d a9       	ldd	r24, Y+53	; 0x35
    4b8e:	9e a9       	ldd	r25, Y+54	; 0x36

		
}
    4b90:	e6 96       	adiw	r28, 0x36	; 54
    4b92:	0f b6       	in	r0, 0x3f	; 63
    4b94:	f8 94       	cli
    4b96:	de bf       	out	0x3e, r29	; 62
    4b98:	0f be       	out	0x3f, r0	; 63
    4b9a:	cd bf       	out	0x3d, r28	; 61
    4b9c:	cf 91       	pop	r28
    4b9e:	df 91       	pop	r29
    4ba0:	08 95       	ret

00004ba2 <sonic3>:

unsigned short sonic3(){ //좌  
    4ba2:	df 93       	push	r29
    4ba4:	cf 93       	push	r28
    4ba6:	cd b7       	in	r28, 0x3d	; 61
    4ba8:	de b7       	in	r29, 0x3e	; 62
    4baa:	e6 97       	sbiw	r28, 0x36	; 54
    4bac:	0f b6       	in	r0, 0x3f	; 63
    4bae:	f8 94       	cli
    4bb0:	de bf       	out	0x3e, r29	; 62
    4bb2:	0f be       	out	0x3f, r0	; 63
    4bb4:	cd bf       	out	0x3d, r28	; 61
unsigned int distance3;
	int TRIG = 2;
    4bb6:	82 e0       	ldi	r24, 0x02	; 2
    4bb8:	90 e0       	ldi	r25, 0x00	; 0
    4bba:	9c ab       	std	Y+52, r25	; 0x34
    4bbc:	8b ab       	std	Y+51, r24	; 0x33
 	int ECHO = 3;
    4bbe:	83 e0       	ldi	r24, 0x03	; 3
    4bc0:	90 e0       	ldi	r25, 0x00	; 0
    4bc2:	9a ab       	std	Y+50, r25	; 0x32
    4bc4:	89 ab       	std	Y+49, r24	; 0x31
//	int SOUND_VELOCITY = 3400;
	DDRE = ((DDRE | (1<<TRIG)) & ~(1<<ECHO));
    4bc6:	a2 e2       	ldi	r26, 0x22	; 34
    4bc8:	b0 e0       	ldi	r27, 0x00	; 0
    4bca:	e2 e2       	ldi	r30, 0x22	; 34
    4bcc:	f0 e0       	ldi	r31, 0x00	; 0
    4bce:	80 81       	ld	r24, Z
    4bd0:	28 2f       	mov	r18, r24
    4bd2:	81 e0       	ldi	r24, 0x01	; 1
    4bd4:	90 e0       	ldi	r25, 0x00	; 0
    4bd6:	0b a8       	ldd	r0, Y+51	; 0x33
    4bd8:	02 c0       	rjmp	.+4      	; 0x4bde <sonic3+0x3c>
    4bda:	88 0f       	add	r24, r24
    4bdc:	99 1f       	adc	r25, r25
    4bde:	0a 94       	dec	r0
    4be0:	e2 f7       	brpl	.-8      	; 0x4bda <sonic3+0x38>
    4be2:	28 2b       	or	r18, r24
    4be4:	81 e0       	ldi	r24, 0x01	; 1
    4be6:	90 e0       	ldi	r25, 0x00	; 0
    4be8:	09 a8       	ldd	r0, Y+49	; 0x31
    4bea:	02 c0       	rjmp	.+4      	; 0x4bf0 <sonic3+0x4e>
    4bec:	88 0f       	add	r24, r24
    4bee:	99 1f       	adc	r25, r25
    4bf0:	0a 94       	dec	r0
    4bf2:	e2 f7       	brpl	.-8      	; 0x4bec <sonic3+0x4a>
    4bf4:	80 95       	com	r24
    4bf6:	82 23       	and	r24, r18
    4bf8:	8c 93       	st	X, r24
	
	
		TCCR3B = 0x03;
    4bfa:	ea e8       	ldi	r30, 0x8A	; 138
    4bfc:	f0 e0       	ldi	r31, 0x00	; 0
    4bfe:	83 e0       	ldi	r24, 0x03	; 3
    4c00:	80 83       	st	Z, r24
		PORTE &= ~(1<<TRIG);
    4c02:	a3 e2       	ldi	r26, 0x23	; 35
    4c04:	b0 e0       	ldi	r27, 0x00	; 0
    4c06:	e3 e2       	ldi	r30, 0x23	; 35
    4c08:	f0 e0       	ldi	r31, 0x00	; 0
    4c0a:	80 81       	ld	r24, Z
    4c0c:	28 2f       	mov	r18, r24
    4c0e:	81 e0       	ldi	r24, 0x01	; 1
    4c10:	90 e0       	ldi	r25, 0x00	; 0
    4c12:	0b a8       	ldd	r0, Y+51	; 0x33
    4c14:	02 c0       	rjmp	.+4      	; 0x4c1a <sonic3+0x78>
    4c16:	88 0f       	add	r24, r24
    4c18:	99 1f       	adc	r25, r25
    4c1a:	0a 94       	dec	r0
    4c1c:	e2 f7       	brpl	.-8      	; 0x4c16 <sonic3+0x74>
    4c1e:	80 95       	com	r24
    4c20:	82 23       	and	r24, r18
    4c22:	8c 93       	st	X, r24
    4c24:	80 e0       	ldi	r24, 0x00	; 0
    4c26:	90 e0       	ldi	r25, 0x00	; 0
    4c28:	a0 e2       	ldi	r26, 0x20	; 32
    4c2a:	b1 e4       	ldi	r27, 0x41	; 65
    4c2c:	8d a7       	std	Y+45, r24	; 0x2d
    4c2e:	9e a7       	std	Y+46, r25	; 0x2e
    4c30:	af a7       	std	Y+47, r26	; 0x2f
    4c32:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4c34:	6d a5       	ldd	r22, Y+45	; 0x2d
    4c36:	7e a5       	ldd	r23, Y+46	; 0x2e
    4c38:	8f a5       	ldd	r24, Y+47	; 0x2f
    4c3a:	98 a9       	ldd	r25, Y+48	; 0x30
    4c3c:	2b ea       	ldi	r18, 0xAB	; 171
    4c3e:	3a ea       	ldi	r19, 0xAA	; 170
    4c40:	4a ea       	ldi	r20, 0xAA	; 170
    4c42:	50 e4       	ldi	r21, 0x40	; 64
    4c44:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    4c48:	dc 01       	movw	r26, r24
    4c4a:	cb 01       	movw	r24, r22
    4c4c:	89 a7       	std	Y+41, r24	; 0x29
    4c4e:	9a a7       	std	Y+42, r25	; 0x2a
    4c50:	ab a7       	std	Y+43, r26	; 0x2b
    4c52:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    4c54:	69 a5       	ldd	r22, Y+41	; 0x29
    4c56:	7a a5       	ldd	r23, Y+42	; 0x2a
    4c58:	8b a5       	ldd	r24, Y+43	; 0x2b
    4c5a:	9c a5       	ldd	r25, Y+44	; 0x2c
    4c5c:	20 e0       	ldi	r18, 0x00	; 0
    4c5e:	30 e0       	ldi	r19, 0x00	; 0
    4c60:	40 e8       	ldi	r20, 0x80	; 128
    4c62:	5f e3       	ldi	r21, 0x3F	; 63
    4c64:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    4c68:	88 23       	and	r24, r24
    4c6a:	1c f4       	brge	.+6      	; 0x4c72 <sonic3+0xd0>
		__ticks = 1;
    4c6c:	81 e0       	ldi	r24, 0x01	; 1
    4c6e:	88 a7       	std	Y+40, r24	; 0x28
    4c70:	91 c0       	rjmp	.+290    	; 0x4d94 <sonic3+0x1f2>
	else if (__tmp > 255)
    4c72:	69 a5       	ldd	r22, Y+41	; 0x29
    4c74:	7a a5       	ldd	r23, Y+42	; 0x2a
    4c76:	8b a5       	ldd	r24, Y+43	; 0x2b
    4c78:	9c a5       	ldd	r25, Y+44	; 0x2c
    4c7a:	20 e0       	ldi	r18, 0x00	; 0
    4c7c:	30 e0       	ldi	r19, 0x00	; 0
    4c7e:	4f e7       	ldi	r20, 0x7F	; 127
    4c80:	53 e4       	ldi	r21, 0x43	; 67
    4c82:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    4c86:	18 16       	cp	r1, r24
    4c88:	0c f0       	brlt	.+2      	; 0x4c8c <sonic3+0xea>
    4c8a:	7b c0       	rjmp	.+246    	; 0x4d82 <sonic3+0x1e0>
	{
		_delay_ms(__us / 1000.0);
    4c8c:	6d a5       	ldd	r22, Y+45	; 0x2d
    4c8e:	7e a5       	ldd	r23, Y+46	; 0x2e
    4c90:	8f a5       	ldd	r24, Y+47	; 0x2f
    4c92:	98 a9       	ldd	r25, Y+48	; 0x30
    4c94:	20 e0       	ldi	r18, 0x00	; 0
    4c96:	30 e0       	ldi	r19, 0x00	; 0
    4c98:	4a e7       	ldi	r20, 0x7A	; 122
    4c9a:	54 e4       	ldi	r21, 0x44	; 68
    4c9c:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <__divsf3>
    4ca0:	dc 01       	movw	r26, r24
    4ca2:	cb 01       	movw	r24, r22
    4ca4:	8c a3       	std	Y+36, r24	; 0x24
    4ca6:	9d a3       	std	Y+37, r25	; 0x25
    4ca8:	ae a3       	std	Y+38, r26	; 0x26
    4caa:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cac:	6c a1       	ldd	r22, Y+36	; 0x24
    4cae:	7d a1       	ldd	r23, Y+37	; 0x25
    4cb0:	8e a1       	ldd	r24, Y+38	; 0x26
    4cb2:	9f a1       	ldd	r25, Y+39	; 0x27
    4cb4:	20 e0       	ldi	r18, 0x00	; 0
    4cb6:	30 e0       	ldi	r19, 0x00	; 0
    4cb8:	4a e7       	ldi	r20, 0x7A	; 122
    4cba:	55 e4       	ldi	r21, 0x45	; 69
    4cbc:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    4cc0:	dc 01       	movw	r26, r24
    4cc2:	cb 01       	movw	r24, r22
    4cc4:	88 a3       	std	Y+32, r24	; 0x20
    4cc6:	99 a3       	std	Y+33, r25	; 0x21
    4cc8:	aa a3       	std	Y+34, r26	; 0x22
    4cca:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    4ccc:	68 a1       	ldd	r22, Y+32	; 0x20
    4cce:	79 a1       	ldd	r23, Y+33	; 0x21
    4cd0:	8a a1       	ldd	r24, Y+34	; 0x22
    4cd2:	9b a1       	ldd	r25, Y+35	; 0x23
    4cd4:	20 e0       	ldi	r18, 0x00	; 0
    4cd6:	30 e0       	ldi	r19, 0x00	; 0
    4cd8:	40 e8       	ldi	r20, 0x80	; 128
    4cda:	5f e3       	ldi	r21, 0x3F	; 63
    4cdc:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    4ce0:	88 23       	and	r24, r24
    4ce2:	2c f4       	brge	.+10     	; 0x4cee <sonic3+0x14c>
		__ticks = 1;
    4ce4:	81 e0       	ldi	r24, 0x01	; 1
    4ce6:	90 e0       	ldi	r25, 0x00	; 0
    4ce8:	9f 8f       	std	Y+31, r25	; 0x1f
    4cea:	8e 8f       	std	Y+30, r24	; 0x1e
    4cec:	3f c0       	rjmp	.+126    	; 0x4d6c <sonic3+0x1ca>
	else if (__tmp > 65535)
    4cee:	68 a1       	ldd	r22, Y+32	; 0x20
    4cf0:	79 a1       	ldd	r23, Y+33	; 0x21
    4cf2:	8a a1       	ldd	r24, Y+34	; 0x22
    4cf4:	9b a1       	ldd	r25, Y+35	; 0x23
    4cf6:	20 e0       	ldi	r18, 0x00	; 0
    4cf8:	3f ef       	ldi	r19, 0xFF	; 255
    4cfa:	4f e7       	ldi	r20, 0x7F	; 127
    4cfc:	57 e4       	ldi	r21, 0x47	; 71
    4cfe:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    4d02:	18 16       	cp	r1, r24
    4d04:	4c f5       	brge	.+82     	; 0x4d58 <sonic3+0x1b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d06:	6c a1       	ldd	r22, Y+36	; 0x24
    4d08:	7d a1       	ldd	r23, Y+37	; 0x25
    4d0a:	8e a1       	ldd	r24, Y+38	; 0x26
    4d0c:	9f a1       	ldd	r25, Y+39	; 0x27
    4d0e:	20 e0       	ldi	r18, 0x00	; 0
    4d10:	30 e0       	ldi	r19, 0x00	; 0
    4d12:	40 e2       	ldi	r20, 0x20	; 32
    4d14:	51 e4       	ldi	r21, 0x41	; 65
    4d16:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    4d1a:	dc 01       	movw	r26, r24
    4d1c:	cb 01       	movw	r24, r22
    4d1e:	bc 01       	movw	r22, r24
    4d20:	cd 01       	movw	r24, r26
    4d22:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    4d26:	dc 01       	movw	r26, r24
    4d28:	cb 01       	movw	r24, r22
    4d2a:	9f 8f       	std	Y+31, r25	; 0x1f
    4d2c:	8e 8f       	std	Y+30, r24	; 0x1e
    4d2e:	0f c0       	rjmp	.+30     	; 0x4d4e <sonic3+0x1ac>
    4d30:	80 e9       	ldi	r24, 0x90	; 144
    4d32:	91 e0       	ldi	r25, 0x01	; 1
    4d34:	9d 8f       	std	Y+29, r25	; 0x1d
    4d36:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4d38:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4d3a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4d3c:	01 97       	sbiw	r24, 0x01	; 1
    4d3e:	f1 f7       	brne	.-4      	; 0x4d3c <sonic3+0x19a>
    4d40:	9d 8f       	std	Y+29, r25	; 0x1d
    4d42:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d44:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4d46:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4d48:	01 97       	sbiw	r24, 0x01	; 1
    4d4a:	9f 8f       	std	Y+31, r25	; 0x1f
    4d4c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d4e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4d50:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4d52:	00 97       	sbiw	r24, 0x00	; 0
    4d54:	69 f7       	brne	.-38     	; 0x4d30 <sonic3+0x18e>
    4d56:	24 c0       	rjmp	.+72     	; 0x4da0 <sonic3+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d58:	68 a1       	ldd	r22, Y+32	; 0x20
    4d5a:	79 a1       	ldd	r23, Y+33	; 0x21
    4d5c:	8a a1       	ldd	r24, Y+34	; 0x22
    4d5e:	9b a1       	ldd	r25, Y+35	; 0x23
    4d60:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    4d64:	dc 01       	movw	r26, r24
    4d66:	cb 01       	movw	r24, r22
    4d68:	9f 8f       	std	Y+31, r25	; 0x1f
    4d6a:	8e 8f       	std	Y+30, r24	; 0x1e
    4d6c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4d6e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4d70:	9b 8f       	std	Y+27, r25	; 0x1b
    4d72:	8a 8f       	std	Y+26, r24	; 0x1a
    4d74:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4d76:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4d78:	01 97       	sbiw	r24, 0x01	; 1
    4d7a:	f1 f7       	brne	.-4      	; 0x4d78 <sonic3+0x1d6>
    4d7c:	9b 8f       	std	Y+27, r25	; 0x1b
    4d7e:	8a 8f       	std	Y+26, r24	; 0x1a
    4d80:	0f c0       	rjmp	.+30     	; 0x4da0 <sonic3+0x1fe>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4d82:	69 a5       	ldd	r22, Y+41	; 0x29
    4d84:	7a a5       	ldd	r23, Y+42	; 0x2a
    4d86:	8b a5       	ldd	r24, Y+43	; 0x2b
    4d88:	9c a5       	ldd	r25, Y+44	; 0x2c
    4d8a:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    4d8e:	dc 01       	movw	r26, r24
    4d90:	cb 01       	movw	r24, r22
    4d92:	88 a7       	std	Y+40, r24	; 0x28
    4d94:	88 a5       	ldd	r24, Y+40	; 0x28
    4d96:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4d98:	89 8d       	ldd	r24, Y+25	; 0x19
    4d9a:	8a 95       	dec	r24
    4d9c:	f1 f7       	brne	.-4      	; 0x4d9a <sonic3+0x1f8>
    4d9e:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(10);
		PORTE |= (1<<TRIG);
    4da0:	a3 e2       	ldi	r26, 0x23	; 35
    4da2:	b0 e0       	ldi	r27, 0x00	; 0
    4da4:	e3 e2       	ldi	r30, 0x23	; 35
    4da6:	f0 e0       	ldi	r31, 0x00	; 0
    4da8:	80 81       	ld	r24, Z
    4daa:	28 2f       	mov	r18, r24
    4dac:	81 e0       	ldi	r24, 0x01	; 1
    4dae:	90 e0       	ldi	r25, 0x00	; 0
    4db0:	0b a8       	ldd	r0, Y+51	; 0x33
    4db2:	02 c0       	rjmp	.+4      	; 0x4db8 <sonic3+0x216>
    4db4:	88 0f       	add	r24, r24
    4db6:	99 1f       	adc	r25, r25
    4db8:	0a 94       	dec	r0
    4dba:	e2 f7       	brpl	.-8      	; 0x4db4 <sonic3+0x212>
    4dbc:	82 2b       	or	r24, r18
    4dbe:	8c 93       	st	X, r24
    4dc0:	80 e0       	ldi	r24, 0x00	; 0
    4dc2:	90 e0       	ldi	r25, 0x00	; 0
    4dc4:	a0 e2       	ldi	r26, 0x20	; 32
    4dc6:	b1 e4       	ldi	r27, 0x41	; 65
    4dc8:	8d 8b       	std	Y+21, r24	; 0x15
    4dca:	9e 8b       	std	Y+22, r25	; 0x16
    4dcc:	af 8b       	std	Y+23, r26	; 0x17
    4dce:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4dd0:	6d 89       	ldd	r22, Y+21	; 0x15
    4dd2:	7e 89       	ldd	r23, Y+22	; 0x16
    4dd4:	8f 89       	ldd	r24, Y+23	; 0x17
    4dd6:	98 8d       	ldd	r25, Y+24	; 0x18
    4dd8:	2b ea       	ldi	r18, 0xAB	; 171
    4dda:	3a ea       	ldi	r19, 0xAA	; 170
    4ddc:	4a ea       	ldi	r20, 0xAA	; 170
    4dde:	50 e4       	ldi	r21, 0x40	; 64
    4de0:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    4de4:	dc 01       	movw	r26, r24
    4de6:	cb 01       	movw	r24, r22
    4de8:	89 8b       	std	Y+17, r24	; 0x11
    4dea:	9a 8b       	std	Y+18, r25	; 0x12
    4dec:	ab 8b       	std	Y+19, r26	; 0x13
    4dee:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4df0:	69 89       	ldd	r22, Y+17	; 0x11
    4df2:	7a 89       	ldd	r23, Y+18	; 0x12
    4df4:	8b 89       	ldd	r24, Y+19	; 0x13
    4df6:	9c 89       	ldd	r25, Y+20	; 0x14
    4df8:	20 e0       	ldi	r18, 0x00	; 0
    4dfa:	30 e0       	ldi	r19, 0x00	; 0
    4dfc:	40 e8       	ldi	r20, 0x80	; 128
    4dfe:	5f e3       	ldi	r21, 0x3F	; 63
    4e00:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    4e04:	88 23       	and	r24, r24
    4e06:	1c f4       	brge	.+6      	; 0x4e0e <sonic3+0x26c>
		__ticks = 1;
    4e08:	81 e0       	ldi	r24, 0x01	; 1
    4e0a:	88 8b       	std	Y+16, r24	; 0x10
    4e0c:	91 c0       	rjmp	.+290    	; 0x4f30 <sonic3+0x38e>
	else if (__tmp > 255)
    4e0e:	69 89       	ldd	r22, Y+17	; 0x11
    4e10:	7a 89       	ldd	r23, Y+18	; 0x12
    4e12:	8b 89       	ldd	r24, Y+19	; 0x13
    4e14:	9c 89       	ldd	r25, Y+20	; 0x14
    4e16:	20 e0       	ldi	r18, 0x00	; 0
    4e18:	30 e0       	ldi	r19, 0x00	; 0
    4e1a:	4f e7       	ldi	r20, 0x7F	; 127
    4e1c:	53 e4       	ldi	r21, 0x43	; 67
    4e1e:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    4e22:	18 16       	cp	r1, r24
    4e24:	0c f0       	brlt	.+2      	; 0x4e28 <sonic3+0x286>
    4e26:	7b c0       	rjmp	.+246    	; 0x4f1e <sonic3+0x37c>
	{
		_delay_ms(__us / 1000.0);
    4e28:	6d 89       	ldd	r22, Y+21	; 0x15
    4e2a:	7e 89       	ldd	r23, Y+22	; 0x16
    4e2c:	8f 89       	ldd	r24, Y+23	; 0x17
    4e2e:	98 8d       	ldd	r25, Y+24	; 0x18
    4e30:	20 e0       	ldi	r18, 0x00	; 0
    4e32:	30 e0       	ldi	r19, 0x00	; 0
    4e34:	4a e7       	ldi	r20, 0x7A	; 122
    4e36:	54 e4       	ldi	r21, 0x44	; 68
    4e38:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <__divsf3>
    4e3c:	dc 01       	movw	r26, r24
    4e3e:	cb 01       	movw	r24, r22
    4e40:	8c 87       	std	Y+12, r24	; 0x0c
    4e42:	9d 87       	std	Y+13, r25	; 0x0d
    4e44:	ae 87       	std	Y+14, r26	; 0x0e
    4e46:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e48:	6c 85       	ldd	r22, Y+12	; 0x0c
    4e4a:	7d 85       	ldd	r23, Y+13	; 0x0d
    4e4c:	8e 85       	ldd	r24, Y+14	; 0x0e
    4e4e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4e50:	20 e0       	ldi	r18, 0x00	; 0
    4e52:	30 e0       	ldi	r19, 0x00	; 0
    4e54:	4a e7       	ldi	r20, 0x7A	; 122
    4e56:	55 e4       	ldi	r21, 0x45	; 69
    4e58:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    4e5c:	dc 01       	movw	r26, r24
    4e5e:	cb 01       	movw	r24, r22
    4e60:	88 87       	std	Y+8, r24	; 0x08
    4e62:	99 87       	std	Y+9, r25	; 0x09
    4e64:	aa 87       	std	Y+10, r26	; 0x0a
    4e66:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4e68:	68 85       	ldd	r22, Y+8	; 0x08
    4e6a:	79 85       	ldd	r23, Y+9	; 0x09
    4e6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4e6e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4e70:	20 e0       	ldi	r18, 0x00	; 0
    4e72:	30 e0       	ldi	r19, 0x00	; 0
    4e74:	40 e8       	ldi	r20, 0x80	; 128
    4e76:	5f e3       	ldi	r21, 0x3F	; 63
    4e78:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__ltsf2>
    4e7c:	88 23       	and	r24, r24
    4e7e:	2c f4       	brge	.+10     	; 0x4e8a <sonic3+0x2e8>
		__ticks = 1;
    4e80:	81 e0       	ldi	r24, 0x01	; 1
    4e82:	90 e0       	ldi	r25, 0x00	; 0
    4e84:	9f 83       	std	Y+7, r25	; 0x07
    4e86:	8e 83       	std	Y+6, r24	; 0x06
    4e88:	3f c0       	rjmp	.+126    	; 0x4f08 <sonic3+0x366>
	else if (__tmp > 65535)
    4e8a:	68 85       	ldd	r22, Y+8	; 0x08
    4e8c:	79 85       	ldd	r23, Y+9	; 0x09
    4e8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4e90:	9b 85       	ldd	r25, Y+11	; 0x0b
    4e92:	20 e0       	ldi	r18, 0x00	; 0
    4e94:	3f ef       	ldi	r19, 0xFF	; 255
    4e96:	4f e7       	ldi	r20, 0x7F	; 127
    4e98:	57 e4       	ldi	r21, 0x47	; 71
    4e9a:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__gtsf2>
    4e9e:	18 16       	cp	r1, r24
    4ea0:	4c f5       	brge	.+82     	; 0x4ef4 <sonic3+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ea2:	6c 85       	ldd	r22, Y+12	; 0x0c
    4ea4:	7d 85       	ldd	r23, Y+13	; 0x0d
    4ea6:	8e 85       	ldd	r24, Y+14	; 0x0e
    4ea8:	9f 85       	ldd	r25, Y+15	; 0x0f
    4eaa:	20 e0       	ldi	r18, 0x00	; 0
    4eac:	30 e0       	ldi	r19, 0x00	; 0
    4eae:	40 e2       	ldi	r20, 0x20	; 32
    4eb0:	51 e4       	ldi	r21, 0x41	; 65
    4eb2:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulsf3>
    4eb6:	dc 01       	movw	r26, r24
    4eb8:	cb 01       	movw	r24, r22
    4eba:	bc 01       	movw	r22, r24
    4ebc:	cd 01       	movw	r24, r26
    4ebe:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    4ec2:	dc 01       	movw	r26, r24
    4ec4:	cb 01       	movw	r24, r22
    4ec6:	9f 83       	std	Y+7, r25	; 0x07
    4ec8:	8e 83       	std	Y+6, r24	; 0x06
    4eca:	0f c0       	rjmp	.+30     	; 0x4eea <sonic3+0x348>
    4ecc:	80 e9       	ldi	r24, 0x90	; 144
    4ece:	91 e0       	ldi	r25, 0x01	; 1
    4ed0:	9d 83       	std	Y+5, r25	; 0x05
    4ed2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4ed4:	8c 81       	ldd	r24, Y+4	; 0x04
    4ed6:	9d 81       	ldd	r25, Y+5	; 0x05
    4ed8:	01 97       	sbiw	r24, 0x01	; 1
    4eda:	f1 f7       	brne	.-4      	; 0x4ed8 <sonic3+0x336>
    4edc:	9d 83       	std	Y+5, r25	; 0x05
    4ede:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ee0:	8e 81       	ldd	r24, Y+6	; 0x06
    4ee2:	9f 81       	ldd	r25, Y+7	; 0x07
    4ee4:	01 97       	sbiw	r24, 0x01	; 1
    4ee6:	9f 83       	std	Y+7, r25	; 0x07
    4ee8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4eea:	8e 81       	ldd	r24, Y+6	; 0x06
    4eec:	9f 81       	ldd	r25, Y+7	; 0x07
    4eee:	00 97       	sbiw	r24, 0x00	; 0
    4ef0:	69 f7       	brne	.-38     	; 0x4ecc <sonic3+0x32a>
    4ef2:	24 c0       	rjmp	.+72     	; 0x4f3c <sonic3+0x39a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ef4:	68 85       	ldd	r22, Y+8	; 0x08
    4ef6:	79 85       	ldd	r23, Y+9	; 0x09
    4ef8:	8a 85       	ldd	r24, Y+10	; 0x0a
    4efa:	9b 85       	ldd	r25, Y+11	; 0x0b
    4efc:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    4f00:	dc 01       	movw	r26, r24
    4f02:	cb 01       	movw	r24, r22
    4f04:	9f 83       	std	Y+7, r25	; 0x07
    4f06:	8e 83       	std	Y+6, r24	; 0x06
    4f08:	8e 81       	ldd	r24, Y+6	; 0x06
    4f0a:	9f 81       	ldd	r25, Y+7	; 0x07
    4f0c:	9b 83       	std	Y+3, r25	; 0x03
    4f0e:	8a 83       	std	Y+2, r24	; 0x02
    4f10:	8a 81       	ldd	r24, Y+2	; 0x02
    4f12:	9b 81       	ldd	r25, Y+3	; 0x03
    4f14:	01 97       	sbiw	r24, 0x01	; 1
    4f16:	f1 f7       	brne	.-4      	; 0x4f14 <sonic3+0x372>
    4f18:	9b 83       	std	Y+3, r25	; 0x03
    4f1a:	8a 83       	std	Y+2, r24	; 0x02
    4f1c:	0f c0       	rjmp	.+30     	; 0x4f3c <sonic3+0x39a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4f1e:	69 89       	ldd	r22, Y+17	; 0x11
    4f20:	7a 89       	ldd	r23, Y+18	; 0x12
    4f22:	8b 89       	ldd	r24, Y+19	; 0x13
    4f24:	9c 89       	ldd	r25, Y+20	; 0x14
    4f26:	0e 94 25 29 	call	0x524a	; 0x524a <__fixunssfsi>
    4f2a:	dc 01       	movw	r26, r24
    4f2c:	cb 01       	movw	r24, r22
    4f2e:	88 8b       	std	Y+16, r24	; 0x10
    4f30:	88 89       	ldd	r24, Y+16	; 0x10
    4f32:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4f34:	89 81       	ldd	r24, Y+1	; 0x01
    4f36:	8a 95       	dec	r24
    4f38:	f1 f7       	brne	.-4      	; 0x4f36 <sonic3+0x394>
    4f3a:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(10);
		PORTE &= ~(1<<TRIG);
    4f3c:	a3 e2       	ldi	r26, 0x23	; 35
    4f3e:	b0 e0       	ldi	r27, 0x00	; 0
    4f40:	e3 e2       	ldi	r30, 0x23	; 35
    4f42:	f0 e0       	ldi	r31, 0x00	; 0
    4f44:	80 81       	ld	r24, Z
    4f46:	28 2f       	mov	r18, r24
    4f48:	81 e0       	ldi	r24, 0x01	; 1
    4f4a:	90 e0       	ldi	r25, 0x00	; 0
    4f4c:	0b a8       	ldd	r0, Y+51	; 0x33
    4f4e:	02 c0       	rjmp	.+4      	; 0x4f54 <sonic3+0x3b2>
    4f50:	88 0f       	add	r24, r24
    4f52:	99 1f       	adc	r25, r25
    4f54:	0a 94       	dec	r0
    4f56:	e2 f7       	brpl	.-8      	; 0x4f50 <sonic3+0x3ae>
    4f58:	80 95       	com	r24
    4f5a:	82 23       	and	r24, r18
    4f5c:	8c 93       	st	X, r24
		while(!(PINE & (1<<ECHO)));
    4f5e:	e1 e2       	ldi	r30, 0x21	; 33
    4f60:	f0 e0       	ldi	r31, 0x00	; 0
    4f62:	80 81       	ld	r24, Z
    4f64:	88 2f       	mov	r24, r24
    4f66:	90 e0       	ldi	r25, 0x00	; 0
    4f68:	09 a8       	ldd	r0, Y+49	; 0x31
    4f6a:	02 c0       	rjmp	.+4      	; 0x4f70 <sonic3+0x3ce>
    4f6c:	95 95       	asr	r25
    4f6e:	87 95       	ror	r24
    4f70:	0a 94       	dec	r0
    4f72:	e2 f7       	brpl	.-8      	; 0x4f6c <sonic3+0x3ca>
    4f74:	81 70       	andi	r24, 0x01	; 1
    4f76:	90 70       	andi	r25, 0x00	; 0
    4f78:	00 97       	sbiw	r24, 0x00	; 0
    4f7a:	89 f3       	breq	.-30     	; 0x4f5e <sonic3+0x3bc>
		TCNT3 = 0x0000;
    4f7c:	e8 e8       	ldi	r30, 0x88	; 136
    4f7e:	f0 e0       	ldi	r31, 0x00	; 0
    4f80:	11 82       	std	Z+1, r1	; 0x01
    4f82:	10 82       	st	Z, r1
		while(PINE & (1<<ECHO));
    4f84:	e1 e2       	ldi	r30, 0x21	; 33
    4f86:	f0 e0       	ldi	r31, 0x00	; 0
    4f88:	80 81       	ld	r24, Z
    4f8a:	88 2f       	mov	r24, r24
    4f8c:	90 e0       	ldi	r25, 0x00	; 0
    4f8e:	09 a8       	ldd	r0, Y+49	; 0x31
    4f90:	02 c0       	rjmp	.+4      	; 0x4f96 <sonic3+0x3f4>
    4f92:	95 95       	asr	r25
    4f94:	87 95       	ror	r24
    4f96:	0a 94       	dec	r0
    4f98:	e2 f7       	brpl	.-8      	; 0x4f92 <sonic3+0x3f0>
    4f9a:	81 70       	andi	r24, 0x01	; 1
    4f9c:	90 70       	andi	r25, 0x00	; 0
    4f9e:	88 23       	and	r24, r24
    4fa0:	89 f7       	brne	.-30     	; 0x4f84 <sonic3+0x3e2>
		TCCR3B = 0x00;
    4fa2:	ea e8       	ldi	r30, 0x8A	; 138
    4fa4:	f0 e0       	ldi	r31, 0x00	; 0
    4fa6:	10 82       	st	Z, r1
		distance3 = (unsigned int)(SOUND_VELOCITY * (TCNT3 * 4 / 2) / 1000);
    4fa8:	e8 e8       	ldi	r30, 0x88	; 136
    4faa:	f0 e0       	ldi	r31, 0x00	; 0
    4fac:	80 81       	ld	r24, Z
    4fae:	91 81       	ldd	r25, Z+1	; 0x01
    4fb0:	88 0f       	add	r24, r24
    4fb2:	99 1f       	adc	r25, r25
    4fb4:	88 0f       	add	r24, r24
    4fb6:	99 1f       	adc	r25, r25
    4fb8:	96 95       	lsr	r25
    4fba:	87 95       	ror	r24
    4fbc:	cc 01       	movw	r24, r24
    4fbe:	a0 e0       	ldi	r26, 0x00	; 0
    4fc0:	b0 e0       	ldi	r27, 0x00	; 0
    4fc2:	24 e5       	ldi	r18, 0x54	; 84
    4fc4:	31 e0       	ldi	r19, 0x01	; 1
    4fc6:	40 e0       	ldi	r20, 0x00	; 0
    4fc8:	50 e0       	ldi	r21, 0x00	; 0
    4fca:	bc 01       	movw	r22, r24
    4fcc:	cd 01       	movw	r24, r26
    4fce:	0e 94 2b 2f 	call	0x5e56	; 0x5e56 <__mulsi3>
    4fd2:	dc 01       	movw	r26, r24
    4fd4:	cb 01       	movw	r24, r22
    4fd6:	28 ee       	ldi	r18, 0xE8	; 232
    4fd8:	33 e0       	ldi	r19, 0x03	; 3
    4fda:	40 e0       	ldi	r20, 0x00	; 0
    4fdc:	50 e0       	ldi	r21, 0x00	; 0
    4fde:	bc 01       	movw	r22, r24
    4fe0:	cd 01       	movw	r24, r26
    4fe2:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <__udivmodsi4>
    4fe6:	da 01       	movw	r26, r20
    4fe8:	c9 01       	movw	r24, r18
    4fea:	9e ab       	std	Y+54, r25	; 0x36
    4fec:	8d ab       	std	Y+53, r24	; 0x35

		//음파의 속도는 340m/s 이므로 1cm를 이동하는데 약 29us.
		// 4/2 = 왕복거리
		return distance3;
    4fee:	8d a9       	ldd	r24, Y+53	; 0x35
    4ff0:	9e a9       	ldd	r25, Y+54	; 0x36

		
}
    4ff2:	e6 96       	adiw	r28, 0x36	; 54
    4ff4:	0f b6       	in	r0, 0x3f	; 63
    4ff6:	f8 94       	cli
    4ff8:	de bf       	out	0x3e, r29	; 62
    4ffa:	0f be       	out	0x3f, r0	; 63
    4ffc:	cd bf       	out	0x3d, r28	; 61
    4ffe:	cf 91       	pop	r28
    5000:	df 91       	pop	r29
    5002:	08 95       	ret

00005004 <uart_init>:

int uart_getchar_stream (FILE *stream );

FILE uart_str = FDEV_SETUP_STREAM(uart_putchar_stream, uart_getchar_stream, _FDEV_SETUP_RW);

void uart_init (void){
    5004:	df 93       	push	r29
    5006:	cf 93       	push	r28
    5008:	cd b7       	in	r28, 0x3d	; 61
    500a:	de b7       	in	r29, 0x3e	; 62

// 보드레이트 설정  DEFINE 한 F_CPU 변수로 값이 결정됨.

UBRR0L = ((F_CPU/(16UL* UART_BAUD))- 1);
    500c:	e9 e2       	ldi	r30, 0x29	; 41
    500e:	f0 e0       	ldi	r31, 0x00	; 0
    5010:	87 e6       	ldi	r24, 0x67	; 103
    5012:	80 83       	st	Z, r24

// Tx,Rx 초기화 

UCSR0B = (1<<TXEN0) | (1<<RXEN0); // 송신부가 동작하거나, 수신부가 동작할때 비트 shift 연산으로 1 의 값을 송수신 될때 shgit 시킴.
    5014:	ea e2       	ldi	r30, 0x2A	; 42
    5016:	f0 e0       	ldi	r31, 0x00	; 0
    5018:	88 e1       	ldi	r24, 0x18	; 24
    501a:	80 83       	st	Z, r24

// 8N1

UCSR0C = 3<<UCSZ00;
    501c:	e5 e9       	ldi	r30, 0x95	; 149
    501e:	f0 e0       	ldi	r31, 0x00	; 0
    5020:	86 e0       	ldi	r24, 0x06	; 6
    5022:	80 83       	st	Z, r24

// stdio set to uart

stdout = stdin = stderr= &uart_str;}
    5024:	85 e6       	ldi	r24, 0x65	; 101
    5026:	91 e0       	ldi	r25, 0x01	; 1
    5028:	90 93 d5 01 	sts	0x01D5, r25
    502c:	80 93 d4 01 	sts	0x01D4, r24
    5030:	80 91 d4 01 	lds	r24, 0x01D4
    5034:	90 91 d5 01 	lds	r25, 0x01D5
    5038:	90 93 d1 01 	sts	0x01D1, r25
    503c:	80 93 d0 01 	sts	0x01D0, r24
    5040:	80 91 d0 01 	lds	r24, 0x01D0
    5044:	90 91 d1 01 	lds	r25, 0x01D1
    5048:	90 93 d3 01 	sts	0x01D3, r25
    504c:	80 93 d2 01 	sts	0x01D2, r24
    5050:	cf 91       	pop	r28
    5052:	df 91       	pop	r29
    5054:	08 95       	ret

00005056 <uart_putchar>:

// uart 에서 데이터를 전송하는 코드 
int uart_putchar (char c){
    5056:	df 93       	push	r29
    5058:	cf 93       	push	r28
    505a:	0f 92       	push	r0
    505c:	cd b7       	in	r28, 0x3d	; 61
    505e:	de b7       	in	r29, 0x3e	; 62
    5060:	89 83       	std	Y+1, r24	; 0x01

loop_until_bit_is_set(UCSR0A, UDRE0 );
    5062:	eb e2       	ldi	r30, 0x2B	; 43
    5064:	f0 e0       	ldi	r31, 0x00	; 0
    5066:	80 81       	ld	r24, Z
    5068:	88 2f       	mov	r24, r24
    506a:	90 e0       	ldi	r25, 0x00	; 0
    506c:	80 72       	andi	r24, 0x20	; 32
    506e:	90 70       	andi	r25, 0x00	; 0
    5070:	00 97       	sbiw	r24, 0x00	; 0
    5072:	b9 f3       	breq	.-18     	; 0x5062 <uart_putchar+0xc>

UDR0=c;
    5074:	ec e2       	ldi	r30, 0x2C	; 44
    5076:	f0 e0       	ldi	r31, 0x00	; 0
    5078:	89 81       	ldd	r24, Y+1	; 0x01
    507a:	80 83       	st	Z, r24

return 0;}
    507c:	80 e0       	ldi	r24, 0x00	; 0
    507e:	90 e0       	ldi	r25, 0x00	; 0
    5080:	0f 90       	pop	r0
    5082:	cf 91       	pop	r28
    5084:	df 91       	pop	r29
    5086:	08 95       	ret

00005088 <uart_getchar>:

// uart 에서 데이터를 입력받는 코드
int uart_getchar (void ){
    5088:	df 93       	push	r29
    508a:	cf 93       	push	r28
    508c:	cd b7       	in	r28, 0x3d	; 61
    508e:	de b7       	in	r29, 0x3e	; 62

loop_until_bit_is_set(UCSR0A, RXC0);
    5090:	eb e2       	ldi	r30, 0x2B	; 43
    5092:	f0 e0       	ldi	r31, 0x00	; 0
    5094:	80 81       	ld	r24, Z
    5096:	88 23       	and	r24, r24
    5098:	dc f7       	brge	.-10     	; 0x5090 <uart_getchar+0x8>

return UDR0;}
    509a:	ec e2       	ldi	r30, 0x2C	; 44
    509c:	f0 e0       	ldi	r31, 0x00	; 0
    509e:	80 81       	ld	r24, Z
    50a0:	88 2f       	mov	r24, r24
    50a2:	90 e0       	ldi	r25, 0x00	; 0
    50a4:	cf 91       	pop	r28
    50a6:	df 91       	pop	r29
    50a8:	08 95       	ret

000050aa <uart_kbhit>:

uint8_t uart_kbhit (void )
{ uint8_t hit = 0;
    50aa:	df 93       	push	r29
    50ac:	cf 93       	push	r28
    50ae:	0f 92       	push	r0
    50b0:	cd b7       	in	r28, 0x3d	; 61
    50b2:	de b7       	in	r29, 0x3e	; 62
    50b4:	19 82       	std	Y+1, r1	; 0x01

if(UCSR0A & (1<<RXC0)) // RXC0 에서 쉬프트와 동시에 UCSROA 가 set 될때 hit 를 set 시키고 return 함.
    50b6:	eb e2       	ldi	r30, 0x2B	; 43
    50b8:	f0 e0       	ldi	r31, 0x00	; 0
    50ba:	80 81       	ld	r24, Z
    50bc:	88 23       	and	r24, r24
    50be:	14 f4       	brge	.+4      	; 0x50c4 <uart_kbhit+0x1a>
hit=1;
    50c0:	81 e0       	ldi	r24, 0x01	; 1
    50c2:	89 83       	std	Y+1, r24	; 0x01
return hit;}
    50c4:	89 81       	ldd	r24, Y+1	; 0x01
    50c6:	0f 90       	pop	r0
    50c8:	cf 91       	pop	r28
    50ca:	df 91       	pop	r29
    50cc:	08 95       	ret

000050ce <uart_putchar_stream>:

int uart_putchar_stream (char c, FILE * stream){
    50ce:	df 93       	push	r29
    50d0:	cf 93       	push	r28
    50d2:	00 d0       	rcall	.+0      	; 0x50d4 <uart_putchar_stream+0x6>
    50d4:	0f 92       	push	r0
    50d6:	cd b7       	in	r28, 0x3d	; 61
    50d8:	de b7       	in	r29, 0x3e	; 62
    50da:	89 83       	std	Y+1, r24	; 0x01
    50dc:	7b 83       	std	Y+3, r23	; 0x03
    50de:	6a 83       	std	Y+2, r22	; 0x02

if(c == '\n') // c 의 배열이 끝나면. (개행으로 구분함.) 값을 출력함 
    50e0:	89 81       	ldd	r24, Y+1	; 0x01
    50e2:	8a 30       	cpi	r24, 0x0A	; 10
    50e4:	31 f4       	brne	.+12     	; 0x50f2 <uart_putchar_stream+0x24>

uart_putchar_stream('\r', stream);
    50e6:	2a 81       	ldd	r18, Y+2	; 0x02
    50e8:	3b 81       	ldd	r19, Y+3	; 0x03
    50ea:	8d e0       	ldi	r24, 0x0D	; 13
    50ec:	b9 01       	movw	r22, r18
    50ee:	0e 94 67 28 	call	0x50ce	; 0x50ce <uart_putchar_stream>

loop_until_bit_is_set(UCSR0A, UDRE0);
    50f2:	eb e2       	ldi	r30, 0x2B	; 43
    50f4:	f0 e0       	ldi	r31, 0x00	; 0
    50f6:	80 81       	ld	r24, Z
    50f8:	88 2f       	mov	r24, r24
    50fa:	90 e0       	ldi	r25, 0x00	; 0
    50fc:	80 72       	andi	r24, 0x20	; 32
    50fe:	90 70       	andi	r25, 0x00	; 0
    5100:	00 97       	sbiw	r24, 0x00	; 0
    5102:	b9 f3       	breq	.-18     	; 0x50f2 <uart_putchar_stream+0x24>

UDR0=c;
    5104:	ec e2       	ldi	r30, 0x2C	; 44
    5106:	f0 e0       	ldi	r31, 0x00	; 0
    5108:	89 81       	ldd	r24, Y+1	; 0x01
    510a:	80 83       	st	Z, r24

return 0;}
    510c:	80 e0       	ldi	r24, 0x00	; 0
    510e:	90 e0       	ldi	r25, 0x00	; 0
    5110:	0f 90       	pop	r0
    5112:	0f 90       	pop	r0
    5114:	0f 90       	pop	r0
    5116:	cf 91       	pop	r28
    5118:	df 91       	pop	r29
    511a:	08 95       	ret

0000511c <uart_getchar_stream>:

int uart_getchar_stream (FILE *stream){
    511c:	df 93       	push	r29
    511e:	cf 93       	push	r28
    5120:	cd b7       	in	r28, 0x3d	; 61
    5122:	de b7       	in	r29, 0x3e	; 62
    5124:	27 97       	sbiw	r28, 0x07	; 7
    5126:	0f b6       	in	r0, 0x3f	; 63
    5128:	f8 94       	cli
    512a:	de bf       	out	0x3e, r29	; 62
    512c:	0f be       	out	0x3f, r0	; 63
    512e:	cd bf       	out	0x3d, r28	; 61
    5130:	9d 83       	std	Y+5, r25	; 0x05
    5132:	8c 83       	std	Y+4, r24	; 0x04
static char rxb[RX_BUFSIZE];

static char * bp;

// 버퍼에 데이터가 들어 올때까지 대기
if(bp == 0){
    5134:	80 91 7c 01 	lds	r24, 0x017C
    5138:	90 91 7d 01 	lds	r25, 0x017D
    513c:	00 97       	sbiw	r24, 0x00	; 0
    513e:	09 f0       	breq	.+2      	; 0x5142 <uart_getchar_stream+0x26>
    5140:	61 c0       	rjmp	.+194    	; 0x5204 <uart_getchar_stream+0xe8>
	cp=rxb ;
    5142:	8e e7       	ldi	r24, 0x7E	; 126
    5144:	91 e0       	ldi	r25, 0x01	; 1
    5146:	9a 83       	std	Y+2, r25	; 0x02
    5148:	89 83       	std	Y+1, r24	; 0x01
while(1){

loop_until_bit_is_set(UCSR0A, RXC0 );
    514a:	eb e2       	ldi	r30, 0x2B	; 43
    514c:	f0 e0       	ldi	r31, 0x00	; 0
    514e:	80 81       	ld	r24, Z
    5150:	88 23       	and	r24, r24
    5152:	dc f7       	brge	.-10     	; 0x514a <uart_getchar_stream+0x2e>

if (UCSR0A & (1<<FE0))
    5154:	eb e2       	ldi	r30, 0x2B	; 43
    5156:	f0 e0       	ldi	r31, 0x00	; 0
    5158:	80 81       	ld	r24, Z
    515a:	88 2f       	mov	r24, r24
    515c:	90 e0       	ldi	r25, 0x00	; 0
    515e:	80 71       	andi	r24, 0x10	; 16
    5160:	90 70       	andi	r25, 0x00	; 0
    5162:	00 97       	sbiw	r24, 0x00	; 0
    5164:	29 f0       	breq	.+10     	; 0x5170 <uart_getchar_stream+0x54>
	return _FDEV_EOF;
    5166:	2e ef       	ldi	r18, 0xFE	; 254
    5168:	3f ef       	ldi	r19, 0xFF	; 255
    516a:	3f 83       	std	Y+7, r19	; 0x07
    516c:	2e 83       	std	Y+6, r18	; 0x06
    516e:	62 c0       	rjmp	.+196    	; 0x5234 <uart_getchar_stream+0x118>

if (UCSR0A & (1<<DOR0))
    5170:	eb e2       	ldi	r30, 0x2B	; 43
    5172:	f0 e0       	ldi	r31, 0x00	; 0
    5174:	80 81       	ld	r24, Z
    5176:	88 2f       	mov	r24, r24
    5178:	90 e0       	ldi	r25, 0x00	; 0
    517a:	88 70       	andi	r24, 0x08	; 8
    517c:	90 70       	andi	r25, 0x00	; 0
    517e:	00 97       	sbiw	r24, 0x00	; 0
    5180:	29 f0       	breq	.+10     	; 0x518c <uart_getchar_stream+0x70>
	return _FDEV_ERR;
    5182:	8f ef       	ldi	r24, 0xFF	; 255
    5184:	9f ef       	ldi	r25, 0xFF	; 255
    5186:	9f 83       	std	Y+7, r25	; 0x07
    5188:	8e 83       	std	Y+6, r24	; 0x06
    518a:	54 c0       	rjmp	.+168    	; 0x5234 <uart_getchar_stream+0x118>
// 데이터를 얻음 
	c=UDR0;
    518c:	ec e2       	ldi	r30, 0x2C	; 44
    518e:	f0 e0       	ldi	r31, 0x00	; 0
    5190:	80 81       	ld	r24, Z
    5192:	8b 83       	std	Y+3, r24	; 0x03
// 새로운 라인으로 개행함
if(c == '\r')
    5194:	8b 81       	ldd	r24, Y+3	; 0x03
    5196:	8d 30       	cpi	r24, 0x0D	; 13
    5198:	11 f4       	brne	.+4      	; 0x519e <uart_getchar_stream+0x82>
	c = '\n';
    519a:	8a e0       	ldi	r24, 0x0A	; 10
    519c:	8b 83       	std	Y+3, r24	; 0x03
// 줄바꿈이 시작되면 새로운 입력으로 인식하여 버퍼를 비움.
if(c == '\n'){
    519e:	8b 81       	ldd	r24, Y+3	; 0x03
    51a0:	8a 30       	cpi	r24, 0x0A	; 10
    51a2:	89 f4       	brne	.+34     	; 0x51c6 <uart_getchar_stream+0xaa>
	*cp=c;
    51a4:	e9 81       	ldd	r30, Y+1	; 0x01
    51a6:	fa 81       	ldd	r31, Y+2	; 0x02
    51a8:	8b 81       	ldd	r24, Y+3	; 0x03
    51aa:	80 83       	st	Z, r24
	uart_putchar_stream(c, stream);
    51ac:	2c 81       	ldd	r18, Y+4	; 0x04
    51ae:	3d 81       	ldd	r19, Y+5	; 0x05
    51b0:	8b 81       	ldd	r24, Y+3	; 0x03
    51b2:	b9 01       	movw	r22, r18
    51b4:	0e 94 67 28 	call	0x50ce	; 0x50ce <uart_putchar_stream>
	bp = rxb;//rxp=b;
    51b8:	8e e7       	ldi	r24, 0x7E	; 126
    51ba:	91 e0       	ldi	r25, 0x01	; 1
    51bc:	90 93 7d 01 	sts	0x017D, r25
    51c0:	80 93 7c 01 	sts	0x017C, r24
    51c4:	1f c0       	rjmp	.+62     	; 0x5204 <uart_getchar_stream+0xe8>
	break;}

// 0x20 과 0x73 번지에서 출력할수있는 문자들을 저장함 . 그때의 값이 공백과 ~ 임. 
if(( c >= (uint8_t)' ') && (c <= (uint8_t) '~')) 
    51c6:	8b 81       	ldd	r24, Y+3	; 0x03
    51c8:	80 32       	cpi	r24, 0x20	; 32
    51ca:	08 f4       	brcc	.+2      	; 0x51ce <uart_getchar_stream+0xb2>
    51cc:	be cf       	rjmp	.-132    	; 0x514a <uart_getchar_stream+0x2e>
    51ce:	8b 81       	ldd	r24, Y+3	; 0x03
    51d0:	8f 37       	cpi	r24, 0x7F	; 127
    51d2:	08 f0       	brcs	.+2      	; 0x51d6 <uart_getchar_stream+0xba>
    51d4:	ba cf       	rjmp	.-140    	; 0x514a <uart_getchar_stream+0x2e>
{
if( cp < (rxb + RX_BUFSIZE-1)){
    51d6:	89 81       	ldd	r24, Y+1	; 0x01
    51d8:	9a 81       	ldd	r25, Y+2	; 0x02
    51da:	21 e0       	ldi	r18, 0x01	; 1
    51dc:	8d 3c       	cpi	r24, 0xCD	; 205
    51de:	92 07       	cpc	r25, r18
    51e0:	08 f0       	brcs	.+2      	; 0x51e4 <uart_getchar_stream+0xc8>
    51e2:	b3 cf       	rjmp	.-154    	; 0x514a <uart_getchar_stream+0x2e>
	*cp ++ = c;
    51e4:	e9 81       	ldd	r30, Y+1	; 0x01
    51e6:	fa 81       	ldd	r31, Y+2	; 0x02
    51e8:	8b 81       	ldd	r24, Y+3	; 0x03
    51ea:	80 83       	st	Z, r24
    51ec:	89 81       	ldd	r24, Y+1	; 0x01
    51ee:	9a 81       	ldd	r25, Y+2	; 0x02
    51f0:	01 96       	adiw	r24, 0x01	; 1
    51f2:	9a 83       	std	Y+2, r25	; 0x02
    51f4:	89 83       	std	Y+1, r24	; 0x01
	uart_putchar_stream(c, stream);}	
    51f6:	2c 81       	ldd	r18, Y+4	; 0x04
    51f8:	3d 81       	ldd	r19, Y+5	; 0x05
    51fa:	8b 81       	ldd	r24, Y+3	; 0x03
    51fc:	b9 01       	movw	r22, r18
    51fe:	0e 94 67 28 	call	0x50ce	; 0x50ce <uart_putchar_stream>
    5202:	a3 cf       	rjmp	.-186    	; 0x514a <uart_getchar_stream+0x2e>
  }
 }
}
	c= *bp++;
    5204:	e0 91 7c 01 	lds	r30, 0x017C
    5208:	f0 91 7d 01 	lds	r31, 0x017D
    520c:	80 81       	ld	r24, Z
    520e:	8b 83       	std	Y+3, r24	; 0x03
    5210:	cf 01       	movw	r24, r30
    5212:	01 96       	adiw	r24, 0x01	; 1
    5214:	90 93 7d 01 	sts	0x017D, r25
    5218:	80 93 7c 01 	sts	0x017C, r24
if ( c == '\n'){
    521c:	8b 81       	ldd	r24, Y+3	; 0x03
    521e:	8a 30       	cpi	r24, 0x0A	; 10
    5220:	21 f4       	brne	.+8      	; 0x522a <uart_getchar_stream+0x10e>
	bp = 0;}
    5222:	10 92 7d 01 	sts	0x017D, r1
    5226:	10 92 7c 01 	sts	0x017C, r1
return c;
    522a:	8b 81       	ldd	r24, Y+3	; 0x03
    522c:	28 2f       	mov	r18, r24
    522e:	30 e0       	ldi	r19, 0x00	; 0
    5230:	3f 83       	std	Y+7, r19	; 0x07
    5232:	2e 83       	std	Y+6, r18	; 0x06
    5234:	8e 81       	ldd	r24, Y+6	; 0x06
    5236:	9f 81       	ldd	r25, Y+7	; 0x07
}
    5238:	27 96       	adiw	r28, 0x07	; 7
    523a:	0f b6       	in	r0, 0x3f	; 63
    523c:	f8 94       	cli
    523e:	de bf       	out	0x3e, r29	; 62
    5240:	0f be       	out	0x3f, r0	; 63
    5242:	cd bf       	out	0x3d, r28	; 61
    5244:	cf 91       	pop	r28
    5246:	df 91       	pop	r29
    5248:	08 95       	ret

0000524a <__fixunssfsi>:
    524a:	ef 92       	push	r14
    524c:	ff 92       	push	r15
    524e:	0f 93       	push	r16
    5250:	1f 93       	push	r17
    5252:	7b 01       	movw	r14, r22
    5254:	8c 01       	movw	r16, r24
    5256:	20 e0       	ldi	r18, 0x00	; 0
    5258:	30 e0       	ldi	r19, 0x00	; 0
    525a:	40 e0       	ldi	r20, 0x00	; 0
    525c:	5f e4       	ldi	r21, 0x4F	; 79
    525e:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__gesf2>
    5262:	88 23       	and	r24, r24
    5264:	8c f0       	brlt	.+34     	; 0x5288 <__fixunssfsi+0x3e>
    5266:	c8 01       	movw	r24, r16
    5268:	b7 01       	movw	r22, r14
    526a:	20 e0       	ldi	r18, 0x00	; 0
    526c:	30 e0       	ldi	r19, 0x00	; 0
    526e:	40 e0       	ldi	r20, 0x00	; 0
    5270:	5f e4       	ldi	r21, 0x4F	; 79
    5272:	0e 94 9d 2a 	call	0x553a	; 0x553a <__subsf3>
    5276:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <__fixsfsi>
    527a:	9b 01       	movw	r18, r22
    527c:	ac 01       	movw	r20, r24
    527e:	20 50       	subi	r18, 0x00	; 0
    5280:	30 40       	sbci	r19, 0x00	; 0
    5282:	40 40       	sbci	r20, 0x00	; 0
    5284:	50 48       	sbci	r21, 0x80	; 128
    5286:	06 c0       	rjmp	.+12     	; 0x5294 <__fixunssfsi+0x4a>
    5288:	c8 01       	movw	r24, r16
    528a:	b7 01       	movw	r22, r14
    528c:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <__fixsfsi>
    5290:	9b 01       	movw	r18, r22
    5292:	ac 01       	movw	r20, r24
    5294:	b9 01       	movw	r22, r18
    5296:	ca 01       	movw	r24, r20
    5298:	1f 91       	pop	r17
    529a:	0f 91       	pop	r16
    529c:	ff 90       	pop	r15
    529e:	ef 90       	pop	r14
    52a0:	08 95       	ret

000052a2 <_fpadd_parts>:
    52a2:	a0 e0       	ldi	r26, 0x00	; 0
    52a4:	b0 e0       	ldi	r27, 0x00	; 0
    52a6:	e7 e5       	ldi	r30, 0x57	; 87
    52a8:	f9 e2       	ldi	r31, 0x29	; 41
    52aa:	0c 94 6c 2f 	jmp	0x5ed8	; 0x5ed8 <__prologue_saves__>
    52ae:	dc 01       	movw	r26, r24
    52b0:	2b 01       	movw	r4, r22
    52b2:	fa 01       	movw	r30, r20
    52b4:	9c 91       	ld	r25, X
    52b6:	92 30       	cpi	r25, 0x02	; 2
    52b8:	08 f4       	brcc	.+2      	; 0x52bc <_fpadd_parts+0x1a>
    52ba:	39 c1       	rjmp	.+626    	; 0x552e <_fpadd_parts+0x28c>
    52bc:	eb 01       	movw	r28, r22
    52be:	88 81       	ld	r24, Y
    52c0:	82 30       	cpi	r24, 0x02	; 2
    52c2:	08 f4       	brcc	.+2      	; 0x52c6 <_fpadd_parts+0x24>
    52c4:	33 c1       	rjmp	.+614    	; 0x552c <_fpadd_parts+0x28a>
    52c6:	94 30       	cpi	r25, 0x04	; 4
    52c8:	69 f4       	brne	.+26     	; 0x52e4 <_fpadd_parts+0x42>
    52ca:	84 30       	cpi	r24, 0x04	; 4
    52cc:	09 f0       	breq	.+2      	; 0x52d0 <_fpadd_parts+0x2e>
    52ce:	2f c1       	rjmp	.+606    	; 0x552e <_fpadd_parts+0x28c>
    52d0:	11 96       	adiw	r26, 0x01	; 1
    52d2:	9c 91       	ld	r25, X
    52d4:	11 97       	sbiw	r26, 0x01	; 1
    52d6:	89 81       	ldd	r24, Y+1	; 0x01
    52d8:	98 17       	cp	r25, r24
    52da:	09 f4       	brne	.+2      	; 0x52de <_fpadd_parts+0x3c>
    52dc:	28 c1       	rjmp	.+592    	; 0x552e <_fpadd_parts+0x28c>
    52de:	a3 e7       	ldi	r26, 0x73	; 115
    52e0:	b1 e0       	ldi	r27, 0x01	; 1
    52e2:	25 c1       	rjmp	.+586    	; 0x552e <_fpadd_parts+0x28c>
    52e4:	84 30       	cpi	r24, 0x04	; 4
    52e6:	09 f4       	brne	.+2      	; 0x52ea <_fpadd_parts+0x48>
    52e8:	21 c1       	rjmp	.+578    	; 0x552c <_fpadd_parts+0x28a>
    52ea:	82 30       	cpi	r24, 0x02	; 2
    52ec:	a9 f4       	brne	.+42     	; 0x5318 <_fpadd_parts+0x76>
    52ee:	92 30       	cpi	r25, 0x02	; 2
    52f0:	09 f0       	breq	.+2      	; 0x52f4 <_fpadd_parts+0x52>
    52f2:	1d c1       	rjmp	.+570    	; 0x552e <_fpadd_parts+0x28c>
    52f4:	9a 01       	movw	r18, r20
    52f6:	ad 01       	movw	r20, r26
    52f8:	88 e0       	ldi	r24, 0x08	; 8
    52fa:	ea 01       	movw	r28, r20
    52fc:	09 90       	ld	r0, Y+
    52fe:	ae 01       	movw	r20, r28
    5300:	e9 01       	movw	r28, r18
    5302:	09 92       	st	Y+, r0
    5304:	9e 01       	movw	r18, r28
    5306:	81 50       	subi	r24, 0x01	; 1
    5308:	c1 f7       	brne	.-16     	; 0x52fa <_fpadd_parts+0x58>
    530a:	e2 01       	movw	r28, r4
    530c:	89 81       	ldd	r24, Y+1	; 0x01
    530e:	11 96       	adiw	r26, 0x01	; 1
    5310:	9c 91       	ld	r25, X
    5312:	89 23       	and	r24, r25
    5314:	81 83       	std	Z+1, r24	; 0x01
    5316:	08 c1       	rjmp	.+528    	; 0x5528 <_fpadd_parts+0x286>
    5318:	92 30       	cpi	r25, 0x02	; 2
    531a:	09 f4       	brne	.+2      	; 0x531e <_fpadd_parts+0x7c>
    531c:	07 c1       	rjmp	.+526    	; 0x552c <_fpadd_parts+0x28a>
    531e:	12 96       	adiw	r26, 0x02	; 2
    5320:	2d 90       	ld	r2, X+
    5322:	3c 90       	ld	r3, X
    5324:	13 97       	sbiw	r26, 0x03	; 3
    5326:	eb 01       	movw	r28, r22
    5328:	8a 81       	ldd	r24, Y+2	; 0x02
    532a:	9b 81       	ldd	r25, Y+3	; 0x03
    532c:	14 96       	adiw	r26, 0x04	; 4
    532e:	ad 90       	ld	r10, X+
    5330:	bd 90       	ld	r11, X+
    5332:	cd 90       	ld	r12, X+
    5334:	dc 90       	ld	r13, X
    5336:	17 97       	sbiw	r26, 0x07	; 7
    5338:	ec 80       	ldd	r14, Y+4	; 0x04
    533a:	fd 80       	ldd	r15, Y+5	; 0x05
    533c:	0e 81       	ldd	r16, Y+6	; 0x06
    533e:	1f 81       	ldd	r17, Y+7	; 0x07
    5340:	91 01       	movw	r18, r2
    5342:	28 1b       	sub	r18, r24
    5344:	39 0b       	sbc	r19, r25
    5346:	b9 01       	movw	r22, r18
    5348:	37 ff       	sbrs	r19, 7
    534a:	04 c0       	rjmp	.+8      	; 0x5354 <_fpadd_parts+0xb2>
    534c:	66 27       	eor	r22, r22
    534e:	77 27       	eor	r23, r23
    5350:	62 1b       	sub	r22, r18
    5352:	73 0b       	sbc	r23, r19
    5354:	60 32       	cpi	r22, 0x20	; 32
    5356:	71 05       	cpc	r23, r1
    5358:	0c f0       	brlt	.+2      	; 0x535c <_fpadd_parts+0xba>
    535a:	61 c0       	rjmp	.+194    	; 0x541e <_fpadd_parts+0x17c>
    535c:	12 16       	cp	r1, r18
    535e:	13 06       	cpc	r1, r19
    5360:	6c f5       	brge	.+90     	; 0x53bc <_fpadd_parts+0x11a>
    5362:	37 01       	movw	r6, r14
    5364:	48 01       	movw	r8, r16
    5366:	06 2e       	mov	r0, r22
    5368:	04 c0       	rjmp	.+8      	; 0x5372 <_fpadd_parts+0xd0>
    536a:	96 94       	lsr	r9
    536c:	87 94       	ror	r8
    536e:	77 94       	ror	r7
    5370:	67 94       	ror	r6
    5372:	0a 94       	dec	r0
    5374:	d2 f7       	brpl	.-12     	; 0x536a <_fpadd_parts+0xc8>
    5376:	21 e0       	ldi	r18, 0x01	; 1
    5378:	30 e0       	ldi	r19, 0x00	; 0
    537a:	40 e0       	ldi	r20, 0x00	; 0
    537c:	50 e0       	ldi	r21, 0x00	; 0
    537e:	04 c0       	rjmp	.+8      	; 0x5388 <_fpadd_parts+0xe6>
    5380:	22 0f       	add	r18, r18
    5382:	33 1f       	adc	r19, r19
    5384:	44 1f       	adc	r20, r20
    5386:	55 1f       	adc	r21, r21
    5388:	6a 95       	dec	r22
    538a:	d2 f7       	brpl	.-12     	; 0x5380 <_fpadd_parts+0xde>
    538c:	21 50       	subi	r18, 0x01	; 1
    538e:	30 40       	sbci	r19, 0x00	; 0
    5390:	40 40       	sbci	r20, 0x00	; 0
    5392:	50 40       	sbci	r21, 0x00	; 0
    5394:	2e 21       	and	r18, r14
    5396:	3f 21       	and	r19, r15
    5398:	40 23       	and	r20, r16
    539a:	51 23       	and	r21, r17
    539c:	21 15       	cp	r18, r1
    539e:	31 05       	cpc	r19, r1
    53a0:	41 05       	cpc	r20, r1
    53a2:	51 05       	cpc	r21, r1
    53a4:	21 f0       	breq	.+8      	; 0x53ae <_fpadd_parts+0x10c>
    53a6:	21 e0       	ldi	r18, 0x01	; 1
    53a8:	30 e0       	ldi	r19, 0x00	; 0
    53aa:	40 e0       	ldi	r20, 0x00	; 0
    53ac:	50 e0       	ldi	r21, 0x00	; 0
    53ae:	79 01       	movw	r14, r18
    53b0:	8a 01       	movw	r16, r20
    53b2:	e6 28       	or	r14, r6
    53b4:	f7 28       	or	r15, r7
    53b6:	08 29       	or	r16, r8
    53b8:	19 29       	or	r17, r9
    53ba:	3c c0       	rjmp	.+120    	; 0x5434 <_fpadd_parts+0x192>
    53bc:	23 2b       	or	r18, r19
    53be:	d1 f1       	breq	.+116    	; 0x5434 <_fpadd_parts+0x192>
    53c0:	26 0e       	add	r2, r22
    53c2:	37 1e       	adc	r3, r23
    53c4:	35 01       	movw	r6, r10
    53c6:	46 01       	movw	r8, r12
    53c8:	06 2e       	mov	r0, r22
    53ca:	04 c0       	rjmp	.+8      	; 0x53d4 <_fpadd_parts+0x132>
    53cc:	96 94       	lsr	r9
    53ce:	87 94       	ror	r8
    53d0:	77 94       	ror	r7
    53d2:	67 94       	ror	r6
    53d4:	0a 94       	dec	r0
    53d6:	d2 f7       	brpl	.-12     	; 0x53cc <_fpadd_parts+0x12a>
    53d8:	21 e0       	ldi	r18, 0x01	; 1
    53da:	30 e0       	ldi	r19, 0x00	; 0
    53dc:	40 e0       	ldi	r20, 0x00	; 0
    53de:	50 e0       	ldi	r21, 0x00	; 0
    53e0:	04 c0       	rjmp	.+8      	; 0x53ea <_fpadd_parts+0x148>
    53e2:	22 0f       	add	r18, r18
    53e4:	33 1f       	adc	r19, r19
    53e6:	44 1f       	adc	r20, r20
    53e8:	55 1f       	adc	r21, r21
    53ea:	6a 95       	dec	r22
    53ec:	d2 f7       	brpl	.-12     	; 0x53e2 <_fpadd_parts+0x140>
    53ee:	21 50       	subi	r18, 0x01	; 1
    53f0:	30 40       	sbci	r19, 0x00	; 0
    53f2:	40 40       	sbci	r20, 0x00	; 0
    53f4:	50 40       	sbci	r21, 0x00	; 0
    53f6:	2a 21       	and	r18, r10
    53f8:	3b 21       	and	r19, r11
    53fa:	4c 21       	and	r20, r12
    53fc:	5d 21       	and	r21, r13
    53fe:	21 15       	cp	r18, r1
    5400:	31 05       	cpc	r19, r1
    5402:	41 05       	cpc	r20, r1
    5404:	51 05       	cpc	r21, r1
    5406:	21 f0       	breq	.+8      	; 0x5410 <_fpadd_parts+0x16e>
    5408:	21 e0       	ldi	r18, 0x01	; 1
    540a:	30 e0       	ldi	r19, 0x00	; 0
    540c:	40 e0       	ldi	r20, 0x00	; 0
    540e:	50 e0       	ldi	r21, 0x00	; 0
    5410:	59 01       	movw	r10, r18
    5412:	6a 01       	movw	r12, r20
    5414:	a6 28       	or	r10, r6
    5416:	b7 28       	or	r11, r7
    5418:	c8 28       	or	r12, r8
    541a:	d9 28       	or	r13, r9
    541c:	0b c0       	rjmp	.+22     	; 0x5434 <_fpadd_parts+0x192>
    541e:	82 15       	cp	r24, r2
    5420:	93 05       	cpc	r25, r3
    5422:	2c f0       	brlt	.+10     	; 0x542e <_fpadd_parts+0x18c>
    5424:	1c 01       	movw	r2, r24
    5426:	aa 24       	eor	r10, r10
    5428:	bb 24       	eor	r11, r11
    542a:	65 01       	movw	r12, r10
    542c:	03 c0       	rjmp	.+6      	; 0x5434 <_fpadd_parts+0x192>
    542e:	ee 24       	eor	r14, r14
    5430:	ff 24       	eor	r15, r15
    5432:	87 01       	movw	r16, r14
    5434:	11 96       	adiw	r26, 0x01	; 1
    5436:	9c 91       	ld	r25, X
    5438:	d2 01       	movw	r26, r4
    543a:	11 96       	adiw	r26, 0x01	; 1
    543c:	8c 91       	ld	r24, X
    543e:	98 17       	cp	r25, r24
    5440:	09 f4       	brne	.+2      	; 0x5444 <_fpadd_parts+0x1a2>
    5442:	45 c0       	rjmp	.+138    	; 0x54ce <_fpadd_parts+0x22c>
    5444:	99 23       	and	r25, r25
    5446:	39 f0       	breq	.+14     	; 0x5456 <_fpadd_parts+0x1b4>
    5448:	a8 01       	movw	r20, r16
    544a:	97 01       	movw	r18, r14
    544c:	2a 19       	sub	r18, r10
    544e:	3b 09       	sbc	r19, r11
    5450:	4c 09       	sbc	r20, r12
    5452:	5d 09       	sbc	r21, r13
    5454:	06 c0       	rjmp	.+12     	; 0x5462 <_fpadd_parts+0x1c0>
    5456:	a6 01       	movw	r20, r12
    5458:	95 01       	movw	r18, r10
    545a:	2e 19       	sub	r18, r14
    545c:	3f 09       	sbc	r19, r15
    545e:	40 0b       	sbc	r20, r16
    5460:	51 0b       	sbc	r21, r17
    5462:	57 fd       	sbrc	r21, 7
    5464:	08 c0       	rjmp	.+16     	; 0x5476 <_fpadd_parts+0x1d4>
    5466:	11 82       	std	Z+1, r1	; 0x01
    5468:	33 82       	std	Z+3, r3	; 0x03
    546a:	22 82       	std	Z+2, r2	; 0x02
    546c:	24 83       	std	Z+4, r18	; 0x04
    546e:	35 83       	std	Z+5, r19	; 0x05
    5470:	46 83       	std	Z+6, r20	; 0x06
    5472:	57 83       	std	Z+7, r21	; 0x07
    5474:	1d c0       	rjmp	.+58     	; 0x54b0 <_fpadd_parts+0x20e>
    5476:	81 e0       	ldi	r24, 0x01	; 1
    5478:	81 83       	std	Z+1, r24	; 0x01
    547a:	33 82       	std	Z+3, r3	; 0x03
    547c:	22 82       	std	Z+2, r2	; 0x02
    547e:	88 27       	eor	r24, r24
    5480:	99 27       	eor	r25, r25
    5482:	dc 01       	movw	r26, r24
    5484:	82 1b       	sub	r24, r18
    5486:	93 0b       	sbc	r25, r19
    5488:	a4 0b       	sbc	r26, r20
    548a:	b5 0b       	sbc	r27, r21
    548c:	84 83       	std	Z+4, r24	; 0x04
    548e:	95 83       	std	Z+5, r25	; 0x05
    5490:	a6 83       	std	Z+6, r26	; 0x06
    5492:	b7 83       	std	Z+7, r27	; 0x07
    5494:	0d c0       	rjmp	.+26     	; 0x54b0 <_fpadd_parts+0x20e>
    5496:	22 0f       	add	r18, r18
    5498:	33 1f       	adc	r19, r19
    549a:	44 1f       	adc	r20, r20
    549c:	55 1f       	adc	r21, r21
    549e:	24 83       	std	Z+4, r18	; 0x04
    54a0:	35 83       	std	Z+5, r19	; 0x05
    54a2:	46 83       	std	Z+6, r20	; 0x06
    54a4:	57 83       	std	Z+7, r21	; 0x07
    54a6:	82 81       	ldd	r24, Z+2	; 0x02
    54a8:	93 81       	ldd	r25, Z+3	; 0x03
    54aa:	01 97       	sbiw	r24, 0x01	; 1
    54ac:	93 83       	std	Z+3, r25	; 0x03
    54ae:	82 83       	std	Z+2, r24	; 0x02
    54b0:	24 81       	ldd	r18, Z+4	; 0x04
    54b2:	35 81       	ldd	r19, Z+5	; 0x05
    54b4:	46 81       	ldd	r20, Z+6	; 0x06
    54b6:	57 81       	ldd	r21, Z+7	; 0x07
    54b8:	da 01       	movw	r26, r20
    54ba:	c9 01       	movw	r24, r18
    54bc:	01 97       	sbiw	r24, 0x01	; 1
    54be:	a1 09       	sbc	r26, r1
    54c0:	b1 09       	sbc	r27, r1
    54c2:	8f 5f       	subi	r24, 0xFF	; 255
    54c4:	9f 4f       	sbci	r25, 0xFF	; 255
    54c6:	af 4f       	sbci	r26, 0xFF	; 255
    54c8:	bf 43       	sbci	r27, 0x3F	; 63
    54ca:	28 f3       	brcs	.-54     	; 0x5496 <_fpadd_parts+0x1f4>
    54cc:	0b c0       	rjmp	.+22     	; 0x54e4 <_fpadd_parts+0x242>
    54ce:	91 83       	std	Z+1, r25	; 0x01
    54d0:	33 82       	std	Z+3, r3	; 0x03
    54d2:	22 82       	std	Z+2, r2	; 0x02
    54d4:	ea 0c       	add	r14, r10
    54d6:	fb 1c       	adc	r15, r11
    54d8:	0c 1d       	adc	r16, r12
    54da:	1d 1d       	adc	r17, r13
    54dc:	e4 82       	std	Z+4, r14	; 0x04
    54de:	f5 82       	std	Z+5, r15	; 0x05
    54e0:	06 83       	std	Z+6, r16	; 0x06
    54e2:	17 83       	std	Z+7, r17	; 0x07
    54e4:	83 e0       	ldi	r24, 0x03	; 3
    54e6:	80 83       	st	Z, r24
    54e8:	24 81       	ldd	r18, Z+4	; 0x04
    54ea:	35 81       	ldd	r19, Z+5	; 0x05
    54ec:	46 81       	ldd	r20, Z+6	; 0x06
    54ee:	57 81       	ldd	r21, Z+7	; 0x07
    54f0:	57 ff       	sbrs	r21, 7
    54f2:	1a c0       	rjmp	.+52     	; 0x5528 <_fpadd_parts+0x286>
    54f4:	c9 01       	movw	r24, r18
    54f6:	aa 27       	eor	r26, r26
    54f8:	97 fd       	sbrc	r25, 7
    54fa:	a0 95       	com	r26
    54fc:	ba 2f       	mov	r27, r26
    54fe:	81 70       	andi	r24, 0x01	; 1
    5500:	90 70       	andi	r25, 0x00	; 0
    5502:	a0 70       	andi	r26, 0x00	; 0
    5504:	b0 70       	andi	r27, 0x00	; 0
    5506:	56 95       	lsr	r21
    5508:	47 95       	ror	r20
    550a:	37 95       	ror	r19
    550c:	27 95       	ror	r18
    550e:	82 2b       	or	r24, r18
    5510:	93 2b       	or	r25, r19
    5512:	a4 2b       	or	r26, r20
    5514:	b5 2b       	or	r27, r21
    5516:	84 83       	std	Z+4, r24	; 0x04
    5518:	95 83       	std	Z+5, r25	; 0x05
    551a:	a6 83       	std	Z+6, r26	; 0x06
    551c:	b7 83       	std	Z+7, r27	; 0x07
    551e:	82 81       	ldd	r24, Z+2	; 0x02
    5520:	93 81       	ldd	r25, Z+3	; 0x03
    5522:	01 96       	adiw	r24, 0x01	; 1
    5524:	93 83       	std	Z+3, r25	; 0x03
    5526:	82 83       	std	Z+2, r24	; 0x02
    5528:	df 01       	movw	r26, r30
    552a:	01 c0       	rjmp	.+2      	; 0x552e <_fpadd_parts+0x28c>
    552c:	d2 01       	movw	r26, r4
    552e:	cd 01       	movw	r24, r26
    5530:	cd b7       	in	r28, 0x3d	; 61
    5532:	de b7       	in	r29, 0x3e	; 62
    5534:	e2 e1       	ldi	r30, 0x12	; 18
    5536:	0c 94 88 2f 	jmp	0x5f10	; 0x5f10 <__epilogue_restores__>

0000553a <__subsf3>:
    553a:	a0 e2       	ldi	r26, 0x20	; 32
    553c:	b0 e0       	ldi	r27, 0x00	; 0
    553e:	e3 ea       	ldi	r30, 0xA3	; 163
    5540:	fa e2       	ldi	r31, 0x2A	; 42
    5542:	0c 94 78 2f 	jmp	0x5ef0	; 0x5ef0 <__prologue_saves__+0x18>
    5546:	69 83       	std	Y+1, r22	; 0x01
    5548:	7a 83       	std	Y+2, r23	; 0x02
    554a:	8b 83       	std	Y+3, r24	; 0x03
    554c:	9c 83       	std	Y+4, r25	; 0x04
    554e:	2d 83       	std	Y+5, r18	; 0x05
    5550:	3e 83       	std	Y+6, r19	; 0x06
    5552:	4f 83       	std	Y+7, r20	; 0x07
    5554:	58 87       	std	Y+8, r21	; 0x08
    5556:	e9 e0       	ldi	r30, 0x09	; 9
    5558:	ee 2e       	mov	r14, r30
    555a:	f1 2c       	mov	r15, r1
    555c:	ec 0e       	add	r14, r28
    555e:	fd 1e       	adc	r15, r29
    5560:	ce 01       	movw	r24, r28
    5562:	01 96       	adiw	r24, 0x01	; 1
    5564:	b7 01       	movw	r22, r14
    5566:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__unpack_f>
    556a:	8e 01       	movw	r16, r28
    556c:	0f 5e       	subi	r16, 0xEF	; 239
    556e:	1f 4f       	sbci	r17, 0xFF	; 255
    5570:	ce 01       	movw	r24, r28
    5572:	05 96       	adiw	r24, 0x05	; 5
    5574:	b8 01       	movw	r22, r16
    5576:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__unpack_f>
    557a:	8a 89       	ldd	r24, Y+18	; 0x12
    557c:	91 e0       	ldi	r25, 0x01	; 1
    557e:	89 27       	eor	r24, r25
    5580:	8a 8b       	std	Y+18, r24	; 0x12
    5582:	c7 01       	movw	r24, r14
    5584:	b8 01       	movw	r22, r16
    5586:	ae 01       	movw	r20, r28
    5588:	47 5e       	subi	r20, 0xE7	; 231
    558a:	5f 4f       	sbci	r21, 0xFF	; 255
    558c:	0e 94 51 29 	call	0x52a2	; 0x52a2 <_fpadd_parts>
    5590:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__pack_f>
    5594:	a0 96       	adiw	r28, 0x20	; 32
    5596:	e6 e0       	ldi	r30, 0x06	; 6
    5598:	0c 94 94 2f 	jmp	0x5f28	; 0x5f28 <__epilogue_restores__+0x18>

0000559c <__addsf3>:
    559c:	a0 e2       	ldi	r26, 0x20	; 32
    559e:	b0 e0       	ldi	r27, 0x00	; 0
    55a0:	e4 ed       	ldi	r30, 0xD4	; 212
    55a2:	fa e2       	ldi	r31, 0x2A	; 42
    55a4:	0c 94 78 2f 	jmp	0x5ef0	; 0x5ef0 <__prologue_saves__+0x18>
    55a8:	69 83       	std	Y+1, r22	; 0x01
    55aa:	7a 83       	std	Y+2, r23	; 0x02
    55ac:	8b 83       	std	Y+3, r24	; 0x03
    55ae:	9c 83       	std	Y+4, r25	; 0x04
    55b0:	2d 83       	std	Y+5, r18	; 0x05
    55b2:	3e 83       	std	Y+6, r19	; 0x06
    55b4:	4f 83       	std	Y+7, r20	; 0x07
    55b6:	58 87       	std	Y+8, r21	; 0x08
    55b8:	f9 e0       	ldi	r31, 0x09	; 9
    55ba:	ef 2e       	mov	r14, r31
    55bc:	f1 2c       	mov	r15, r1
    55be:	ec 0e       	add	r14, r28
    55c0:	fd 1e       	adc	r15, r29
    55c2:	ce 01       	movw	r24, r28
    55c4:	01 96       	adiw	r24, 0x01	; 1
    55c6:	b7 01       	movw	r22, r14
    55c8:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__unpack_f>
    55cc:	8e 01       	movw	r16, r28
    55ce:	0f 5e       	subi	r16, 0xEF	; 239
    55d0:	1f 4f       	sbci	r17, 0xFF	; 255
    55d2:	ce 01       	movw	r24, r28
    55d4:	05 96       	adiw	r24, 0x05	; 5
    55d6:	b8 01       	movw	r22, r16
    55d8:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__unpack_f>
    55dc:	c7 01       	movw	r24, r14
    55de:	b8 01       	movw	r22, r16
    55e0:	ae 01       	movw	r20, r28
    55e2:	47 5e       	subi	r20, 0xE7	; 231
    55e4:	5f 4f       	sbci	r21, 0xFF	; 255
    55e6:	0e 94 51 29 	call	0x52a2	; 0x52a2 <_fpadd_parts>
    55ea:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__pack_f>
    55ee:	a0 96       	adiw	r28, 0x20	; 32
    55f0:	e6 e0       	ldi	r30, 0x06	; 6
    55f2:	0c 94 94 2f 	jmp	0x5f28	; 0x5f28 <__epilogue_restores__+0x18>

000055f6 <__mulsf3>:
    55f6:	a0 e2       	ldi	r26, 0x20	; 32
    55f8:	b0 e0       	ldi	r27, 0x00	; 0
    55fa:	e1 e0       	ldi	r30, 0x01	; 1
    55fc:	fb e2       	ldi	r31, 0x2B	; 43
    55fe:	0c 94 6c 2f 	jmp	0x5ed8	; 0x5ed8 <__prologue_saves__>
    5602:	69 83       	std	Y+1, r22	; 0x01
    5604:	7a 83       	std	Y+2, r23	; 0x02
    5606:	8b 83       	std	Y+3, r24	; 0x03
    5608:	9c 83       	std	Y+4, r25	; 0x04
    560a:	2d 83       	std	Y+5, r18	; 0x05
    560c:	3e 83       	std	Y+6, r19	; 0x06
    560e:	4f 83       	std	Y+7, r20	; 0x07
    5610:	58 87       	std	Y+8, r21	; 0x08
    5612:	ce 01       	movw	r24, r28
    5614:	01 96       	adiw	r24, 0x01	; 1
    5616:	be 01       	movw	r22, r28
    5618:	67 5f       	subi	r22, 0xF7	; 247
    561a:	7f 4f       	sbci	r23, 0xFF	; 255
    561c:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__unpack_f>
    5620:	ce 01       	movw	r24, r28
    5622:	05 96       	adiw	r24, 0x05	; 5
    5624:	be 01       	movw	r22, r28
    5626:	6f 5e       	subi	r22, 0xEF	; 239
    5628:	7f 4f       	sbci	r23, 0xFF	; 255
    562a:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__unpack_f>
    562e:	99 85       	ldd	r25, Y+9	; 0x09
    5630:	92 30       	cpi	r25, 0x02	; 2
    5632:	88 f0       	brcs	.+34     	; 0x5656 <__mulsf3+0x60>
    5634:	89 89       	ldd	r24, Y+17	; 0x11
    5636:	82 30       	cpi	r24, 0x02	; 2
    5638:	c8 f0       	brcs	.+50     	; 0x566c <__mulsf3+0x76>
    563a:	94 30       	cpi	r25, 0x04	; 4
    563c:	19 f4       	brne	.+6      	; 0x5644 <__mulsf3+0x4e>
    563e:	82 30       	cpi	r24, 0x02	; 2
    5640:	51 f4       	brne	.+20     	; 0x5656 <__mulsf3+0x60>
    5642:	04 c0       	rjmp	.+8      	; 0x564c <__mulsf3+0x56>
    5644:	84 30       	cpi	r24, 0x04	; 4
    5646:	29 f4       	brne	.+10     	; 0x5652 <__mulsf3+0x5c>
    5648:	92 30       	cpi	r25, 0x02	; 2
    564a:	81 f4       	brne	.+32     	; 0x566c <__mulsf3+0x76>
    564c:	83 e7       	ldi	r24, 0x73	; 115
    564e:	91 e0       	ldi	r25, 0x01	; 1
    5650:	c6 c0       	rjmp	.+396    	; 0x57de <__mulsf3+0x1e8>
    5652:	92 30       	cpi	r25, 0x02	; 2
    5654:	49 f4       	brne	.+18     	; 0x5668 <__mulsf3+0x72>
    5656:	20 e0       	ldi	r18, 0x00	; 0
    5658:	9a 85       	ldd	r25, Y+10	; 0x0a
    565a:	8a 89       	ldd	r24, Y+18	; 0x12
    565c:	98 13       	cpse	r25, r24
    565e:	21 e0       	ldi	r18, 0x01	; 1
    5660:	2a 87       	std	Y+10, r18	; 0x0a
    5662:	ce 01       	movw	r24, r28
    5664:	09 96       	adiw	r24, 0x09	; 9
    5666:	bb c0       	rjmp	.+374    	; 0x57de <__mulsf3+0x1e8>
    5668:	82 30       	cpi	r24, 0x02	; 2
    566a:	49 f4       	brne	.+18     	; 0x567e <__mulsf3+0x88>
    566c:	20 e0       	ldi	r18, 0x00	; 0
    566e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5670:	8a 89       	ldd	r24, Y+18	; 0x12
    5672:	98 13       	cpse	r25, r24
    5674:	21 e0       	ldi	r18, 0x01	; 1
    5676:	2a 8b       	std	Y+18, r18	; 0x12
    5678:	ce 01       	movw	r24, r28
    567a:	41 96       	adiw	r24, 0x11	; 17
    567c:	b0 c0       	rjmp	.+352    	; 0x57de <__mulsf3+0x1e8>
    567e:	2d 84       	ldd	r2, Y+13	; 0x0d
    5680:	3e 84       	ldd	r3, Y+14	; 0x0e
    5682:	4f 84       	ldd	r4, Y+15	; 0x0f
    5684:	58 88       	ldd	r5, Y+16	; 0x10
    5686:	6d 88       	ldd	r6, Y+21	; 0x15
    5688:	7e 88       	ldd	r7, Y+22	; 0x16
    568a:	8f 88       	ldd	r8, Y+23	; 0x17
    568c:	98 8c       	ldd	r9, Y+24	; 0x18
    568e:	ee 24       	eor	r14, r14
    5690:	ff 24       	eor	r15, r15
    5692:	87 01       	movw	r16, r14
    5694:	aa 24       	eor	r10, r10
    5696:	bb 24       	eor	r11, r11
    5698:	65 01       	movw	r12, r10
    569a:	40 e0       	ldi	r20, 0x00	; 0
    569c:	50 e0       	ldi	r21, 0x00	; 0
    569e:	60 e0       	ldi	r22, 0x00	; 0
    56a0:	70 e0       	ldi	r23, 0x00	; 0
    56a2:	e0 e0       	ldi	r30, 0x00	; 0
    56a4:	f0 e0       	ldi	r31, 0x00	; 0
    56a6:	c1 01       	movw	r24, r2
    56a8:	81 70       	andi	r24, 0x01	; 1
    56aa:	90 70       	andi	r25, 0x00	; 0
    56ac:	89 2b       	or	r24, r25
    56ae:	e9 f0       	breq	.+58     	; 0x56ea <__mulsf3+0xf4>
    56b0:	e6 0c       	add	r14, r6
    56b2:	f7 1c       	adc	r15, r7
    56b4:	08 1d       	adc	r16, r8
    56b6:	19 1d       	adc	r17, r9
    56b8:	9a 01       	movw	r18, r20
    56ba:	ab 01       	movw	r20, r22
    56bc:	2a 0d       	add	r18, r10
    56be:	3b 1d       	adc	r19, r11
    56c0:	4c 1d       	adc	r20, r12
    56c2:	5d 1d       	adc	r21, r13
    56c4:	80 e0       	ldi	r24, 0x00	; 0
    56c6:	90 e0       	ldi	r25, 0x00	; 0
    56c8:	a0 e0       	ldi	r26, 0x00	; 0
    56ca:	b0 e0       	ldi	r27, 0x00	; 0
    56cc:	e6 14       	cp	r14, r6
    56ce:	f7 04       	cpc	r15, r7
    56d0:	08 05       	cpc	r16, r8
    56d2:	19 05       	cpc	r17, r9
    56d4:	20 f4       	brcc	.+8      	; 0x56de <__mulsf3+0xe8>
    56d6:	81 e0       	ldi	r24, 0x01	; 1
    56d8:	90 e0       	ldi	r25, 0x00	; 0
    56da:	a0 e0       	ldi	r26, 0x00	; 0
    56dc:	b0 e0       	ldi	r27, 0x00	; 0
    56de:	ba 01       	movw	r22, r20
    56e0:	a9 01       	movw	r20, r18
    56e2:	48 0f       	add	r20, r24
    56e4:	59 1f       	adc	r21, r25
    56e6:	6a 1f       	adc	r22, r26
    56e8:	7b 1f       	adc	r23, r27
    56ea:	aa 0c       	add	r10, r10
    56ec:	bb 1c       	adc	r11, r11
    56ee:	cc 1c       	adc	r12, r12
    56f0:	dd 1c       	adc	r13, r13
    56f2:	97 fe       	sbrs	r9, 7
    56f4:	08 c0       	rjmp	.+16     	; 0x5706 <__mulsf3+0x110>
    56f6:	81 e0       	ldi	r24, 0x01	; 1
    56f8:	90 e0       	ldi	r25, 0x00	; 0
    56fa:	a0 e0       	ldi	r26, 0x00	; 0
    56fc:	b0 e0       	ldi	r27, 0x00	; 0
    56fe:	a8 2a       	or	r10, r24
    5700:	b9 2a       	or	r11, r25
    5702:	ca 2a       	or	r12, r26
    5704:	db 2a       	or	r13, r27
    5706:	31 96       	adiw	r30, 0x01	; 1
    5708:	e0 32       	cpi	r30, 0x20	; 32
    570a:	f1 05       	cpc	r31, r1
    570c:	49 f0       	breq	.+18     	; 0x5720 <__mulsf3+0x12a>
    570e:	66 0c       	add	r6, r6
    5710:	77 1c       	adc	r7, r7
    5712:	88 1c       	adc	r8, r8
    5714:	99 1c       	adc	r9, r9
    5716:	56 94       	lsr	r5
    5718:	47 94       	ror	r4
    571a:	37 94       	ror	r3
    571c:	27 94       	ror	r2
    571e:	c3 cf       	rjmp	.-122    	; 0x56a6 <__mulsf3+0xb0>
    5720:	fa 85       	ldd	r31, Y+10	; 0x0a
    5722:	ea 89       	ldd	r30, Y+18	; 0x12
    5724:	2b 89       	ldd	r18, Y+19	; 0x13
    5726:	3c 89       	ldd	r19, Y+20	; 0x14
    5728:	8b 85       	ldd	r24, Y+11	; 0x0b
    572a:	9c 85       	ldd	r25, Y+12	; 0x0c
    572c:	28 0f       	add	r18, r24
    572e:	39 1f       	adc	r19, r25
    5730:	2e 5f       	subi	r18, 0xFE	; 254
    5732:	3f 4f       	sbci	r19, 0xFF	; 255
    5734:	17 c0       	rjmp	.+46     	; 0x5764 <__mulsf3+0x16e>
    5736:	ca 01       	movw	r24, r20
    5738:	81 70       	andi	r24, 0x01	; 1
    573a:	90 70       	andi	r25, 0x00	; 0
    573c:	89 2b       	or	r24, r25
    573e:	61 f0       	breq	.+24     	; 0x5758 <__mulsf3+0x162>
    5740:	16 95       	lsr	r17
    5742:	07 95       	ror	r16
    5744:	f7 94       	ror	r15
    5746:	e7 94       	ror	r14
    5748:	80 e0       	ldi	r24, 0x00	; 0
    574a:	90 e0       	ldi	r25, 0x00	; 0
    574c:	a0 e0       	ldi	r26, 0x00	; 0
    574e:	b0 e8       	ldi	r27, 0x80	; 128
    5750:	e8 2a       	or	r14, r24
    5752:	f9 2a       	or	r15, r25
    5754:	0a 2b       	or	r16, r26
    5756:	1b 2b       	or	r17, r27
    5758:	76 95       	lsr	r23
    575a:	67 95       	ror	r22
    575c:	57 95       	ror	r21
    575e:	47 95       	ror	r20
    5760:	2f 5f       	subi	r18, 0xFF	; 255
    5762:	3f 4f       	sbci	r19, 0xFF	; 255
    5764:	77 fd       	sbrc	r23, 7
    5766:	e7 cf       	rjmp	.-50     	; 0x5736 <__mulsf3+0x140>
    5768:	0c c0       	rjmp	.+24     	; 0x5782 <__mulsf3+0x18c>
    576a:	44 0f       	add	r20, r20
    576c:	55 1f       	adc	r21, r21
    576e:	66 1f       	adc	r22, r22
    5770:	77 1f       	adc	r23, r23
    5772:	17 fd       	sbrc	r17, 7
    5774:	41 60       	ori	r20, 0x01	; 1
    5776:	ee 0c       	add	r14, r14
    5778:	ff 1c       	adc	r15, r15
    577a:	00 1f       	adc	r16, r16
    577c:	11 1f       	adc	r17, r17
    577e:	21 50       	subi	r18, 0x01	; 1
    5780:	30 40       	sbci	r19, 0x00	; 0
    5782:	40 30       	cpi	r20, 0x00	; 0
    5784:	90 e0       	ldi	r25, 0x00	; 0
    5786:	59 07       	cpc	r21, r25
    5788:	90 e0       	ldi	r25, 0x00	; 0
    578a:	69 07       	cpc	r22, r25
    578c:	90 e4       	ldi	r25, 0x40	; 64
    578e:	79 07       	cpc	r23, r25
    5790:	60 f3       	brcs	.-40     	; 0x576a <__mulsf3+0x174>
    5792:	2b 8f       	std	Y+27, r18	; 0x1b
    5794:	3c 8f       	std	Y+28, r19	; 0x1c
    5796:	db 01       	movw	r26, r22
    5798:	ca 01       	movw	r24, r20
    579a:	8f 77       	andi	r24, 0x7F	; 127
    579c:	90 70       	andi	r25, 0x00	; 0
    579e:	a0 70       	andi	r26, 0x00	; 0
    57a0:	b0 70       	andi	r27, 0x00	; 0
    57a2:	80 34       	cpi	r24, 0x40	; 64
    57a4:	91 05       	cpc	r25, r1
    57a6:	a1 05       	cpc	r26, r1
    57a8:	b1 05       	cpc	r27, r1
    57aa:	61 f4       	brne	.+24     	; 0x57c4 <__mulsf3+0x1ce>
    57ac:	47 fd       	sbrc	r20, 7
    57ae:	0a c0       	rjmp	.+20     	; 0x57c4 <__mulsf3+0x1ce>
    57b0:	e1 14       	cp	r14, r1
    57b2:	f1 04       	cpc	r15, r1
    57b4:	01 05       	cpc	r16, r1
    57b6:	11 05       	cpc	r17, r1
    57b8:	29 f0       	breq	.+10     	; 0x57c4 <__mulsf3+0x1ce>
    57ba:	40 5c       	subi	r20, 0xC0	; 192
    57bc:	5f 4f       	sbci	r21, 0xFF	; 255
    57be:	6f 4f       	sbci	r22, 0xFF	; 255
    57c0:	7f 4f       	sbci	r23, 0xFF	; 255
    57c2:	40 78       	andi	r20, 0x80	; 128
    57c4:	1a 8e       	std	Y+26, r1	; 0x1a
    57c6:	fe 17       	cp	r31, r30
    57c8:	11 f0       	breq	.+4      	; 0x57ce <__mulsf3+0x1d8>
    57ca:	81 e0       	ldi	r24, 0x01	; 1
    57cc:	8a 8f       	std	Y+26, r24	; 0x1a
    57ce:	4d 8f       	std	Y+29, r20	; 0x1d
    57d0:	5e 8f       	std	Y+30, r21	; 0x1e
    57d2:	6f 8f       	std	Y+31, r22	; 0x1f
    57d4:	78 a3       	std	Y+32, r23	; 0x20
    57d6:	83 e0       	ldi	r24, 0x03	; 3
    57d8:	89 8f       	std	Y+25, r24	; 0x19
    57da:	ce 01       	movw	r24, r28
    57dc:	49 96       	adiw	r24, 0x19	; 25
    57de:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__pack_f>
    57e2:	a0 96       	adiw	r28, 0x20	; 32
    57e4:	e2 e1       	ldi	r30, 0x12	; 18
    57e6:	0c 94 88 2f 	jmp	0x5f10	; 0x5f10 <__epilogue_restores__>

000057ea <__divsf3>:
    57ea:	a8 e1       	ldi	r26, 0x18	; 24
    57ec:	b0 e0       	ldi	r27, 0x00	; 0
    57ee:	eb ef       	ldi	r30, 0xFB	; 251
    57f0:	fb e2       	ldi	r31, 0x2B	; 43
    57f2:	0c 94 74 2f 	jmp	0x5ee8	; 0x5ee8 <__prologue_saves__+0x10>
    57f6:	69 83       	std	Y+1, r22	; 0x01
    57f8:	7a 83       	std	Y+2, r23	; 0x02
    57fa:	8b 83       	std	Y+3, r24	; 0x03
    57fc:	9c 83       	std	Y+4, r25	; 0x04
    57fe:	2d 83       	std	Y+5, r18	; 0x05
    5800:	3e 83       	std	Y+6, r19	; 0x06
    5802:	4f 83       	std	Y+7, r20	; 0x07
    5804:	58 87       	std	Y+8, r21	; 0x08
    5806:	b9 e0       	ldi	r27, 0x09	; 9
    5808:	eb 2e       	mov	r14, r27
    580a:	f1 2c       	mov	r15, r1
    580c:	ec 0e       	add	r14, r28
    580e:	fd 1e       	adc	r15, r29
    5810:	ce 01       	movw	r24, r28
    5812:	01 96       	adiw	r24, 0x01	; 1
    5814:	b7 01       	movw	r22, r14
    5816:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__unpack_f>
    581a:	8e 01       	movw	r16, r28
    581c:	0f 5e       	subi	r16, 0xEF	; 239
    581e:	1f 4f       	sbci	r17, 0xFF	; 255
    5820:	ce 01       	movw	r24, r28
    5822:	05 96       	adiw	r24, 0x05	; 5
    5824:	b8 01       	movw	r22, r16
    5826:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__unpack_f>
    582a:	29 85       	ldd	r18, Y+9	; 0x09
    582c:	22 30       	cpi	r18, 0x02	; 2
    582e:	08 f4       	brcc	.+2      	; 0x5832 <__divsf3+0x48>
    5830:	7e c0       	rjmp	.+252    	; 0x592e <__divsf3+0x144>
    5832:	39 89       	ldd	r19, Y+17	; 0x11
    5834:	32 30       	cpi	r19, 0x02	; 2
    5836:	10 f4       	brcc	.+4      	; 0x583c <__divsf3+0x52>
    5838:	b8 01       	movw	r22, r16
    583a:	7c c0       	rjmp	.+248    	; 0x5934 <__divsf3+0x14a>
    583c:	8a 85       	ldd	r24, Y+10	; 0x0a
    583e:	9a 89       	ldd	r25, Y+18	; 0x12
    5840:	89 27       	eor	r24, r25
    5842:	8a 87       	std	Y+10, r24	; 0x0a
    5844:	24 30       	cpi	r18, 0x04	; 4
    5846:	11 f0       	breq	.+4      	; 0x584c <__divsf3+0x62>
    5848:	22 30       	cpi	r18, 0x02	; 2
    584a:	31 f4       	brne	.+12     	; 0x5858 <__divsf3+0x6e>
    584c:	23 17       	cp	r18, r19
    584e:	09 f0       	breq	.+2      	; 0x5852 <__divsf3+0x68>
    5850:	6e c0       	rjmp	.+220    	; 0x592e <__divsf3+0x144>
    5852:	63 e7       	ldi	r22, 0x73	; 115
    5854:	71 e0       	ldi	r23, 0x01	; 1
    5856:	6e c0       	rjmp	.+220    	; 0x5934 <__divsf3+0x14a>
    5858:	34 30       	cpi	r19, 0x04	; 4
    585a:	39 f4       	brne	.+14     	; 0x586a <__divsf3+0x80>
    585c:	1d 86       	std	Y+13, r1	; 0x0d
    585e:	1e 86       	std	Y+14, r1	; 0x0e
    5860:	1f 86       	std	Y+15, r1	; 0x0f
    5862:	18 8a       	std	Y+16, r1	; 0x10
    5864:	1c 86       	std	Y+12, r1	; 0x0c
    5866:	1b 86       	std	Y+11, r1	; 0x0b
    5868:	04 c0       	rjmp	.+8      	; 0x5872 <__divsf3+0x88>
    586a:	32 30       	cpi	r19, 0x02	; 2
    586c:	21 f4       	brne	.+8      	; 0x5876 <__divsf3+0x8c>
    586e:	84 e0       	ldi	r24, 0x04	; 4
    5870:	89 87       	std	Y+9, r24	; 0x09
    5872:	b7 01       	movw	r22, r14
    5874:	5f c0       	rjmp	.+190    	; 0x5934 <__divsf3+0x14a>
    5876:	2b 85       	ldd	r18, Y+11	; 0x0b
    5878:	3c 85       	ldd	r19, Y+12	; 0x0c
    587a:	8b 89       	ldd	r24, Y+19	; 0x13
    587c:	9c 89       	ldd	r25, Y+20	; 0x14
    587e:	28 1b       	sub	r18, r24
    5880:	39 0b       	sbc	r19, r25
    5882:	3c 87       	std	Y+12, r19	; 0x0c
    5884:	2b 87       	std	Y+11, r18	; 0x0b
    5886:	ed 84       	ldd	r14, Y+13	; 0x0d
    5888:	fe 84       	ldd	r15, Y+14	; 0x0e
    588a:	0f 85       	ldd	r16, Y+15	; 0x0f
    588c:	18 89       	ldd	r17, Y+16	; 0x10
    588e:	ad 88       	ldd	r10, Y+21	; 0x15
    5890:	be 88       	ldd	r11, Y+22	; 0x16
    5892:	cf 88       	ldd	r12, Y+23	; 0x17
    5894:	d8 8c       	ldd	r13, Y+24	; 0x18
    5896:	ea 14       	cp	r14, r10
    5898:	fb 04       	cpc	r15, r11
    589a:	0c 05       	cpc	r16, r12
    589c:	1d 05       	cpc	r17, r13
    589e:	40 f4       	brcc	.+16     	; 0x58b0 <__divsf3+0xc6>
    58a0:	ee 0c       	add	r14, r14
    58a2:	ff 1c       	adc	r15, r15
    58a4:	00 1f       	adc	r16, r16
    58a6:	11 1f       	adc	r17, r17
    58a8:	21 50       	subi	r18, 0x01	; 1
    58aa:	30 40       	sbci	r19, 0x00	; 0
    58ac:	3c 87       	std	Y+12, r19	; 0x0c
    58ae:	2b 87       	std	Y+11, r18	; 0x0b
    58b0:	20 e0       	ldi	r18, 0x00	; 0
    58b2:	30 e0       	ldi	r19, 0x00	; 0
    58b4:	40 e0       	ldi	r20, 0x00	; 0
    58b6:	50 e0       	ldi	r21, 0x00	; 0
    58b8:	80 e0       	ldi	r24, 0x00	; 0
    58ba:	90 e0       	ldi	r25, 0x00	; 0
    58bc:	a0 e0       	ldi	r26, 0x00	; 0
    58be:	b0 e4       	ldi	r27, 0x40	; 64
    58c0:	60 e0       	ldi	r22, 0x00	; 0
    58c2:	70 e0       	ldi	r23, 0x00	; 0
    58c4:	ea 14       	cp	r14, r10
    58c6:	fb 04       	cpc	r15, r11
    58c8:	0c 05       	cpc	r16, r12
    58ca:	1d 05       	cpc	r17, r13
    58cc:	40 f0       	brcs	.+16     	; 0x58de <__divsf3+0xf4>
    58ce:	28 2b       	or	r18, r24
    58d0:	39 2b       	or	r19, r25
    58d2:	4a 2b       	or	r20, r26
    58d4:	5b 2b       	or	r21, r27
    58d6:	ea 18       	sub	r14, r10
    58d8:	fb 08       	sbc	r15, r11
    58da:	0c 09       	sbc	r16, r12
    58dc:	1d 09       	sbc	r17, r13
    58de:	b6 95       	lsr	r27
    58e0:	a7 95       	ror	r26
    58e2:	97 95       	ror	r25
    58e4:	87 95       	ror	r24
    58e6:	ee 0c       	add	r14, r14
    58e8:	ff 1c       	adc	r15, r15
    58ea:	00 1f       	adc	r16, r16
    58ec:	11 1f       	adc	r17, r17
    58ee:	6f 5f       	subi	r22, 0xFF	; 255
    58f0:	7f 4f       	sbci	r23, 0xFF	; 255
    58f2:	6f 31       	cpi	r22, 0x1F	; 31
    58f4:	71 05       	cpc	r23, r1
    58f6:	31 f7       	brne	.-52     	; 0x58c4 <__divsf3+0xda>
    58f8:	da 01       	movw	r26, r20
    58fa:	c9 01       	movw	r24, r18
    58fc:	8f 77       	andi	r24, 0x7F	; 127
    58fe:	90 70       	andi	r25, 0x00	; 0
    5900:	a0 70       	andi	r26, 0x00	; 0
    5902:	b0 70       	andi	r27, 0x00	; 0
    5904:	80 34       	cpi	r24, 0x40	; 64
    5906:	91 05       	cpc	r25, r1
    5908:	a1 05       	cpc	r26, r1
    590a:	b1 05       	cpc	r27, r1
    590c:	61 f4       	brne	.+24     	; 0x5926 <__divsf3+0x13c>
    590e:	27 fd       	sbrc	r18, 7
    5910:	0a c0       	rjmp	.+20     	; 0x5926 <__divsf3+0x13c>
    5912:	e1 14       	cp	r14, r1
    5914:	f1 04       	cpc	r15, r1
    5916:	01 05       	cpc	r16, r1
    5918:	11 05       	cpc	r17, r1
    591a:	29 f0       	breq	.+10     	; 0x5926 <__divsf3+0x13c>
    591c:	20 5c       	subi	r18, 0xC0	; 192
    591e:	3f 4f       	sbci	r19, 0xFF	; 255
    5920:	4f 4f       	sbci	r20, 0xFF	; 255
    5922:	5f 4f       	sbci	r21, 0xFF	; 255
    5924:	20 78       	andi	r18, 0x80	; 128
    5926:	2d 87       	std	Y+13, r18	; 0x0d
    5928:	3e 87       	std	Y+14, r19	; 0x0e
    592a:	4f 87       	std	Y+15, r20	; 0x0f
    592c:	58 8b       	std	Y+16, r21	; 0x10
    592e:	be 01       	movw	r22, r28
    5930:	67 5f       	subi	r22, 0xF7	; 247
    5932:	7f 4f       	sbci	r23, 0xFF	; 255
    5934:	cb 01       	movw	r24, r22
    5936:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__pack_f>
    593a:	68 96       	adiw	r28, 0x18	; 24
    593c:	ea e0       	ldi	r30, 0x0A	; 10
    593e:	0c 94 90 2f 	jmp	0x5f20	; 0x5f20 <__epilogue_restores__+0x10>

00005942 <__gtsf2>:
    5942:	a8 e1       	ldi	r26, 0x18	; 24
    5944:	b0 e0       	ldi	r27, 0x00	; 0
    5946:	e7 ea       	ldi	r30, 0xA7	; 167
    5948:	fc e2       	ldi	r31, 0x2C	; 44
    594a:	0c 94 78 2f 	jmp	0x5ef0	; 0x5ef0 <__prologue_saves__+0x18>
    594e:	69 83       	std	Y+1, r22	; 0x01
    5950:	7a 83       	std	Y+2, r23	; 0x02
    5952:	8b 83       	std	Y+3, r24	; 0x03
    5954:	9c 83       	std	Y+4, r25	; 0x04
    5956:	2d 83       	std	Y+5, r18	; 0x05
    5958:	3e 83       	std	Y+6, r19	; 0x06
    595a:	4f 83       	std	Y+7, r20	; 0x07
    595c:	58 87       	std	Y+8, r21	; 0x08
    595e:	89 e0       	ldi	r24, 0x09	; 9
    5960:	e8 2e       	mov	r14, r24
    5962:	f1 2c       	mov	r15, r1
    5964:	ec 0e       	add	r14, r28
    5966:	fd 1e       	adc	r15, r29
    5968:	ce 01       	movw	r24, r28
    596a:	01 96       	adiw	r24, 0x01	; 1
    596c:	b7 01       	movw	r22, r14
    596e:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__unpack_f>
    5972:	8e 01       	movw	r16, r28
    5974:	0f 5e       	subi	r16, 0xEF	; 239
    5976:	1f 4f       	sbci	r17, 0xFF	; 255
    5978:	ce 01       	movw	r24, r28
    597a:	05 96       	adiw	r24, 0x05	; 5
    597c:	b8 01       	movw	r22, r16
    597e:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__unpack_f>
    5982:	89 85       	ldd	r24, Y+9	; 0x09
    5984:	82 30       	cpi	r24, 0x02	; 2
    5986:	40 f0       	brcs	.+16     	; 0x5998 <__gtsf2+0x56>
    5988:	89 89       	ldd	r24, Y+17	; 0x11
    598a:	82 30       	cpi	r24, 0x02	; 2
    598c:	28 f0       	brcs	.+10     	; 0x5998 <__gtsf2+0x56>
    598e:	c7 01       	movw	r24, r14
    5990:	b8 01       	movw	r22, r16
    5992:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <__fpcmp_parts_f>
    5996:	01 c0       	rjmp	.+2      	; 0x599a <__gtsf2+0x58>
    5998:	8f ef       	ldi	r24, 0xFF	; 255
    599a:	68 96       	adiw	r28, 0x18	; 24
    599c:	e6 e0       	ldi	r30, 0x06	; 6
    599e:	0c 94 94 2f 	jmp	0x5f28	; 0x5f28 <__epilogue_restores__+0x18>

000059a2 <__gesf2>:
    59a2:	a8 e1       	ldi	r26, 0x18	; 24
    59a4:	b0 e0       	ldi	r27, 0x00	; 0
    59a6:	e7 ed       	ldi	r30, 0xD7	; 215
    59a8:	fc e2       	ldi	r31, 0x2C	; 44
    59aa:	0c 94 78 2f 	jmp	0x5ef0	; 0x5ef0 <__prologue_saves__+0x18>
    59ae:	69 83       	std	Y+1, r22	; 0x01
    59b0:	7a 83       	std	Y+2, r23	; 0x02
    59b2:	8b 83       	std	Y+3, r24	; 0x03
    59b4:	9c 83       	std	Y+4, r25	; 0x04
    59b6:	2d 83       	std	Y+5, r18	; 0x05
    59b8:	3e 83       	std	Y+6, r19	; 0x06
    59ba:	4f 83       	std	Y+7, r20	; 0x07
    59bc:	58 87       	std	Y+8, r21	; 0x08
    59be:	89 e0       	ldi	r24, 0x09	; 9
    59c0:	e8 2e       	mov	r14, r24
    59c2:	f1 2c       	mov	r15, r1
    59c4:	ec 0e       	add	r14, r28
    59c6:	fd 1e       	adc	r15, r29
    59c8:	ce 01       	movw	r24, r28
    59ca:	01 96       	adiw	r24, 0x01	; 1
    59cc:	b7 01       	movw	r22, r14
    59ce:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__unpack_f>
    59d2:	8e 01       	movw	r16, r28
    59d4:	0f 5e       	subi	r16, 0xEF	; 239
    59d6:	1f 4f       	sbci	r17, 0xFF	; 255
    59d8:	ce 01       	movw	r24, r28
    59da:	05 96       	adiw	r24, 0x05	; 5
    59dc:	b8 01       	movw	r22, r16
    59de:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__unpack_f>
    59e2:	89 85       	ldd	r24, Y+9	; 0x09
    59e4:	82 30       	cpi	r24, 0x02	; 2
    59e6:	40 f0       	brcs	.+16     	; 0x59f8 <__gesf2+0x56>
    59e8:	89 89       	ldd	r24, Y+17	; 0x11
    59ea:	82 30       	cpi	r24, 0x02	; 2
    59ec:	28 f0       	brcs	.+10     	; 0x59f8 <__gesf2+0x56>
    59ee:	c7 01       	movw	r24, r14
    59f0:	b8 01       	movw	r22, r16
    59f2:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <__fpcmp_parts_f>
    59f6:	01 c0       	rjmp	.+2      	; 0x59fa <__gesf2+0x58>
    59f8:	8f ef       	ldi	r24, 0xFF	; 255
    59fa:	68 96       	adiw	r28, 0x18	; 24
    59fc:	e6 e0       	ldi	r30, 0x06	; 6
    59fe:	0c 94 94 2f 	jmp	0x5f28	; 0x5f28 <__epilogue_restores__+0x18>

00005a02 <__ltsf2>:
    5a02:	a8 e1       	ldi	r26, 0x18	; 24
    5a04:	b0 e0       	ldi	r27, 0x00	; 0
    5a06:	e7 e0       	ldi	r30, 0x07	; 7
    5a08:	fd e2       	ldi	r31, 0x2D	; 45
    5a0a:	0c 94 78 2f 	jmp	0x5ef0	; 0x5ef0 <__prologue_saves__+0x18>
    5a0e:	69 83       	std	Y+1, r22	; 0x01
    5a10:	7a 83       	std	Y+2, r23	; 0x02
    5a12:	8b 83       	std	Y+3, r24	; 0x03
    5a14:	9c 83       	std	Y+4, r25	; 0x04
    5a16:	2d 83       	std	Y+5, r18	; 0x05
    5a18:	3e 83       	std	Y+6, r19	; 0x06
    5a1a:	4f 83       	std	Y+7, r20	; 0x07
    5a1c:	58 87       	std	Y+8, r21	; 0x08
    5a1e:	89 e0       	ldi	r24, 0x09	; 9
    5a20:	e8 2e       	mov	r14, r24
    5a22:	f1 2c       	mov	r15, r1
    5a24:	ec 0e       	add	r14, r28
    5a26:	fd 1e       	adc	r15, r29
    5a28:	ce 01       	movw	r24, r28
    5a2a:	01 96       	adiw	r24, 0x01	; 1
    5a2c:	b7 01       	movw	r22, r14
    5a2e:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__unpack_f>
    5a32:	8e 01       	movw	r16, r28
    5a34:	0f 5e       	subi	r16, 0xEF	; 239
    5a36:	1f 4f       	sbci	r17, 0xFF	; 255
    5a38:	ce 01       	movw	r24, r28
    5a3a:	05 96       	adiw	r24, 0x05	; 5
    5a3c:	b8 01       	movw	r22, r16
    5a3e:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__unpack_f>
    5a42:	89 85       	ldd	r24, Y+9	; 0x09
    5a44:	82 30       	cpi	r24, 0x02	; 2
    5a46:	40 f0       	brcs	.+16     	; 0x5a58 <__ltsf2+0x56>
    5a48:	89 89       	ldd	r24, Y+17	; 0x11
    5a4a:	82 30       	cpi	r24, 0x02	; 2
    5a4c:	28 f0       	brcs	.+10     	; 0x5a58 <__ltsf2+0x56>
    5a4e:	c7 01       	movw	r24, r14
    5a50:	b8 01       	movw	r22, r16
    5a52:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <__fpcmp_parts_f>
    5a56:	01 c0       	rjmp	.+2      	; 0x5a5a <__ltsf2+0x58>
    5a58:	81 e0       	ldi	r24, 0x01	; 1
    5a5a:	68 96       	adiw	r28, 0x18	; 24
    5a5c:	e6 e0       	ldi	r30, 0x06	; 6
    5a5e:	0c 94 94 2f 	jmp	0x5f28	; 0x5f28 <__epilogue_restores__+0x18>

00005a62 <__fixsfsi>:
    5a62:	ac e0       	ldi	r26, 0x0C	; 12
    5a64:	b0 e0       	ldi	r27, 0x00	; 0
    5a66:	e7 e3       	ldi	r30, 0x37	; 55
    5a68:	fd e2       	ldi	r31, 0x2D	; 45
    5a6a:	0c 94 7c 2f 	jmp	0x5ef8	; 0x5ef8 <__prologue_saves__+0x20>
    5a6e:	69 83       	std	Y+1, r22	; 0x01
    5a70:	7a 83       	std	Y+2, r23	; 0x02
    5a72:	8b 83       	std	Y+3, r24	; 0x03
    5a74:	9c 83       	std	Y+4, r25	; 0x04
    5a76:	ce 01       	movw	r24, r28
    5a78:	01 96       	adiw	r24, 0x01	; 1
    5a7a:	be 01       	movw	r22, r28
    5a7c:	6b 5f       	subi	r22, 0xFB	; 251
    5a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    5a80:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__unpack_f>
    5a84:	8d 81       	ldd	r24, Y+5	; 0x05
    5a86:	82 30       	cpi	r24, 0x02	; 2
    5a88:	61 f1       	breq	.+88     	; 0x5ae2 <__fixsfsi+0x80>
    5a8a:	82 30       	cpi	r24, 0x02	; 2
    5a8c:	50 f1       	brcs	.+84     	; 0x5ae2 <__fixsfsi+0x80>
    5a8e:	84 30       	cpi	r24, 0x04	; 4
    5a90:	21 f4       	brne	.+8      	; 0x5a9a <__fixsfsi+0x38>
    5a92:	8e 81       	ldd	r24, Y+6	; 0x06
    5a94:	88 23       	and	r24, r24
    5a96:	51 f1       	breq	.+84     	; 0x5aec <__fixsfsi+0x8a>
    5a98:	2e c0       	rjmp	.+92     	; 0x5af6 <__fixsfsi+0x94>
    5a9a:	2f 81       	ldd	r18, Y+7	; 0x07
    5a9c:	38 85       	ldd	r19, Y+8	; 0x08
    5a9e:	37 fd       	sbrc	r19, 7
    5aa0:	20 c0       	rjmp	.+64     	; 0x5ae2 <__fixsfsi+0x80>
    5aa2:	6e 81       	ldd	r22, Y+6	; 0x06
    5aa4:	2f 31       	cpi	r18, 0x1F	; 31
    5aa6:	31 05       	cpc	r19, r1
    5aa8:	1c f0       	brlt	.+6      	; 0x5ab0 <__fixsfsi+0x4e>
    5aaa:	66 23       	and	r22, r22
    5aac:	f9 f0       	breq	.+62     	; 0x5aec <__fixsfsi+0x8a>
    5aae:	23 c0       	rjmp	.+70     	; 0x5af6 <__fixsfsi+0x94>
    5ab0:	8e e1       	ldi	r24, 0x1E	; 30
    5ab2:	90 e0       	ldi	r25, 0x00	; 0
    5ab4:	82 1b       	sub	r24, r18
    5ab6:	93 0b       	sbc	r25, r19
    5ab8:	29 85       	ldd	r18, Y+9	; 0x09
    5aba:	3a 85       	ldd	r19, Y+10	; 0x0a
    5abc:	4b 85       	ldd	r20, Y+11	; 0x0b
    5abe:	5c 85       	ldd	r21, Y+12	; 0x0c
    5ac0:	04 c0       	rjmp	.+8      	; 0x5aca <__fixsfsi+0x68>
    5ac2:	56 95       	lsr	r21
    5ac4:	47 95       	ror	r20
    5ac6:	37 95       	ror	r19
    5ac8:	27 95       	ror	r18
    5aca:	8a 95       	dec	r24
    5acc:	d2 f7       	brpl	.-12     	; 0x5ac2 <__fixsfsi+0x60>
    5ace:	66 23       	and	r22, r22
    5ad0:	b1 f0       	breq	.+44     	; 0x5afe <__fixsfsi+0x9c>
    5ad2:	50 95       	com	r21
    5ad4:	40 95       	com	r20
    5ad6:	30 95       	com	r19
    5ad8:	21 95       	neg	r18
    5ada:	3f 4f       	sbci	r19, 0xFF	; 255
    5adc:	4f 4f       	sbci	r20, 0xFF	; 255
    5ade:	5f 4f       	sbci	r21, 0xFF	; 255
    5ae0:	0e c0       	rjmp	.+28     	; 0x5afe <__fixsfsi+0x9c>
    5ae2:	20 e0       	ldi	r18, 0x00	; 0
    5ae4:	30 e0       	ldi	r19, 0x00	; 0
    5ae6:	40 e0       	ldi	r20, 0x00	; 0
    5ae8:	50 e0       	ldi	r21, 0x00	; 0
    5aea:	09 c0       	rjmp	.+18     	; 0x5afe <__fixsfsi+0x9c>
    5aec:	2f ef       	ldi	r18, 0xFF	; 255
    5aee:	3f ef       	ldi	r19, 0xFF	; 255
    5af0:	4f ef       	ldi	r20, 0xFF	; 255
    5af2:	5f e7       	ldi	r21, 0x7F	; 127
    5af4:	04 c0       	rjmp	.+8      	; 0x5afe <__fixsfsi+0x9c>
    5af6:	20 e0       	ldi	r18, 0x00	; 0
    5af8:	30 e0       	ldi	r19, 0x00	; 0
    5afa:	40 e0       	ldi	r20, 0x00	; 0
    5afc:	50 e8       	ldi	r21, 0x80	; 128
    5afe:	b9 01       	movw	r22, r18
    5b00:	ca 01       	movw	r24, r20
    5b02:	2c 96       	adiw	r28, 0x0c	; 12
    5b04:	e2 e0       	ldi	r30, 0x02	; 2
    5b06:	0c 94 98 2f 	jmp	0x5f30	; 0x5f30 <__epilogue_restores__+0x20>

00005b0a <__pack_f>:
    5b0a:	df 92       	push	r13
    5b0c:	ef 92       	push	r14
    5b0e:	ff 92       	push	r15
    5b10:	0f 93       	push	r16
    5b12:	1f 93       	push	r17
    5b14:	fc 01       	movw	r30, r24
    5b16:	e4 80       	ldd	r14, Z+4	; 0x04
    5b18:	f5 80       	ldd	r15, Z+5	; 0x05
    5b1a:	06 81       	ldd	r16, Z+6	; 0x06
    5b1c:	17 81       	ldd	r17, Z+7	; 0x07
    5b1e:	d1 80       	ldd	r13, Z+1	; 0x01
    5b20:	80 81       	ld	r24, Z
    5b22:	82 30       	cpi	r24, 0x02	; 2
    5b24:	48 f4       	brcc	.+18     	; 0x5b38 <__pack_f+0x2e>
    5b26:	80 e0       	ldi	r24, 0x00	; 0
    5b28:	90 e0       	ldi	r25, 0x00	; 0
    5b2a:	a0 e1       	ldi	r26, 0x10	; 16
    5b2c:	b0 e0       	ldi	r27, 0x00	; 0
    5b2e:	e8 2a       	or	r14, r24
    5b30:	f9 2a       	or	r15, r25
    5b32:	0a 2b       	or	r16, r26
    5b34:	1b 2b       	or	r17, r27
    5b36:	a5 c0       	rjmp	.+330    	; 0x5c82 <__pack_f+0x178>
    5b38:	84 30       	cpi	r24, 0x04	; 4
    5b3a:	09 f4       	brne	.+2      	; 0x5b3e <__pack_f+0x34>
    5b3c:	9f c0       	rjmp	.+318    	; 0x5c7c <__pack_f+0x172>
    5b3e:	82 30       	cpi	r24, 0x02	; 2
    5b40:	21 f4       	brne	.+8      	; 0x5b4a <__pack_f+0x40>
    5b42:	ee 24       	eor	r14, r14
    5b44:	ff 24       	eor	r15, r15
    5b46:	87 01       	movw	r16, r14
    5b48:	05 c0       	rjmp	.+10     	; 0x5b54 <__pack_f+0x4a>
    5b4a:	e1 14       	cp	r14, r1
    5b4c:	f1 04       	cpc	r15, r1
    5b4e:	01 05       	cpc	r16, r1
    5b50:	11 05       	cpc	r17, r1
    5b52:	19 f4       	brne	.+6      	; 0x5b5a <__pack_f+0x50>
    5b54:	e0 e0       	ldi	r30, 0x00	; 0
    5b56:	f0 e0       	ldi	r31, 0x00	; 0
    5b58:	96 c0       	rjmp	.+300    	; 0x5c86 <__pack_f+0x17c>
    5b5a:	62 81       	ldd	r22, Z+2	; 0x02
    5b5c:	73 81       	ldd	r23, Z+3	; 0x03
    5b5e:	9f ef       	ldi	r25, 0xFF	; 255
    5b60:	62 38       	cpi	r22, 0x82	; 130
    5b62:	79 07       	cpc	r23, r25
    5b64:	0c f0       	brlt	.+2      	; 0x5b68 <__pack_f+0x5e>
    5b66:	5b c0       	rjmp	.+182    	; 0x5c1e <__pack_f+0x114>
    5b68:	22 e8       	ldi	r18, 0x82	; 130
    5b6a:	3f ef       	ldi	r19, 0xFF	; 255
    5b6c:	26 1b       	sub	r18, r22
    5b6e:	37 0b       	sbc	r19, r23
    5b70:	2a 31       	cpi	r18, 0x1A	; 26
    5b72:	31 05       	cpc	r19, r1
    5b74:	2c f0       	brlt	.+10     	; 0x5b80 <__pack_f+0x76>
    5b76:	20 e0       	ldi	r18, 0x00	; 0
    5b78:	30 e0       	ldi	r19, 0x00	; 0
    5b7a:	40 e0       	ldi	r20, 0x00	; 0
    5b7c:	50 e0       	ldi	r21, 0x00	; 0
    5b7e:	2a c0       	rjmp	.+84     	; 0x5bd4 <__pack_f+0xca>
    5b80:	b8 01       	movw	r22, r16
    5b82:	a7 01       	movw	r20, r14
    5b84:	02 2e       	mov	r0, r18
    5b86:	04 c0       	rjmp	.+8      	; 0x5b90 <__pack_f+0x86>
    5b88:	76 95       	lsr	r23
    5b8a:	67 95       	ror	r22
    5b8c:	57 95       	ror	r21
    5b8e:	47 95       	ror	r20
    5b90:	0a 94       	dec	r0
    5b92:	d2 f7       	brpl	.-12     	; 0x5b88 <__pack_f+0x7e>
    5b94:	81 e0       	ldi	r24, 0x01	; 1
    5b96:	90 e0       	ldi	r25, 0x00	; 0
    5b98:	a0 e0       	ldi	r26, 0x00	; 0
    5b9a:	b0 e0       	ldi	r27, 0x00	; 0
    5b9c:	04 c0       	rjmp	.+8      	; 0x5ba6 <__pack_f+0x9c>
    5b9e:	88 0f       	add	r24, r24
    5ba0:	99 1f       	adc	r25, r25
    5ba2:	aa 1f       	adc	r26, r26
    5ba4:	bb 1f       	adc	r27, r27
    5ba6:	2a 95       	dec	r18
    5ba8:	d2 f7       	brpl	.-12     	; 0x5b9e <__pack_f+0x94>
    5baa:	01 97       	sbiw	r24, 0x01	; 1
    5bac:	a1 09       	sbc	r26, r1
    5bae:	b1 09       	sbc	r27, r1
    5bb0:	8e 21       	and	r24, r14
    5bb2:	9f 21       	and	r25, r15
    5bb4:	a0 23       	and	r26, r16
    5bb6:	b1 23       	and	r27, r17
    5bb8:	00 97       	sbiw	r24, 0x00	; 0
    5bba:	a1 05       	cpc	r26, r1
    5bbc:	b1 05       	cpc	r27, r1
    5bbe:	21 f0       	breq	.+8      	; 0x5bc8 <__pack_f+0xbe>
    5bc0:	81 e0       	ldi	r24, 0x01	; 1
    5bc2:	90 e0       	ldi	r25, 0x00	; 0
    5bc4:	a0 e0       	ldi	r26, 0x00	; 0
    5bc6:	b0 e0       	ldi	r27, 0x00	; 0
    5bc8:	9a 01       	movw	r18, r20
    5bca:	ab 01       	movw	r20, r22
    5bcc:	28 2b       	or	r18, r24
    5bce:	39 2b       	or	r19, r25
    5bd0:	4a 2b       	or	r20, r26
    5bd2:	5b 2b       	or	r21, r27
    5bd4:	da 01       	movw	r26, r20
    5bd6:	c9 01       	movw	r24, r18
    5bd8:	8f 77       	andi	r24, 0x7F	; 127
    5bda:	90 70       	andi	r25, 0x00	; 0
    5bdc:	a0 70       	andi	r26, 0x00	; 0
    5bde:	b0 70       	andi	r27, 0x00	; 0
    5be0:	80 34       	cpi	r24, 0x40	; 64
    5be2:	91 05       	cpc	r25, r1
    5be4:	a1 05       	cpc	r26, r1
    5be6:	b1 05       	cpc	r27, r1
    5be8:	39 f4       	brne	.+14     	; 0x5bf8 <__pack_f+0xee>
    5bea:	27 ff       	sbrs	r18, 7
    5bec:	09 c0       	rjmp	.+18     	; 0x5c00 <__pack_f+0xf6>
    5bee:	20 5c       	subi	r18, 0xC0	; 192
    5bf0:	3f 4f       	sbci	r19, 0xFF	; 255
    5bf2:	4f 4f       	sbci	r20, 0xFF	; 255
    5bf4:	5f 4f       	sbci	r21, 0xFF	; 255
    5bf6:	04 c0       	rjmp	.+8      	; 0x5c00 <__pack_f+0xf6>
    5bf8:	21 5c       	subi	r18, 0xC1	; 193
    5bfa:	3f 4f       	sbci	r19, 0xFF	; 255
    5bfc:	4f 4f       	sbci	r20, 0xFF	; 255
    5bfe:	5f 4f       	sbci	r21, 0xFF	; 255
    5c00:	e0 e0       	ldi	r30, 0x00	; 0
    5c02:	f0 e0       	ldi	r31, 0x00	; 0
    5c04:	20 30       	cpi	r18, 0x00	; 0
    5c06:	a0 e0       	ldi	r26, 0x00	; 0
    5c08:	3a 07       	cpc	r19, r26
    5c0a:	a0 e0       	ldi	r26, 0x00	; 0
    5c0c:	4a 07       	cpc	r20, r26
    5c0e:	a0 e4       	ldi	r26, 0x40	; 64
    5c10:	5a 07       	cpc	r21, r26
    5c12:	10 f0       	brcs	.+4      	; 0x5c18 <__pack_f+0x10e>
    5c14:	e1 e0       	ldi	r30, 0x01	; 1
    5c16:	f0 e0       	ldi	r31, 0x00	; 0
    5c18:	79 01       	movw	r14, r18
    5c1a:	8a 01       	movw	r16, r20
    5c1c:	27 c0       	rjmp	.+78     	; 0x5c6c <__pack_f+0x162>
    5c1e:	60 38       	cpi	r22, 0x80	; 128
    5c20:	71 05       	cpc	r23, r1
    5c22:	64 f5       	brge	.+88     	; 0x5c7c <__pack_f+0x172>
    5c24:	fb 01       	movw	r30, r22
    5c26:	e1 58       	subi	r30, 0x81	; 129
    5c28:	ff 4f       	sbci	r31, 0xFF	; 255
    5c2a:	d8 01       	movw	r26, r16
    5c2c:	c7 01       	movw	r24, r14
    5c2e:	8f 77       	andi	r24, 0x7F	; 127
    5c30:	90 70       	andi	r25, 0x00	; 0
    5c32:	a0 70       	andi	r26, 0x00	; 0
    5c34:	b0 70       	andi	r27, 0x00	; 0
    5c36:	80 34       	cpi	r24, 0x40	; 64
    5c38:	91 05       	cpc	r25, r1
    5c3a:	a1 05       	cpc	r26, r1
    5c3c:	b1 05       	cpc	r27, r1
    5c3e:	39 f4       	brne	.+14     	; 0x5c4e <__pack_f+0x144>
    5c40:	e7 fe       	sbrs	r14, 7
    5c42:	0d c0       	rjmp	.+26     	; 0x5c5e <__pack_f+0x154>
    5c44:	80 e4       	ldi	r24, 0x40	; 64
    5c46:	90 e0       	ldi	r25, 0x00	; 0
    5c48:	a0 e0       	ldi	r26, 0x00	; 0
    5c4a:	b0 e0       	ldi	r27, 0x00	; 0
    5c4c:	04 c0       	rjmp	.+8      	; 0x5c56 <__pack_f+0x14c>
    5c4e:	8f e3       	ldi	r24, 0x3F	; 63
    5c50:	90 e0       	ldi	r25, 0x00	; 0
    5c52:	a0 e0       	ldi	r26, 0x00	; 0
    5c54:	b0 e0       	ldi	r27, 0x00	; 0
    5c56:	e8 0e       	add	r14, r24
    5c58:	f9 1e       	adc	r15, r25
    5c5a:	0a 1f       	adc	r16, r26
    5c5c:	1b 1f       	adc	r17, r27
    5c5e:	17 ff       	sbrs	r17, 7
    5c60:	05 c0       	rjmp	.+10     	; 0x5c6c <__pack_f+0x162>
    5c62:	16 95       	lsr	r17
    5c64:	07 95       	ror	r16
    5c66:	f7 94       	ror	r15
    5c68:	e7 94       	ror	r14
    5c6a:	31 96       	adiw	r30, 0x01	; 1
    5c6c:	87 e0       	ldi	r24, 0x07	; 7
    5c6e:	16 95       	lsr	r17
    5c70:	07 95       	ror	r16
    5c72:	f7 94       	ror	r15
    5c74:	e7 94       	ror	r14
    5c76:	8a 95       	dec	r24
    5c78:	d1 f7       	brne	.-12     	; 0x5c6e <__pack_f+0x164>
    5c7a:	05 c0       	rjmp	.+10     	; 0x5c86 <__pack_f+0x17c>
    5c7c:	ee 24       	eor	r14, r14
    5c7e:	ff 24       	eor	r15, r15
    5c80:	87 01       	movw	r16, r14
    5c82:	ef ef       	ldi	r30, 0xFF	; 255
    5c84:	f0 e0       	ldi	r31, 0x00	; 0
    5c86:	6e 2f       	mov	r22, r30
    5c88:	67 95       	ror	r22
    5c8a:	66 27       	eor	r22, r22
    5c8c:	67 95       	ror	r22
    5c8e:	90 2f       	mov	r25, r16
    5c90:	9f 77       	andi	r25, 0x7F	; 127
    5c92:	d7 94       	ror	r13
    5c94:	dd 24       	eor	r13, r13
    5c96:	d7 94       	ror	r13
    5c98:	8e 2f       	mov	r24, r30
    5c9a:	86 95       	lsr	r24
    5c9c:	49 2f       	mov	r20, r25
    5c9e:	46 2b       	or	r20, r22
    5ca0:	58 2f       	mov	r21, r24
    5ca2:	5d 29       	or	r21, r13
    5ca4:	b7 01       	movw	r22, r14
    5ca6:	ca 01       	movw	r24, r20
    5ca8:	1f 91       	pop	r17
    5caa:	0f 91       	pop	r16
    5cac:	ff 90       	pop	r15
    5cae:	ef 90       	pop	r14
    5cb0:	df 90       	pop	r13
    5cb2:	08 95       	ret

00005cb4 <__unpack_f>:
    5cb4:	fc 01       	movw	r30, r24
    5cb6:	db 01       	movw	r26, r22
    5cb8:	40 81       	ld	r20, Z
    5cba:	51 81       	ldd	r21, Z+1	; 0x01
    5cbc:	22 81       	ldd	r18, Z+2	; 0x02
    5cbe:	62 2f       	mov	r22, r18
    5cc0:	6f 77       	andi	r22, 0x7F	; 127
    5cc2:	70 e0       	ldi	r23, 0x00	; 0
    5cc4:	22 1f       	adc	r18, r18
    5cc6:	22 27       	eor	r18, r18
    5cc8:	22 1f       	adc	r18, r18
    5cca:	93 81       	ldd	r25, Z+3	; 0x03
    5ccc:	89 2f       	mov	r24, r25
    5cce:	88 0f       	add	r24, r24
    5cd0:	82 2b       	or	r24, r18
    5cd2:	28 2f       	mov	r18, r24
    5cd4:	30 e0       	ldi	r19, 0x00	; 0
    5cd6:	99 1f       	adc	r25, r25
    5cd8:	99 27       	eor	r25, r25
    5cda:	99 1f       	adc	r25, r25
    5cdc:	11 96       	adiw	r26, 0x01	; 1
    5cde:	9c 93       	st	X, r25
    5ce0:	11 97       	sbiw	r26, 0x01	; 1
    5ce2:	21 15       	cp	r18, r1
    5ce4:	31 05       	cpc	r19, r1
    5ce6:	a9 f5       	brne	.+106    	; 0x5d52 <__unpack_f+0x9e>
    5ce8:	41 15       	cp	r20, r1
    5cea:	51 05       	cpc	r21, r1
    5cec:	61 05       	cpc	r22, r1
    5cee:	71 05       	cpc	r23, r1
    5cf0:	11 f4       	brne	.+4      	; 0x5cf6 <__unpack_f+0x42>
    5cf2:	82 e0       	ldi	r24, 0x02	; 2
    5cf4:	37 c0       	rjmp	.+110    	; 0x5d64 <__unpack_f+0xb0>
    5cf6:	82 e8       	ldi	r24, 0x82	; 130
    5cf8:	9f ef       	ldi	r25, 0xFF	; 255
    5cfa:	13 96       	adiw	r26, 0x03	; 3
    5cfc:	9c 93       	st	X, r25
    5cfe:	8e 93       	st	-X, r24
    5d00:	12 97       	sbiw	r26, 0x02	; 2
    5d02:	9a 01       	movw	r18, r20
    5d04:	ab 01       	movw	r20, r22
    5d06:	67 e0       	ldi	r22, 0x07	; 7
    5d08:	22 0f       	add	r18, r18
    5d0a:	33 1f       	adc	r19, r19
    5d0c:	44 1f       	adc	r20, r20
    5d0e:	55 1f       	adc	r21, r21
    5d10:	6a 95       	dec	r22
    5d12:	d1 f7       	brne	.-12     	; 0x5d08 <__unpack_f+0x54>
    5d14:	83 e0       	ldi	r24, 0x03	; 3
    5d16:	8c 93       	st	X, r24
    5d18:	0d c0       	rjmp	.+26     	; 0x5d34 <__unpack_f+0x80>
    5d1a:	22 0f       	add	r18, r18
    5d1c:	33 1f       	adc	r19, r19
    5d1e:	44 1f       	adc	r20, r20
    5d20:	55 1f       	adc	r21, r21
    5d22:	12 96       	adiw	r26, 0x02	; 2
    5d24:	8d 91       	ld	r24, X+
    5d26:	9c 91       	ld	r25, X
    5d28:	13 97       	sbiw	r26, 0x03	; 3
    5d2a:	01 97       	sbiw	r24, 0x01	; 1
    5d2c:	13 96       	adiw	r26, 0x03	; 3
    5d2e:	9c 93       	st	X, r25
    5d30:	8e 93       	st	-X, r24
    5d32:	12 97       	sbiw	r26, 0x02	; 2
    5d34:	20 30       	cpi	r18, 0x00	; 0
    5d36:	80 e0       	ldi	r24, 0x00	; 0
    5d38:	38 07       	cpc	r19, r24
    5d3a:	80 e0       	ldi	r24, 0x00	; 0
    5d3c:	48 07       	cpc	r20, r24
    5d3e:	80 e4       	ldi	r24, 0x40	; 64
    5d40:	58 07       	cpc	r21, r24
    5d42:	58 f3       	brcs	.-42     	; 0x5d1a <__unpack_f+0x66>
    5d44:	14 96       	adiw	r26, 0x04	; 4
    5d46:	2d 93       	st	X+, r18
    5d48:	3d 93       	st	X+, r19
    5d4a:	4d 93       	st	X+, r20
    5d4c:	5c 93       	st	X, r21
    5d4e:	17 97       	sbiw	r26, 0x07	; 7
    5d50:	08 95       	ret
    5d52:	2f 3f       	cpi	r18, 0xFF	; 255
    5d54:	31 05       	cpc	r19, r1
    5d56:	79 f4       	brne	.+30     	; 0x5d76 <__unpack_f+0xc2>
    5d58:	41 15       	cp	r20, r1
    5d5a:	51 05       	cpc	r21, r1
    5d5c:	61 05       	cpc	r22, r1
    5d5e:	71 05       	cpc	r23, r1
    5d60:	19 f4       	brne	.+6      	; 0x5d68 <__unpack_f+0xb4>
    5d62:	84 e0       	ldi	r24, 0x04	; 4
    5d64:	8c 93       	st	X, r24
    5d66:	08 95       	ret
    5d68:	64 ff       	sbrs	r22, 4
    5d6a:	03 c0       	rjmp	.+6      	; 0x5d72 <__unpack_f+0xbe>
    5d6c:	81 e0       	ldi	r24, 0x01	; 1
    5d6e:	8c 93       	st	X, r24
    5d70:	12 c0       	rjmp	.+36     	; 0x5d96 <__unpack_f+0xe2>
    5d72:	1c 92       	st	X, r1
    5d74:	10 c0       	rjmp	.+32     	; 0x5d96 <__unpack_f+0xe2>
    5d76:	2f 57       	subi	r18, 0x7F	; 127
    5d78:	30 40       	sbci	r19, 0x00	; 0
    5d7a:	13 96       	adiw	r26, 0x03	; 3
    5d7c:	3c 93       	st	X, r19
    5d7e:	2e 93       	st	-X, r18
    5d80:	12 97       	sbiw	r26, 0x02	; 2
    5d82:	83 e0       	ldi	r24, 0x03	; 3
    5d84:	8c 93       	st	X, r24
    5d86:	87 e0       	ldi	r24, 0x07	; 7
    5d88:	44 0f       	add	r20, r20
    5d8a:	55 1f       	adc	r21, r21
    5d8c:	66 1f       	adc	r22, r22
    5d8e:	77 1f       	adc	r23, r23
    5d90:	8a 95       	dec	r24
    5d92:	d1 f7       	brne	.-12     	; 0x5d88 <__unpack_f+0xd4>
    5d94:	70 64       	ori	r23, 0x40	; 64
    5d96:	14 96       	adiw	r26, 0x04	; 4
    5d98:	4d 93       	st	X+, r20
    5d9a:	5d 93       	st	X+, r21
    5d9c:	6d 93       	st	X+, r22
    5d9e:	7c 93       	st	X, r23
    5da0:	17 97       	sbiw	r26, 0x07	; 7
    5da2:	08 95       	ret

00005da4 <__fpcmp_parts_f>:
    5da4:	1f 93       	push	r17
    5da6:	dc 01       	movw	r26, r24
    5da8:	fb 01       	movw	r30, r22
    5daa:	9c 91       	ld	r25, X
    5dac:	92 30       	cpi	r25, 0x02	; 2
    5dae:	08 f4       	brcc	.+2      	; 0x5db2 <__fpcmp_parts_f+0xe>
    5db0:	47 c0       	rjmp	.+142    	; 0x5e40 <__fpcmp_parts_f+0x9c>
    5db2:	80 81       	ld	r24, Z
    5db4:	82 30       	cpi	r24, 0x02	; 2
    5db6:	08 f4       	brcc	.+2      	; 0x5dba <__fpcmp_parts_f+0x16>
    5db8:	43 c0       	rjmp	.+134    	; 0x5e40 <__fpcmp_parts_f+0x9c>
    5dba:	94 30       	cpi	r25, 0x04	; 4
    5dbc:	51 f4       	brne	.+20     	; 0x5dd2 <__fpcmp_parts_f+0x2e>
    5dbe:	11 96       	adiw	r26, 0x01	; 1
    5dc0:	1c 91       	ld	r17, X
    5dc2:	84 30       	cpi	r24, 0x04	; 4
    5dc4:	99 f5       	brne	.+102    	; 0x5e2c <__fpcmp_parts_f+0x88>
    5dc6:	81 81       	ldd	r24, Z+1	; 0x01
    5dc8:	68 2f       	mov	r22, r24
    5dca:	70 e0       	ldi	r23, 0x00	; 0
    5dcc:	61 1b       	sub	r22, r17
    5dce:	71 09       	sbc	r23, r1
    5dd0:	3f c0       	rjmp	.+126    	; 0x5e50 <__fpcmp_parts_f+0xac>
    5dd2:	84 30       	cpi	r24, 0x04	; 4
    5dd4:	21 f0       	breq	.+8      	; 0x5dde <__fpcmp_parts_f+0x3a>
    5dd6:	92 30       	cpi	r25, 0x02	; 2
    5dd8:	31 f4       	brne	.+12     	; 0x5de6 <__fpcmp_parts_f+0x42>
    5dda:	82 30       	cpi	r24, 0x02	; 2
    5ddc:	b9 f1       	breq	.+110    	; 0x5e4c <__fpcmp_parts_f+0xa8>
    5dde:	81 81       	ldd	r24, Z+1	; 0x01
    5de0:	88 23       	and	r24, r24
    5de2:	89 f1       	breq	.+98     	; 0x5e46 <__fpcmp_parts_f+0xa2>
    5de4:	2d c0       	rjmp	.+90     	; 0x5e40 <__fpcmp_parts_f+0x9c>
    5de6:	11 96       	adiw	r26, 0x01	; 1
    5de8:	1c 91       	ld	r17, X
    5dea:	11 97       	sbiw	r26, 0x01	; 1
    5dec:	82 30       	cpi	r24, 0x02	; 2
    5dee:	f1 f0       	breq	.+60     	; 0x5e2c <__fpcmp_parts_f+0x88>
    5df0:	81 81       	ldd	r24, Z+1	; 0x01
    5df2:	18 17       	cp	r17, r24
    5df4:	d9 f4       	brne	.+54     	; 0x5e2c <__fpcmp_parts_f+0x88>
    5df6:	12 96       	adiw	r26, 0x02	; 2
    5df8:	2d 91       	ld	r18, X+
    5dfa:	3c 91       	ld	r19, X
    5dfc:	13 97       	sbiw	r26, 0x03	; 3
    5dfe:	82 81       	ldd	r24, Z+2	; 0x02
    5e00:	93 81       	ldd	r25, Z+3	; 0x03
    5e02:	82 17       	cp	r24, r18
    5e04:	93 07       	cpc	r25, r19
    5e06:	94 f0       	brlt	.+36     	; 0x5e2c <__fpcmp_parts_f+0x88>
    5e08:	28 17       	cp	r18, r24
    5e0a:	39 07       	cpc	r19, r25
    5e0c:	bc f0       	brlt	.+46     	; 0x5e3c <__fpcmp_parts_f+0x98>
    5e0e:	14 96       	adiw	r26, 0x04	; 4
    5e10:	8d 91       	ld	r24, X+
    5e12:	9d 91       	ld	r25, X+
    5e14:	0d 90       	ld	r0, X+
    5e16:	bc 91       	ld	r27, X
    5e18:	a0 2d       	mov	r26, r0
    5e1a:	24 81       	ldd	r18, Z+4	; 0x04
    5e1c:	35 81       	ldd	r19, Z+5	; 0x05
    5e1e:	46 81       	ldd	r20, Z+6	; 0x06
    5e20:	57 81       	ldd	r21, Z+7	; 0x07
    5e22:	28 17       	cp	r18, r24
    5e24:	39 07       	cpc	r19, r25
    5e26:	4a 07       	cpc	r20, r26
    5e28:	5b 07       	cpc	r21, r27
    5e2a:	18 f4       	brcc	.+6      	; 0x5e32 <__fpcmp_parts_f+0x8e>
    5e2c:	11 23       	and	r17, r17
    5e2e:	41 f0       	breq	.+16     	; 0x5e40 <__fpcmp_parts_f+0x9c>
    5e30:	0a c0       	rjmp	.+20     	; 0x5e46 <__fpcmp_parts_f+0xa2>
    5e32:	82 17       	cp	r24, r18
    5e34:	93 07       	cpc	r25, r19
    5e36:	a4 07       	cpc	r26, r20
    5e38:	b5 07       	cpc	r27, r21
    5e3a:	40 f4       	brcc	.+16     	; 0x5e4c <__fpcmp_parts_f+0xa8>
    5e3c:	11 23       	and	r17, r17
    5e3e:	19 f0       	breq	.+6      	; 0x5e46 <__fpcmp_parts_f+0xa2>
    5e40:	61 e0       	ldi	r22, 0x01	; 1
    5e42:	70 e0       	ldi	r23, 0x00	; 0
    5e44:	05 c0       	rjmp	.+10     	; 0x5e50 <__fpcmp_parts_f+0xac>
    5e46:	6f ef       	ldi	r22, 0xFF	; 255
    5e48:	7f ef       	ldi	r23, 0xFF	; 255
    5e4a:	02 c0       	rjmp	.+4      	; 0x5e50 <__fpcmp_parts_f+0xac>
    5e4c:	60 e0       	ldi	r22, 0x00	; 0
    5e4e:	70 e0       	ldi	r23, 0x00	; 0
    5e50:	cb 01       	movw	r24, r22
    5e52:	1f 91       	pop	r17
    5e54:	08 95       	ret

00005e56 <__mulsi3>:
    5e56:	62 9f       	mul	r22, r18
    5e58:	d0 01       	movw	r26, r0
    5e5a:	73 9f       	mul	r23, r19
    5e5c:	f0 01       	movw	r30, r0
    5e5e:	82 9f       	mul	r24, r18
    5e60:	e0 0d       	add	r30, r0
    5e62:	f1 1d       	adc	r31, r1
    5e64:	64 9f       	mul	r22, r20
    5e66:	e0 0d       	add	r30, r0
    5e68:	f1 1d       	adc	r31, r1
    5e6a:	92 9f       	mul	r25, r18
    5e6c:	f0 0d       	add	r31, r0
    5e6e:	83 9f       	mul	r24, r19
    5e70:	f0 0d       	add	r31, r0
    5e72:	74 9f       	mul	r23, r20
    5e74:	f0 0d       	add	r31, r0
    5e76:	65 9f       	mul	r22, r21
    5e78:	f0 0d       	add	r31, r0
    5e7a:	99 27       	eor	r25, r25
    5e7c:	72 9f       	mul	r23, r18
    5e7e:	b0 0d       	add	r27, r0
    5e80:	e1 1d       	adc	r30, r1
    5e82:	f9 1f       	adc	r31, r25
    5e84:	63 9f       	mul	r22, r19
    5e86:	b0 0d       	add	r27, r0
    5e88:	e1 1d       	adc	r30, r1
    5e8a:	f9 1f       	adc	r31, r25
    5e8c:	bd 01       	movw	r22, r26
    5e8e:	cf 01       	movw	r24, r30
    5e90:	11 24       	eor	r1, r1
    5e92:	08 95       	ret

00005e94 <__udivmodsi4>:
    5e94:	a1 e2       	ldi	r26, 0x21	; 33
    5e96:	1a 2e       	mov	r1, r26
    5e98:	aa 1b       	sub	r26, r26
    5e9a:	bb 1b       	sub	r27, r27
    5e9c:	fd 01       	movw	r30, r26
    5e9e:	0d c0       	rjmp	.+26     	; 0x5eba <__udivmodsi4_ep>

00005ea0 <__udivmodsi4_loop>:
    5ea0:	aa 1f       	adc	r26, r26
    5ea2:	bb 1f       	adc	r27, r27
    5ea4:	ee 1f       	adc	r30, r30
    5ea6:	ff 1f       	adc	r31, r31
    5ea8:	a2 17       	cp	r26, r18
    5eaa:	b3 07       	cpc	r27, r19
    5eac:	e4 07       	cpc	r30, r20
    5eae:	f5 07       	cpc	r31, r21
    5eb0:	20 f0       	brcs	.+8      	; 0x5eba <__udivmodsi4_ep>
    5eb2:	a2 1b       	sub	r26, r18
    5eb4:	b3 0b       	sbc	r27, r19
    5eb6:	e4 0b       	sbc	r30, r20
    5eb8:	f5 0b       	sbc	r31, r21

00005eba <__udivmodsi4_ep>:
    5eba:	66 1f       	adc	r22, r22
    5ebc:	77 1f       	adc	r23, r23
    5ebe:	88 1f       	adc	r24, r24
    5ec0:	99 1f       	adc	r25, r25
    5ec2:	1a 94       	dec	r1
    5ec4:	69 f7       	brne	.-38     	; 0x5ea0 <__udivmodsi4_loop>
    5ec6:	60 95       	com	r22
    5ec8:	70 95       	com	r23
    5eca:	80 95       	com	r24
    5ecc:	90 95       	com	r25
    5ece:	9b 01       	movw	r18, r22
    5ed0:	ac 01       	movw	r20, r24
    5ed2:	bd 01       	movw	r22, r26
    5ed4:	cf 01       	movw	r24, r30
    5ed6:	08 95       	ret

00005ed8 <__prologue_saves__>:
    5ed8:	2f 92       	push	r2
    5eda:	3f 92       	push	r3
    5edc:	4f 92       	push	r4
    5ede:	5f 92       	push	r5
    5ee0:	6f 92       	push	r6
    5ee2:	7f 92       	push	r7
    5ee4:	8f 92       	push	r8
    5ee6:	9f 92       	push	r9
    5ee8:	af 92       	push	r10
    5eea:	bf 92       	push	r11
    5eec:	cf 92       	push	r12
    5eee:	df 92       	push	r13
    5ef0:	ef 92       	push	r14
    5ef2:	ff 92       	push	r15
    5ef4:	0f 93       	push	r16
    5ef6:	1f 93       	push	r17
    5ef8:	cf 93       	push	r28
    5efa:	df 93       	push	r29
    5efc:	cd b7       	in	r28, 0x3d	; 61
    5efe:	de b7       	in	r29, 0x3e	; 62
    5f00:	ca 1b       	sub	r28, r26
    5f02:	db 0b       	sbc	r29, r27
    5f04:	0f b6       	in	r0, 0x3f	; 63
    5f06:	f8 94       	cli
    5f08:	de bf       	out	0x3e, r29	; 62
    5f0a:	0f be       	out	0x3f, r0	; 63
    5f0c:	cd bf       	out	0x3d, r28	; 61
    5f0e:	09 94       	ijmp

00005f10 <__epilogue_restores__>:
    5f10:	2a 88       	ldd	r2, Y+18	; 0x12
    5f12:	39 88       	ldd	r3, Y+17	; 0x11
    5f14:	48 88       	ldd	r4, Y+16	; 0x10
    5f16:	5f 84       	ldd	r5, Y+15	; 0x0f
    5f18:	6e 84       	ldd	r6, Y+14	; 0x0e
    5f1a:	7d 84       	ldd	r7, Y+13	; 0x0d
    5f1c:	8c 84       	ldd	r8, Y+12	; 0x0c
    5f1e:	9b 84       	ldd	r9, Y+11	; 0x0b
    5f20:	aa 84       	ldd	r10, Y+10	; 0x0a
    5f22:	b9 84       	ldd	r11, Y+9	; 0x09
    5f24:	c8 84       	ldd	r12, Y+8	; 0x08
    5f26:	df 80       	ldd	r13, Y+7	; 0x07
    5f28:	ee 80       	ldd	r14, Y+6	; 0x06
    5f2a:	fd 80       	ldd	r15, Y+5	; 0x05
    5f2c:	0c 81       	ldd	r16, Y+4	; 0x04
    5f2e:	1b 81       	ldd	r17, Y+3	; 0x03
    5f30:	aa 81       	ldd	r26, Y+2	; 0x02
    5f32:	b9 81       	ldd	r27, Y+1	; 0x01
    5f34:	ce 0f       	add	r28, r30
    5f36:	d1 1d       	adc	r29, r1
    5f38:	0f b6       	in	r0, 0x3f	; 63
    5f3a:	f8 94       	cli
    5f3c:	de bf       	out	0x3e, r29	; 62
    5f3e:	0f be       	out	0x3f, r0	; 63
    5f40:	cd bf       	out	0x3d, r28	; 61
    5f42:	ed 01       	movw	r28, r26
    5f44:	08 95       	ret

00005f46 <printf>:
    5f46:	df 93       	push	r29
    5f48:	cf 93       	push	r28
    5f4a:	cd b7       	in	r28, 0x3d	; 61
    5f4c:	de b7       	in	r29, 0x3e	; 62
    5f4e:	fe 01       	movw	r30, r28
    5f50:	35 96       	adiw	r30, 0x05	; 5
    5f52:	61 91       	ld	r22, Z+
    5f54:	71 91       	ld	r23, Z+
    5f56:	80 91 d2 01 	lds	r24, 0x01D2
    5f5a:	90 91 d3 01 	lds	r25, 0x01D3
    5f5e:	af 01       	movw	r20, r30
    5f60:	0e 94 b5 2f 	call	0x5f6a	; 0x5f6a <vfprintf>
    5f64:	cf 91       	pop	r28
    5f66:	df 91       	pop	r29
    5f68:	08 95       	ret

00005f6a <vfprintf>:
    5f6a:	2f 92       	push	r2
    5f6c:	3f 92       	push	r3
    5f6e:	4f 92       	push	r4
    5f70:	5f 92       	push	r5
    5f72:	6f 92       	push	r6
    5f74:	7f 92       	push	r7
    5f76:	8f 92       	push	r8
    5f78:	9f 92       	push	r9
    5f7a:	af 92       	push	r10
    5f7c:	bf 92       	push	r11
    5f7e:	cf 92       	push	r12
    5f80:	df 92       	push	r13
    5f82:	ef 92       	push	r14
    5f84:	ff 92       	push	r15
    5f86:	0f 93       	push	r16
    5f88:	1f 93       	push	r17
    5f8a:	df 93       	push	r29
    5f8c:	cf 93       	push	r28
    5f8e:	cd b7       	in	r28, 0x3d	; 61
    5f90:	de b7       	in	r29, 0x3e	; 62
    5f92:	2b 97       	sbiw	r28, 0x0b	; 11
    5f94:	0f b6       	in	r0, 0x3f	; 63
    5f96:	f8 94       	cli
    5f98:	de bf       	out	0x3e, r29	; 62
    5f9a:	0f be       	out	0x3f, r0	; 63
    5f9c:	cd bf       	out	0x3d, r28	; 61
    5f9e:	3c 01       	movw	r6, r24
    5fa0:	2b 01       	movw	r4, r22
    5fa2:	5a 01       	movw	r10, r20
    5fa4:	fc 01       	movw	r30, r24
    5fa6:	17 82       	std	Z+7, r1	; 0x07
    5fa8:	16 82       	std	Z+6, r1	; 0x06
    5faa:	83 81       	ldd	r24, Z+3	; 0x03
    5fac:	81 fd       	sbrc	r24, 1
    5fae:	03 c0       	rjmp	.+6      	; 0x5fb6 <vfprintf+0x4c>
    5fb0:	6f ef       	ldi	r22, 0xFF	; 255
    5fb2:	7f ef       	ldi	r23, 0xFF	; 255
    5fb4:	c6 c1       	rjmp	.+908    	; 0x6342 <vfprintf+0x3d8>
    5fb6:	9a e0       	ldi	r25, 0x0A	; 10
    5fb8:	89 2e       	mov	r8, r25
    5fba:	1e 01       	movw	r2, r28
    5fbc:	08 94       	sec
    5fbe:	21 1c       	adc	r2, r1
    5fc0:	31 1c       	adc	r3, r1
    5fc2:	f3 01       	movw	r30, r6
    5fc4:	23 81       	ldd	r18, Z+3	; 0x03
    5fc6:	f2 01       	movw	r30, r4
    5fc8:	23 fd       	sbrc	r18, 3
    5fca:	85 91       	lpm	r24, Z+
    5fcc:	23 ff       	sbrs	r18, 3
    5fce:	81 91       	ld	r24, Z+
    5fd0:	2f 01       	movw	r4, r30
    5fd2:	88 23       	and	r24, r24
    5fd4:	09 f4       	brne	.+2      	; 0x5fd8 <vfprintf+0x6e>
    5fd6:	b2 c1       	rjmp	.+868    	; 0x633c <vfprintf+0x3d2>
    5fd8:	85 32       	cpi	r24, 0x25	; 37
    5fda:	39 f4       	brne	.+14     	; 0x5fea <vfprintf+0x80>
    5fdc:	23 fd       	sbrc	r18, 3
    5fde:	85 91       	lpm	r24, Z+
    5fe0:	23 ff       	sbrs	r18, 3
    5fe2:	81 91       	ld	r24, Z+
    5fe4:	2f 01       	movw	r4, r30
    5fe6:	85 32       	cpi	r24, 0x25	; 37
    5fe8:	29 f4       	brne	.+10     	; 0x5ff4 <vfprintf+0x8a>
    5fea:	90 e0       	ldi	r25, 0x00	; 0
    5fec:	b3 01       	movw	r22, r6
    5fee:	0e 94 d1 31 	call	0x63a2	; 0x63a2 <fputc>
    5ff2:	e7 cf       	rjmp	.-50     	; 0x5fc2 <vfprintf+0x58>
    5ff4:	98 2f       	mov	r25, r24
    5ff6:	ff 24       	eor	r15, r15
    5ff8:	ee 24       	eor	r14, r14
    5ffa:	99 24       	eor	r9, r9
    5ffc:	ff e1       	ldi	r31, 0x1F	; 31
    5ffe:	ff 15       	cp	r31, r15
    6000:	d0 f0       	brcs	.+52     	; 0x6036 <vfprintf+0xcc>
    6002:	9b 32       	cpi	r25, 0x2B	; 43
    6004:	69 f0       	breq	.+26     	; 0x6020 <vfprintf+0xb6>
    6006:	9c 32       	cpi	r25, 0x2C	; 44
    6008:	28 f4       	brcc	.+10     	; 0x6014 <vfprintf+0xaa>
    600a:	90 32       	cpi	r25, 0x20	; 32
    600c:	59 f0       	breq	.+22     	; 0x6024 <vfprintf+0xba>
    600e:	93 32       	cpi	r25, 0x23	; 35
    6010:	91 f4       	brne	.+36     	; 0x6036 <vfprintf+0xcc>
    6012:	0e c0       	rjmp	.+28     	; 0x6030 <vfprintf+0xc6>
    6014:	9d 32       	cpi	r25, 0x2D	; 45
    6016:	49 f0       	breq	.+18     	; 0x602a <vfprintf+0xc0>
    6018:	90 33       	cpi	r25, 0x30	; 48
    601a:	69 f4       	brne	.+26     	; 0x6036 <vfprintf+0xcc>
    601c:	41 e0       	ldi	r20, 0x01	; 1
    601e:	24 c0       	rjmp	.+72     	; 0x6068 <vfprintf+0xfe>
    6020:	52 e0       	ldi	r21, 0x02	; 2
    6022:	f5 2a       	or	r15, r21
    6024:	84 e0       	ldi	r24, 0x04	; 4
    6026:	f8 2a       	or	r15, r24
    6028:	28 c0       	rjmp	.+80     	; 0x607a <vfprintf+0x110>
    602a:	98 e0       	ldi	r25, 0x08	; 8
    602c:	f9 2a       	or	r15, r25
    602e:	25 c0       	rjmp	.+74     	; 0x607a <vfprintf+0x110>
    6030:	e0 e1       	ldi	r30, 0x10	; 16
    6032:	fe 2a       	or	r15, r30
    6034:	22 c0       	rjmp	.+68     	; 0x607a <vfprintf+0x110>
    6036:	f7 fc       	sbrc	r15, 7
    6038:	29 c0       	rjmp	.+82     	; 0x608c <vfprintf+0x122>
    603a:	89 2f       	mov	r24, r25
    603c:	80 53       	subi	r24, 0x30	; 48
    603e:	8a 30       	cpi	r24, 0x0A	; 10
    6040:	70 f4       	brcc	.+28     	; 0x605e <vfprintf+0xf4>
    6042:	f6 fe       	sbrs	r15, 6
    6044:	05 c0       	rjmp	.+10     	; 0x6050 <vfprintf+0xe6>
    6046:	98 9c       	mul	r9, r8
    6048:	90 2c       	mov	r9, r0
    604a:	11 24       	eor	r1, r1
    604c:	98 0e       	add	r9, r24
    604e:	15 c0       	rjmp	.+42     	; 0x607a <vfprintf+0x110>
    6050:	e8 9c       	mul	r14, r8
    6052:	e0 2c       	mov	r14, r0
    6054:	11 24       	eor	r1, r1
    6056:	e8 0e       	add	r14, r24
    6058:	f0 e2       	ldi	r31, 0x20	; 32
    605a:	ff 2a       	or	r15, r31
    605c:	0e c0       	rjmp	.+28     	; 0x607a <vfprintf+0x110>
    605e:	9e 32       	cpi	r25, 0x2E	; 46
    6060:	29 f4       	brne	.+10     	; 0x606c <vfprintf+0x102>
    6062:	f6 fc       	sbrc	r15, 6
    6064:	6b c1       	rjmp	.+726    	; 0x633c <vfprintf+0x3d2>
    6066:	40 e4       	ldi	r20, 0x40	; 64
    6068:	f4 2a       	or	r15, r20
    606a:	07 c0       	rjmp	.+14     	; 0x607a <vfprintf+0x110>
    606c:	9c 36       	cpi	r25, 0x6C	; 108
    606e:	19 f4       	brne	.+6      	; 0x6076 <vfprintf+0x10c>
    6070:	50 e8       	ldi	r21, 0x80	; 128
    6072:	f5 2a       	or	r15, r21
    6074:	02 c0       	rjmp	.+4      	; 0x607a <vfprintf+0x110>
    6076:	98 36       	cpi	r25, 0x68	; 104
    6078:	49 f4       	brne	.+18     	; 0x608c <vfprintf+0x122>
    607a:	f2 01       	movw	r30, r4
    607c:	23 fd       	sbrc	r18, 3
    607e:	95 91       	lpm	r25, Z+
    6080:	23 ff       	sbrs	r18, 3
    6082:	91 91       	ld	r25, Z+
    6084:	2f 01       	movw	r4, r30
    6086:	99 23       	and	r25, r25
    6088:	09 f0       	breq	.+2      	; 0x608c <vfprintf+0x122>
    608a:	b8 cf       	rjmp	.-144    	; 0x5ffc <vfprintf+0x92>
    608c:	89 2f       	mov	r24, r25
    608e:	85 54       	subi	r24, 0x45	; 69
    6090:	83 30       	cpi	r24, 0x03	; 3
    6092:	18 f0       	brcs	.+6      	; 0x609a <vfprintf+0x130>
    6094:	80 52       	subi	r24, 0x20	; 32
    6096:	83 30       	cpi	r24, 0x03	; 3
    6098:	38 f4       	brcc	.+14     	; 0x60a8 <vfprintf+0x13e>
    609a:	44 e0       	ldi	r20, 0x04	; 4
    609c:	50 e0       	ldi	r21, 0x00	; 0
    609e:	a4 0e       	add	r10, r20
    60a0:	b5 1e       	adc	r11, r21
    60a2:	5f e3       	ldi	r21, 0x3F	; 63
    60a4:	59 83       	std	Y+1, r21	; 0x01
    60a6:	0f c0       	rjmp	.+30     	; 0x60c6 <vfprintf+0x15c>
    60a8:	93 36       	cpi	r25, 0x63	; 99
    60aa:	31 f0       	breq	.+12     	; 0x60b8 <vfprintf+0x14e>
    60ac:	93 37       	cpi	r25, 0x73	; 115
    60ae:	79 f0       	breq	.+30     	; 0x60ce <vfprintf+0x164>
    60b0:	93 35       	cpi	r25, 0x53	; 83
    60b2:	09 f0       	breq	.+2      	; 0x60b6 <vfprintf+0x14c>
    60b4:	56 c0       	rjmp	.+172    	; 0x6162 <vfprintf+0x1f8>
    60b6:	20 c0       	rjmp	.+64     	; 0x60f8 <vfprintf+0x18e>
    60b8:	f5 01       	movw	r30, r10
    60ba:	80 81       	ld	r24, Z
    60bc:	89 83       	std	Y+1, r24	; 0x01
    60be:	42 e0       	ldi	r20, 0x02	; 2
    60c0:	50 e0       	ldi	r21, 0x00	; 0
    60c2:	a4 0e       	add	r10, r20
    60c4:	b5 1e       	adc	r11, r21
    60c6:	61 01       	movw	r12, r2
    60c8:	01 e0       	ldi	r16, 0x01	; 1
    60ca:	10 e0       	ldi	r17, 0x00	; 0
    60cc:	12 c0       	rjmp	.+36     	; 0x60f2 <vfprintf+0x188>
    60ce:	f5 01       	movw	r30, r10
    60d0:	c0 80       	ld	r12, Z
    60d2:	d1 80       	ldd	r13, Z+1	; 0x01
    60d4:	f6 fc       	sbrc	r15, 6
    60d6:	03 c0       	rjmp	.+6      	; 0x60de <vfprintf+0x174>
    60d8:	6f ef       	ldi	r22, 0xFF	; 255
    60da:	7f ef       	ldi	r23, 0xFF	; 255
    60dc:	02 c0       	rjmp	.+4      	; 0x60e2 <vfprintf+0x178>
    60de:	69 2d       	mov	r22, r9
    60e0:	70 e0       	ldi	r23, 0x00	; 0
    60e2:	42 e0       	ldi	r20, 0x02	; 2
    60e4:	50 e0       	ldi	r21, 0x00	; 0
    60e6:	a4 0e       	add	r10, r20
    60e8:	b5 1e       	adc	r11, r21
    60ea:	c6 01       	movw	r24, r12
    60ec:	0e 94 c6 31 	call	0x638c	; 0x638c <strnlen>
    60f0:	8c 01       	movw	r16, r24
    60f2:	5f e7       	ldi	r21, 0x7F	; 127
    60f4:	f5 22       	and	r15, r21
    60f6:	14 c0       	rjmp	.+40     	; 0x6120 <vfprintf+0x1b6>
    60f8:	f5 01       	movw	r30, r10
    60fa:	c0 80       	ld	r12, Z
    60fc:	d1 80       	ldd	r13, Z+1	; 0x01
    60fe:	f6 fc       	sbrc	r15, 6
    6100:	03 c0       	rjmp	.+6      	; 0x6108 <vfprintf+0x19e>
    6102:	6f ef       	ldi	r22, 0xFF	; 255
    6104:	7f ef       	ldi	r23, 0xFF	; 255
    6106:	02 c0       	rjmp	.+4      	; 0x610c <vfprintf+0x1a2>
    6108:	69 2d       	mov	r22, r9
    610a:	70 e0       	ldi	r23, 0x00	; 0
    610c:	42 e0       	ldi	r20, 0x02	; 2
    610e:	50 e0       	ldi	r21, 0x00	; 0
    6110:	a4 0e       	add	r10, r20
    6112:	b5 1e       	adc	r11, r21
    6114:	c6 01       	movw	r24, r12
    6116:	0e 94 bb 31 	call	0x6376	; 0x6376 <strnlen_P>
    611a:	8c 01       	movw	r16, r24
    611c:	50 e8       	ldi	r21, 0x80	; 128
    611e:	f5 2a       	or	r15, r21
    6120:	f3 fe       	sbrs	r15, 3
    6122:	07 c0       	rjmp	.+14     	; 0x6132 <vfprintf+0x1c8>
    6124:	1a c0       	rjmp	.+52     	; 0x615a <vfprintf+0x1f0>
    6126:	80 e2       	ldi	r24, 0x20	; 32
    6128:	90 e0       	ldi	r25, 0x00	; 0
    612a:	b3 01       	movw	r22, r6
    612c:	0e 94 d1 31 	call	0x63a2	; 0x63a2 <fputc>
    6130:	ea 94       	dec	r14
    6132:	8e 2d       	mov	r24, r14
    6134:	90 e0       	ldi	r25, 0x00	; 0
    6136:	08 17       	cp	r16, r24
    6138:	19 07       	cpc	r17, r25
    613a:	a8 f3       	brcs	.-22     	; 0x6126 <vfprintf+0x1bc>
    613c:	0e c0       	rjmp	.+28     	; 0x615a <vfprintf+0x1f0>
    613e:	f6 01       	movw	r30, r12
    6140:	f7 fc       	sbrc	r15, 7
    6142:	85 91       	lpm	r24, Z+
    6144:	f7 fe       	sbrs	r15, 7
    6146:	81 91       	ld	r24, Z+
    6148:	6f 01       	movw	r12, r30
    614a:	90 e0       	ldi	r25, 0x00	; 0
    614c:	b3 01       	movw	r22, r6
    614e:	0e 94 d1 31 	call	0x63a2	; 0x63a2 <fputc>
    6152:	e1 10       	cpse	r14, r1
    6154:	ea 94       	dec	r14
    6156:	01 50       	subi	r16, 0x01	; 1
    6158:	10 40       	sbci	r17, 0x00	; 0
    615a:	01 15       	cp	r16, r1
    615c:	11 05       	cpc	r17, r1
    615e:	79 f7       	brne	.-34     	; 0x613e <vfprintf+0x1d4>
    6160:	ea c0       	rjmp	.+468    	; 0x6336 <vfprintf+0x3cc>
    6162:	94 36       	cpi	r25, 0x64	; 100
    6164:	11 f0       	breq	.+4      	; 0x616a <vfprintf+0x200>
    6166:	99 36       	cpi	r25, 0x69	; 105
    6168:	69 f5       	brne	.+90     	; 0x61c4 <vfprintf+0x25a>
    616a:	f7 fe       	sbrs	r15, 7
    616c:	08 c0       	rjmp	.+16     	; 0x617e <vfprintf+0x214>
    616e:	f5 01       	movw	r30, r10
    6170:	20 81       	ld	r18, Z
    6172:	31 81       	ldd	r19, Z+1	; 0x01
    6174:	42 81       	ldd	r20, Z+2	; 0x02
    6176:	53 81       	ldd	r21, Z+3	; 0x03
    6178:	84 e0       	ldi	r24, 0x04	; 4
    617a:	90 e0       	ldi	r25, 0x00	; 0
    617c:	0a c0       	rjmp	.+20     	; 0x6192 <vfprintf+0x228>
    617e:	f5 01       	movw	r30, r10
    6180:	80 81       	ld	r24, Z
    6182:	91 81       	ldd	r25, Z+1	; 0x01
    6184:	9c 01       	movw	r18, r24
    6186:	44 27       	eor	r20, r20
    6188:	37 fd       	sbrc	r19, 7
    618a:	40 95       	com	r20
    618c:	54 2f       	mov	r21, r20
    618e:	82 e0       	ldi	r24, 0x02	; 2
    6190:	90 e0       	ldi	r25, 0x00	; 0
    6192:	a8 0e       	add	r10, r24
    6194:	b9 1e       	adc	r11, r25
    6196:	9f e6       	ldi	r25, 0x6F	; 111
    6198:	f9 22       	and	r15, r25
    619a:	57 ff       	sbrs	r21, 7
    619c:	09 c0       	rjmp	.+18     	; 0x61b0 <vfprintf+0x246>
    619e:	50 95       	com	r21
    61a0:	40 95       	com	r20
    61a2:	30 95       	com	r19
    61a4:	21 95       	neg	r18
    61a6:	3f 4f       	sbci	r19, 0xFF	; 255
    61a8:	4f 4f       	sbci	r20, 0xFF	; 255
    61aa:	5f 4f       	sbci	r21, 0xFF	; 255
    61ac:	e0 e8       	ldi	r30, 0x80	; 128
    61ae:	fe 2a       	or	r15, r30
    61b0:	ca 01       	movw	r24, r20
    61b2:	b9 01       	movw	r22, r18
    61b4:	a1 01       	movw	r20, r2
    61b6:	2a e0       	ldi	r18, 0x0A	; 10
    61b8:	30 e0       	ldi	r19, 0x00	; 0
    61ba:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__ultoa_invert>
    61be:	d8 2e       	mov	r13, r24
    61c0:	d2 18       	sub	r13, r2
    61c2:	40 c0       	rjmp	.+128    	; 0x6244 <vfprintf+0x2da>
    61c4:	95 37       	cpi	r25, 0x75	; 117
    61c6:	29 f4       	brne	.+10     	; 0x61d2 <vfprintf+0x268>
    61c8:	1f 2d       	mov	r17, r15
    61ca:	1f 7e       	andi	r17, 0xEF	; 239
    61cc:	2a e0       	ldi	r18, 0x0A	; 10
    61ce:	30 e0       	ldi	r19, 0x00	; 0
    61d0:	1d c0       	rjmp	.+58     	; 0x620c <vfprintf+0x2a2>
    61d2:	1f 2d       	mov	r17, r15
    61d4:	19 7f       	andi	r17, 0xF9	; 249
    61d6:	9f 36       	cpi	r25, 0x6F	; 111
    61d8:	61 f0       	breq	.+24     	; 0x61f2 <vfprintf+0x288>
    61da:	90 37       	cpi	r25, 0x70	; 112
    61dc:	20 f4       	brcc	.+8      	; 0x61e6 <vfprintf+0x27c>
    61de:	98 35       	cpi	r25, 0x58	; 88
    61e0:	09 f0       	breq	.+2      	; 0x61e4 <vfprintf+0x27a>
    61e2:	ac c0       	rjmp	.+344    	; 0x633c <vfprintf+0x3d2>
    61e4:	0f c0       	rjmp	.+30     	; 0x6204 <vfprintf+0x29a>
    61e6:	90 37       	cpi	r25, 0x70	; 112
    61e8:	39 f0       	breq	.+14     	; 0x61f8 <vfprintf+0x28e>
    61ea:	98 37       	cpi	r25, 0x78	; 120
    61ec:	09 f0       	breq	.+2      	; 0x61f0 <vfprintf+0x286>
    61ee:	a6 c0       	rjmp	.+332    	; 0x633c <vfprintf+0x3d2>
    61f0:	04 c0       	rjmp	.+8      	; 0x61fa <vfprintf+0x290>
    61f2:	28 e0       	ldi	r18, 0x08	; 8
    61f4:	30 e0       	ldi	r19, 0x00	; 0
    61f6:	0a c0       	rjmp	.+20     	; 0x620c <vfprintf+0x2a2>
    61f8:	10 61       	ori	r17, 0x10	; 16
    61fa:	14 fd       	sbrc	r17, 4
    61fc:	14 60       	ori	r17, 0x04	; 4
    61fe:	20 e1       	ldi	r18, 0x10	; 16
    6200:	30 e0       	ldi	r19, 0x00	; 0
    6202:	04 c0       	rjmp	.+8      	; 0x620c <vfprintf+0x2a2>
    6204:	14 fd       	sbrc	r17, 4
    6206:	16 60       	ori	r17, 0x06	; 6
    6208:	20 e1       	ldi	r18, 0x10	; 16
    620a:	32 e0       	ldi	r19, 0x02	; 2
    620c:	17 ff       	sbrs	r17, 7
    620e:	08 c0       	rjmp	.+16     	; 0x6220 <vfprintf+0x2b6>
    6210:	f5 01       	movw	r30, r10
    6212:	60 81       	ld	r22, Z
    6214:	71 81       	ldd	r23, Z+1	; 0x01
    6216:	82 81       	ldd	r24, Z+2	; 0x02
    6218:	93 81       	ldd	r25, Z+3	; 0x03
    621a:	44 e0       	ldi	r20, 0x04	; 4
    621c:	50 e0       	ldi	r21, 0x00	; 0
    621e:	08 c0       	rjmp	.+16     	; 0x6230 <vfprintf+0x2c6>
    6220:	f5 01       	movw	r30, r10
    6222:	80 81       	ld	r24, Z
    6224:	91 81       	ldd	r25, Z+1	; 0x01
    6226:	bc 01       	movw	r22, r24
    6228:	80 e0       	ldi	r24, 0x00	; 0
    622a:	90 e0       	ldi	r25, 0x00	; 0
    622c:	42 e0       	ldi	r20, 0x02	; 2
    622e:	50 e0       	ldi	r21, 0x00	; 0
    6230:	a4 0e       	add	r10, r20
    6232:	b5 1e       	adc	r11, r21
    6234:	a1 01       	movw	r20, r2
    6236:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__ultoa_invert>
    623a:	d8 2e       	mov	r13, r24
    623c:	d2 18       	sub	r13, r2
    623e:	8f e7       	ldi	r24, 0x7F	; 127
    6240:	f8 2e       	mov	r15, r24
    6242:	f1 22       	and	r15, r17
    6244:	f6 fe       	sbrs	r15, 6
    6246:	0b c0       	rjmp	.+22     	; 0x625e <vfprintf+0x2f4>
    6248:	5e ef       	ldi	r21, 0xFE	; 254
    624a:	f5 22       	and	r15, r21
    624c:	d9 14       	cp	r13, r9
    624e:	38 f4       	brcc	.+14     	; 0x625e <vfprintf+0x2f4>
    6250:	f4 fe       	sbrs	r15, 4
    6252:	07 c0       	rjmp	.+14     	; 0x6262 <vfprintf+0x2f8>
    6254:	f2 fc       	sbrc	r15, 2
    6256:	05 c0       	rjmp	.+10     	; 0x6262 <vfprintf+0x2f8>
    6258:	8f ee       	ldi	r24, 0xEF	; 239
    625a:	f8 22       	and	r15, r24
    625c:	02 c0       	rjmp	.+4      	; 0x6262 <vfprintf+0x2f8>
    625e:	1d 2d       	mov	r17, r13
    6260:	01 c0       	rjmp	.+2      	; 0x6264 <vfprintf+0x2fa>
    6262:	19 2d       	mov	r17, r9
    6264:	f4 fe       	sbrs	r15, 4
    6266:	0d c0       	rjmp	.+26     	; 0x6282 <vfprintf+0x318>
    6268:	fe 01       	movw	r30, r28
    626a:	ed 0d       	add	r30, r13
    626c:	f1 1d       	adc	r31, r1
    626e:	80 81       	ld	r24, Z
    6270:	80 33       	cpi	r24, 0x30	; 48
    6272:	19 f4       	brne	.+6      	; 0x627a <vfprintf+0x310>
    6274:	99 ee       	ldi	r25, 0xE9	; 233
    6276:	f9 22       	and	r15, r25
    6278:	08 c0       	rjmp	.+16     	; 0x628a <vfprintf+0x320>
    627a:	1f 5f       	subi	r17, 0xFF	; 255
    627c:	f2 fe       	sbrs	r15, 2
    627e:	05 c0       	rjmp	.+10     	; 0x628a <vfprintf+0x320>
    6280:	03 c0       	rjmp	.+6      	; 0x6288 <vfprintf+0x31e>
    6282:	8f 2d       	mov	r24, r15
    6284:	86 78       	andi	r24, 0x86	; 134
    6286:	09 f0       	breq	.+2      	; 0x628a <vfprintf+0x320>
    6288:	1f 5f       	subi	r17, 0xFF	; 255
    628a:	0f 2d       	mov	r16, r15
    628c:	f3 fc       	sbrc	r15, 3
    628e:	14 c0       	rjmp	.+40     	; 0x62b8 <vfprintf+0x34e>
    6290:	f0 fe       	sbrs	r15, 0
    6292:	0f c0       	rjmp	.+30     	; 0x62b2 <vfprintf+0x348>
    6294:	1e 15       	cp	r17, r14
    6296:	10 f0       	brcs	.+4      	; 0x629c <vfprintf+0x332>
    6298:	9d 2c       	mov	r9, r13
    629a:	0b c0       	rjmp	.+22     	; 0x62b2 <vfprintf+0x348>
    629c:	9d 2c       	mov	r9, r13
    629e:	9e 0c       	add	r9, r14
    62a0:	91 1a       	sub	r9, r17
    62a2:	1e 2d       	mov	r17, r14
    62a4:	06 c0       	rjmp	.+12     	; 0x62b2 <vfprintf+0x348>
    62a6:	80 e2       	ldi	r24, 0x20	; 32
    62a8:	90 e0       	ldi	r25, 0x00	; 0
    62aa:	b3 01       	movw	r22, r6
    62ac:	0e 94 d1 31 	call	0x63a2	; 0x63a2 <fputc>
    62b0:	1f 5f       	subi	r17, 0xFF	; 255
    62b2:	1e 15       	cp	r17, r14
    62b4:	c0 f3       	brcs	.-16     	; 0x62a6 <vfprintf+0x33c>
    62b6:	04 c0       	rjmp	.+8      	; 0x62c0 <vfprintf+0x356>
    62b8:	1e 15       	cp	r17, r14
    62ba:	10 f4       	brcc	.+4      	; 0x62c0 <vfprintf+0x356>
    62bc:	e1 1a       	sub	r14, r17
    62be:	01 c0       	rjmp	.+2      	; 0x62c2 <vfprintf+0x358>
    62c0:	ee 24       	eor	r14, r14
    62c2:	04 ff       	sbrs	r16, 4
    62c4:	0f c0       	rjmp	.+30     	; 0x62e4 <vfprintf+0x37a>
    62c6:	80 e3       	ldi	r24, 0x30	; 48
    62c8:	90 e0       	ldi	r25, 0x00	; 0
    62ca:	b3 01       	movw	r22, r6
    62cc:	0e 94 d1 31 	call	0x63a2	; 0x63a2 <fputc>
    62d0:	02 ff       	sbrs	r16, 2
    62d2:	1d c0       	rjmp	.+58     	; 0x630e <vfprintf+0x3a4>
    62d4:	01 fd       	sbrc	r16, 1
    62d6:	03 c0       	rjmp	.+6      	; 0x62de <vfprintf+0x374>
    62d8:	88 e7       	ldi	r24, 0x78	; 120
    62da:	90 e0       	ldi	r25, 0x00	; 0
    62dc:	0e c0       	rjmp	.+28     	; 0x62fa <vfprintf+0x390>
    62de:	88 e5       	ldi	r24, 0x58	; 88
    62e0:	90 e0       	ldi	r25, 0x00	; 0
    62e2:	0b c0       	rjmp	.+22     	; 0x62fa <vfprintf+0x390>
    62e4:	80 2f       	mov	r24, r16
    62e6:	86 78       	andi	r24, 0x86	; 134
    62e8:	91 f0       	breq	.+36     	; 0x630e <vfprintf+0x3a4>
    62ea:	01 ff       	sbrs	r16, 1
    62ec:	02 c0       	rjmp	.+4      	; 0x62f2 <vfprintf+0x388>
    62ee:	8b e2       	ldi	r24, 0x2B	; 43
    62f0:	01 c0       	rjmp	.+2      	; 0x62f4 <vfprintf+0x38a>
    62f2:	80 e2       	ldi	r24, 0x20	; 32
    62f4:	f7 fc       	sbrc	r15, 7
    62f6:	8d e2       	ldi	r24, 0x2D	; 45
    62f8:	90 e0       	ldi	r25, 0x00	; 0
    62fa:	b3 01       	movw	r22, r6
    62fc:	0e 94 d1 31 	call	0x63a2	; 0x63a2 <fputc>
    6300:	06 c0       	rjmp	.+12     	; 0x630e <vfprintf+0x3a4>
    6302:	80 e3       	ldi	r24, 0x30	; 48
    6304:	90 e0       	ldi	r25, 0x00	; 0
    6306:	b3 01       	movw	r22, r6
    6308:	0e 94 d1 31 	call	0x63a2	; 0x63a2 <fputc>
    630c:	9a 94       	dec	r9
    630e:	d9 14       	cp	r13, r9
    6310:	c0 f3       	brcs	.-16     	; 0x6302 <vfprintf+0x398>
    6312:	da 94       	dec	r13
    6314:	f1 01       	movw	r30, r2
    6316:	ed 0d       	add	r30, r13
    6318:	f1 1d       	adc	r31, r1
    631a:	80 81       	ld	r24, Z
    631c:	90 e0       	ldi	r25, 0x00	; 0
    631e:	b3 01       	movw	r22, r6
    6320:	0e 94 d1 31 	call	0x63a2	; 0x63a2 <fputc>
    6324:	dd 20       	and	r13, r13
    6326:	a9 f7       	brne	.-22     	; 0x6312 <vfprintf+0x3a8>
    6328:	06 c0       	rjmp	.+12     	; 0x6336 <vfprintf+0x3cc>
    632a:	80 e2       	ldi	r24, 0x20	; 32
    632c:	90 e0       	ldi	r25, 0x00	; 0
    632e:	b3 01       	movw	r22, r6
    6330:	0e 94 d1 31 	call	0x63a2	; 0x63a2 <fputc>
    6334:	ea 94       	dec	r14
    6336:	ee 20       	and	r14, r14
    6338:	c1 f7       	brne	.-16     	; 0x632a <vfprintf+0x3c0>
    633a:	43 ce       	rjmp	.-890    	; 0x5fc2 <vfprintf+0x58>
    633c:	f3 01       	movw	r30, r6
    633e:	66 81       	ldd	r22, Z+6	; 0x06
    6340:	77 81       	ldd	r23, Z+7	; 0x07
    6342:	cb 01       	movw	r24, r22
    6344:	2b 96       	adiw	r28, 0x0b	; 11
    6346:	0f b6       	in	r0, 0x3f	; 63
    6348:	f8 94       	cli
    634a:	de bf       	out	0x3e, r29	; 62
    634c:	0f be       	out	0x3f, r0	; 63
    634e:	cd bf       	out	0x3d, r28	; 61
    6350:	cf 91       	pop	r28
    6352:	df 91       	pop	r29
    6354:	1f 91       	pop	r17
    6356:	0f 91       	pop	r16
    6358:	ff 90       	pop	r15
    635a:	ef 90       	pop	r14
    635c:	df 90       	pop	r13
    635e:	cf 90       	pop	r12
    6360:	bf 90       	pop	r11
    6362:	af 90       	pop	r10
    6364:	9f 90       	pop	r9
    6366:	8f 90       	pop	r8
    6368:	7f 90       	pop	r7
    636a:	6f 90       	pop	r6
    636c:	5f 90       	pop	r5
    636e:	4f 90       	pop	r4
    6370:	3f 90       	pop	r3
    6372:	2f 90       	pop	r2
    6374:	08 95       	ret

00006376 <strnlen_P>:
    6376:	fc 01       	movw	r30, r24
    6378:	05 90       	lpm	r0, Z+
    637a:	61 50       	subi	r22, 0x01	; 1
    637c:	70 40       	sbci	r23, 0x00	; 0
    637e:	01 10       	cpse	r0, r1
    6380:	d8 f7       	brcc	.-10     	; 0x6378 <strnlen_P+0x2>
    6382:	80 95       	com	r24
    6384:	90 95       	com	r25
    6386:	8e 0f       	add	r24, r30
    6388:	9f 1f       	adc	r25, r31
    638a:	08 95       	ret

0000638c <strnlen>:
    638c:	fc 01       	movw	r30, r24
    638e:	61 50       	subi	r22, 0x01	; 1
    6390:	70 40       	sbci	r23, 0x00	; 0
    6392:	01 90       	ld	r0, Z+
    6394:	01 10       	cpse	r0, r1
    6396:	d8 f7       	brcc	.-10     	; 0x638e <strnlen+0x2>
    6398:	80 95       	com	r24
    639a:	90 95       	com	r25
    639c:	8e 0f       	add	r24, r30
    639e:	9f 1f       	adc	r25, r31
    63a0:	08 95       	ret

000063a2 <fputc>:
    63a2:	0f 93       	push	r16
    63a4:	1f 93       	push	r17
    63a6:	cf 93       	push	r28
    63a8:	df 93       	push	r29
    63aa:	8c 01       	movw	r16, r24
    63ac:	eb 01       	movw	r28, r22
    63ae:	8b 81       	ldd	r24, Y+3	; 0x03
    63b0:	81 ff       	sbrs	r24, 1
    63b2:	1b c0       	rjmp	.+54     	; 0x63ea <fputc+0x48>
    63b4:	82 ff       	sbrs	r24, 2
    63b6:	0d c0       	rjmp	.+26     	; 0x63d2 <fputc+0x30>
    63b8:	2e 81       	ldd	r18, Y+6	; 0x06
    63ba:	3f 81       	ldd	r19, Y+7	; 0x07
    63bc:	8c 81       	ldd	r24, Y+4	; 0x04
    63be:	9d 81       	ldd	r25, Y+5	; 0x05
    63c0:	28 17       	cp	r18, r24
    63c2:	39 07       	cpc	r19, r25
    63c4:	64 f4       	brge	.+24     	; 0x63de <fputc+0x3c>
    63c6:	e8 81       	ld	r30, Y
    63c8:	f9 81       	ldd	r31, Y+1	; 0x01
    63ca:	01 93       	st	Z+, r16
    63cc:	f9 83       	std	Y+1, r31	; 0x01
    63ce:	e8 83       	st	Y, r30
    63d0:	06 c0       	rjmp	.+12     	; 0x63de <fputc+0x3c>
    63d2:	e8 85       	ldd	r30, Y+8	; 0x08
    63d4:	f9 85       	ldd	r31, Y+9	; 0x09
    63d6:	80 2f       	mov	r24, r16
    63d8:	09 95       	icall
    63da:	89 2b       	or	r24, r25
    63dc:	31 f4       	brne	.+12     	; 0x63ea <fputc+0x48>
    63de:	8e 81       	ldd	r24, Y+6	; 0x06
    63e0:	9f 81       	ldd	r25, Y+7	; 0x07
    63e2:	01 96       	adiw	r24, 0x01	; 1
    63e4:	9f 83       	std	Y+7, r25	; 0x07
    63e6:	8e 83       	std	Y+6, r24	; 0x06
    63e8:	02 c0       	rjmp	.+4      	; 0x63ee <fputc+0x4c>
    63ea:	0f ef       	ldi	r16, 0xFF	; 255
    63ec:	1f ef       	ldi	r17, 0xFF	; 255
    63ee:	c8 01       	movw	r24, r16
    63f0:	df 91       	pop	r29
    63f2:	cf 91       	pop	r28
    63f4:	1f 91       	pop	r17
    63f6:	0f 91       	pop	r16
    63f8:	08 95       	ret

000063fa <__ultoa_invert>:
    63fa:	fa 01       	movw	r30, r20
    63fc:	aa 27       	eor	r26, r26
    63fe:	28 30       	cpi	r18, 0x08	; 8
    6400:	51 f1       	breq	.+84     	; 0x6456 <__ultoa_invert+0x5c>
    6402:	20 31       	cpi	r18, 0x10	; 16
    6404:	81 f1       	breq	.+96     	; 0x6466 <__ultoa_invert+0x6c>
    6406:	e8 94       	clt
    6408:	6f 93       	push	r22
    640a:	6e 7f       	andi	r22, 0xFE	; 254
    640c:	6e 5f       	subi	r22, 0xFE	; 254
    640e:	7f 4f       	sbci	r23, 0xFF	; 255
    6410:	8f 4f       	sbci	r24, 0xFF	; 255
    6412:	9f 4f       	sbci	r25, 0xFF	; 255
    6414:	af 4f       	sbci	r26, 0xFF	; 255
    6416:	b1 e0       	ldi	r27, 0x01	; 1
    6418:	3e d0       	rcall	.+124    	; 0x6496 <__ultoa_invert+0x9c>
    641a:	b4 e0       	ldi	r27, 0x04	; 4
    641c:	3c d0       	rcall	.+120    	; 0x6496 <__ultoa_invert+0x9c>
    641e:	67 0f       	add	r22, r23
    6420:	78 1f       	adc	r23, r24
    6422:	89 1f       	adc	r24, r25
    6424:	9a 1f       	adc	r25, r26
    6426:	a1 1d       	adc	r26, r1
    6428:	68 0f       	add	r22, r24
    642a:	79 1f       	adc	r23, r25
    642c:	8a 1f       	adc	r24, r26
    642e:	91 1d       	adc	r25, r1
    6430:	a1 1d       	adc	r26, r1
    6432:	6a 0f       	add	r22, r26
    6434:	71 1d       	adc	r23, r1
    6436:	81 1d       	adc	r24, r1
    6438:	91 1d       	adc	r25, r1
    643a:	a1 1d       	adc	r26, r1
    643c:	20 d0       	rcall	.+64     	; 0x647e <__ultoa_invert+0x84>
    643e:	09 f4       	brne	.+2      	; 0x6442 <__ultoa_invert+0x48>
    6440:	68 94       	set
    6442:	3f 91       	pop	r19
    6444:	2a e0       	ldi	r18, 0x0A	; 10
    6446:	26 9f       	mul	r18, r22
    6448:	11 24       	eor	r1, r1
    644a:	30 19       	sub	r19, r0
    644c:	30 5d       	subi	r19, 0xD0	; 208
    644e:	31 93       	st	Z+, r19
    6450:	de f6       	brtc	.-74     	; 0x6408 <__ultoa_invert+0xe>
    6452:	cf 01       	movw	r24, r30
    6454:	08 95       	ret
    6456:	46 2f       	mov	r20, r22
    6458:	47 70       	andi	r20, 0x07	; 7
    645a:	40 5d       	subi	r20, 0xD0	; 208
    645c:	41 93       	st	Z+, r20
    645e:	b3 e0       	ldi	r27, 0x03	; 3
    6460:	0f d0       	rcall	.+30     	; 0x6480 <__ultoa_invert+0x86>
    6462:	c9 f7       	brne	.-14     	; 0x6456 <__ultoa_invert+0x5c>
    6464:	f6 cf       	rjmp	.-20     	; 0x6452 <__ultoa_invert+0x58>
    6466:	46 2f       	mov	r20, r22
    6468:	4f 70       	andi	r20, 0x0F	; 15
    646a:	40 5d       	subi	r20, 0xD0	; 208
    646c:	4a 33       	cpi	r20, 0x3A	; 58
    646e:	18 f0       	brcs	.+6      	; 0x6476 <__ultoa_invert+0x7c>
    6470:	49 5d       	subi	r20, 0xD9	; 217
    6472:	31 fd       	sbrc	r19, 1
    6474:	40 52       	subi	r20, 0x20	; 32
    6476:	41 93       	st	Z+, r20
    6478:	02 d0       	rcall	.+4      	; 0x647e <__ultoa_invert+0x84>
    647a:	a9 f7       	brne	.-22     	; 0x6466 <__ultoa_invert+0x6c>
    647c:	ea cf       	rjmp	.-44     	; 0x6452 <__ultoa_invert+0x58>
    647e:	b4 e0       	ldi	r27, 0x04	; 4
    6480:	a6 95       	lsr	r26
    6482:	97 95       	ror	r25
    6484:	87 95       	ror	r24
    6486:	77 95       	ror	r23
    6488:	67 95       	ror	r22
    648a:	ba 95       	dec	r27
    648c:	c9 f7       	brne	.-14     	; 0x6480 <__ultoa_invert+0x86>
    648e:	00 97       	sbiw	r24, 0x00	; 0
    6490:	61 05       	cpc	r22, r1
    6492:	71 05       	cpc	r23, r1
    6494:	08 95       	ret
    6496:	9b 01       	movw	r18, r22
    6498:	ac 01       	movw	r20, r24
    649a:	0a 2e       	mov	r0, r26
    649c:	06 94       	lsr	r0
    649e:	57 95       	ror	r21
    64a0:	47 95       	ror	r20
    64a2:	37 95       	ror	r19
    64a4:	27 95       	ror	r18
    64a6:	ba 95       	dec	r27
    64a8:	c9 f7       	brne	.-14     	; 0x649c <__ultoa_invert+0xa2>
    64aa:	62 0f       	add	r22, r18
    64ac:	73 1f       	adc	r23, r19
    64ae:	84 1f       	adc	r24, r20
    64b0:	95 1f       	adc	r25, r21
    64b2:	a0 1d       	adc	r26, r0
    64b4:	08 95       	ret

000064b6 <_exit>:
    64b6:	f8 94       	cli

000064b8 <__stop_program>:
    64b8:	ff cf       	rjmp	.-2      	; 0x64b8 <__stop_program>
